{"prompt": "在现代农业中，土壤健康对于作物的生长和粮食产量至关重要。然而，土壤退化和养分流失已成为全球性问题。通过合理的土壤管理，可以有效提高土地的生产力，同时减少对环境的负面影响。一个关键策略是了解土壤中有机物含量与作物产量之间的关系，并制定适合的施肥策略。研究表明，有机物含量不仅影响植物的生长，还能改善土壤结构、增强水分保持能力，从而减少侵蚀风险。你需要分析以下土壤管理的具体问题，并提出解决方案。\n\n请写一篇关于现代农业中土壤健康管理的文章，主题为“提升土壤健康与作物产量的科学策略”。要求文章必须出现“土壤结构”、“有机物”、“水分保持”三个词语。要求文章的第3个句子以“现代农业的核心挑战在于”开头。请在回复中详细解释并列出其中三种主要方法，使用“&方法1&”、“&方法2&”和“&方法3&”作为主要原因的占位符。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n\n    # 检查标记完整性\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    start_idx = response.index(\"【答案开始】\") + 6\n    end_idx = response.index(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n\n    # 验证必须包含的词语\n    required_words = [\"土壤结构\", \"有机物\", \"水分保持\"]\n    for word in required_words:\n        if word not in content:\n            err_infos.append(f\"缺少关键词'{word}'\")\n\n    # 验证第三个句子开头\n    sentences = re.split(r'(?<=[。！？?])', content)\n    valid_sentences = [s.strip() for s in sentences if s.strip()]\n    if len(valid_sentences) < 3:\n        err_infos.append(\"句子数量不足\")\n    elif not valid_sentences[2].startswith(\"现代农业的核心挑战在于\"):\n        err_infos.append(\"第3句开头不符合要求\")\n\n    # 验证方法占位符\n    placeholders = [\"&方法1&\", \"&方法2&\", \"&方法3&\"]\n    for ph in placeholders:\n        if ph not in content:\n            err_infos.append(f\"缺少占位符'{ph}'\")\n\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“家庭园艺中遇到的挑战”的文章，请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。请以“在家庭园艺中”这几个字开头，并且避免使用“简单”、“便捷”、“经济”这几个词。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    \n    # 检查结束标记\n    if \"【答案结束】\" not in response:\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    else:\n        # 提取答案内容\n        start_idx = response.find(\"【答案开始】\") + 6\n        end_idx = response.find(\"【答案结束】\")\n        content = response[start_idx:end_idx].strip()\n        \n        # 检查开头\n        if not content.startswith(\"在家庭园艺中\"):\n            err_infos.append(\"内容未以'在家庭园艺中'开头\")\n        \n        # 检查段落数量\n        paragraphs = [p.strip() for p in content.split('～～') if p.strip()]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"段落数量错误: 需要4段, 实际{len(paragraphs)}段\")\n        \n        # 检查禁止词\n        forbidden_words = [\"简单\", \"便捷\", \"经济\"]\n        for i, para in enumerate(paragraphs):\n            for word in forbidden_words:\n                if word in para:\n                    err_infos.append(f\"第{i+1}段包含禁止词'{word}'\")\n    \n    # 检查多余内容\n    if \"【答案开始】\" in response and \"【答案结束】\" in response:\n        prefix = response.split(\"【答案开始】\")[0]\n        suffix = response.split(\"【答案结束】\")[1]\n        if prefix.strip() or suffix.strip():\n            err_infos.append(\"存在多余内容: 标记外部有文本\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "描述一种未来的交通方式，但请避免使用“无人驾驶”、“电动”以及“飞行”这三个词。在你的描述中，详细解释该交通方式的三种主要优势，并使用“&优势1&”、“&优势2&”和“&优势3&”作为优势的占位符。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content = re.search(r\"【答案开始】(.+)【答案结束】\", response, re.DOTALL)\n    if not content:\n        err_infos.append(\"未找到完整答案区域\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    answers = content.group(1).strip().split(\"@@@@@@\")\n    \n    # 检查答案数量\n    if len(answers) != 2:\n        err_infos.append(f\"需要2个答案，实际找到{len(answers)}个\")\n    \n    # 检查每个答案\n    banned_words = [\"无人驾驶\", \"电动\", \"飞行\"]\n    for i, ans in enumerate(answers):\n        ans = ans.strip()\n        # 检查占位符\n        for placeholder in [f\"&优势{j}&\" for j in range(1,4)]:\n            if placeholder not in ans:\n                err_infos.append(f\"答案{i+1}缺少{placeholder}\")\n        \n        # 检查禁用词\n        for word in banned_words:\n            if word in ans:\n                err_infos.append(f\"答案{i+1}包含禁用词'{word}'\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于如何提高工作效率的文章。文章应只出现五个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由七个句子（用中文句号或问号或感叹号分隔）组成。要求文章的每个句子（用中文句号或问号或感叹号分隔）恰好15个字。并且第四个句子（用中文句号或问号或感叹号分隔）以‘这是关键点’结尾。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答未以'【答案开始】'开头\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答未以'【答案结束】'结尾\")\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    content = response[len(start_marker): -len(end_marker)].strip() if response.startswith(start_marker) and response.endswith(end_marker) else \"\"\n    \n    # 检查答案分隔符\n    answers = content.split(\"******\")\n    if len(answers) != 2:\n        err_infos.append(f\"答案分隔符错误：应有两个答案，实际分割出{len(answers)}个\")\n    else:\n        for ans_idx, answer in enumerate(answers, 1):\n            answer = answer.strip()\n            if not answer:\n                err_infos.append(f\"答案{ans_idx}为空\")\n                continue\n            \n            # 检查段落分隔符\n            paragraphs = [p.strip() for p in answer.split(\"\\n\\n\") if p.strip()]\n            if len(paragraphs) != 5:\n                err_infos.append(f\"答案{ans_idx}段落数错误：应为5段，实际{len(paragraphs)}段\")\n            \n            # 检查每个句子长度和特殊要求\n            total_sentence_count = 0\n            for p_idx, para in enumerate(paragraphs, 1):\n                sentences = re.split(r'([。？！])', para)\n                sentences = [s.strip() for s in sentences if s.strip()]\n                valid_sentences = []\n                i = 0\n                while i < len(sentences) - 1:\n                    if not re.search(r'[。？！]$', sentences[i]) and i + 1 < len(sentences) and sentences[i + 1] in \"。？！\":\n                        valid_sentences.append(sentences[i] + sentences[i + 1])\n                        i += 2\n                    else:\n                        valid_sentences.append(sentences[i])\n                        i += 1\n                if i < len(sentences):\n                    valid_sentences.append(sentences[i])\n                \n                # 检查每个句子长度\n                for s_idx, sent in enumerate(valid_sentences, 1):\n                    total_sentence_count += 1\n                    if len(sent) != 15:\n                        err_infos.append(f\"答案{ans_idx}第{p_idx}段第{s_idx}句长度错误：实际{len(sent)}字\")\n                \n                # 检查第三段特殊要求\n                if p_idx == 3:\n                    if len(valid_sentences) != 7:\n                        err_infos.append(f\"答案{ans_idx}第三段句子数错误：应为7句，实际{len(valid_sentences)}句\")\n                    elif len(valid_sentences) >= 4:\n                        fourth_sent = valid_sentences[3]\n                        if not fourth_sent.endswith('这是关键点'):\n                            err_infos.append(f\"答案{ans_idx}第三段第四句未以'这是关键点'结尾：{fourth_sent}\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请撰写一篇关于城市公共交通发展的文章，要求文章由四个段落组成（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。文章中必须出现“地铁”和“便捷”这两个词语，每个词语至少出现两次，其中“公交车”出现次数不多于三次。另外，要求文章的第四个句子（用中文句号或问号或感叹号分隔）以“影响深远”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或以'【答案结束】'结尾。\"\n        }\n    content = response[6:-6].strip()\n    paragraphs = content.split('\\n\\n')\n    paragraphs = [k for k in paragraphs if k]\n    if len(paragraphs) != 4:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章段落数不正确\"\n        }\n    if len(re.findall(r'地铁', response)) < 2:\n        return {\n            \"check_code\": False,\n            \"reason\": \"地铁出现次数不足\"\n        }\n    if len(re.findall(r'便捷', response)) < 2:\n        return {\n            \"check_code\": False,\n            \"reason\": \"便捷出现次数不足\"\n        }\n    if len(re.findall(r'公交车', response)) > 3:\n        return {\n            \"check_code\": False,\n            \"reason\": \"公交车出现次数过多\"\n        }\n    third_paragraph_sentences = re.split(r'[。！？]', paragraphs[2])\n    third_paragraph_sentences = [s for s in third_paragraph_sentences if s]\n    if len(third_paragraph_sentences) != 6:\n        return {\n            \"check_code\": False,\n            \"reason\": \"第三段句子数不正确\"\n        }\n    fourth_sentence = re.split(r'[。！？]', response)[3]\n    if not fourth_sentence.endswith('影响深远'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"第四个句子未以‘影响深远’结尾\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请撰写一篇关于“节日中的传统与现代元素融合”的文章，请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。文章的每个句子（用中文句号或问号或感叹号分隔）的最后一个字使用“也”字作为结尾。请保证文章内容至少有150个汉字，但不超过300个汉字。请以“在当今社会”这几个字开头。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    err_infos = []\n    \n    # 检查首尾标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \",\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    # 检查指令重复部分（简化检查）\n    instruction_phrases = \"请撰写一篇关于“节日中的传统与现代元素融合”的文章，请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。文章的每个句子（用中文句号或问号或感叹号分隔）的最后一个字使用“也”字作为结尾。请保证文章内容至少有150个汉字，但不超过300个汉字。请以“在当今社会”这几个字开头。\"\n    if not content.startswith(instruction_phrases):\n        err_infos.append(\"指令重复不完整\")\n    article = content.replace(instruction_phrases,\"\").strip()\n    \n    # 检查段落数量和分隔符\n    paragraphs = article.split('～～')\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误:{len(paragraphs)}\")\n    \n    # 检查句子结尾和字数\n    total_chars = 0\n    for i, para in enumerate(paragraphs):\n        # 句子分割\n        sentences = re.split(r'[。？！]', para)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        for s in sentences:\n            # 检查句子结尾\n            if s and s[-1] != '也':\n                err_infos.append(f\"第{i+1}段句子结尾错误:'{s}'\")\n        \n        # 统计汉字\n        chinese_chars = re.findall(r'[一-龥]', para)\n        total_chars += len(chinese_chars)\n    \n    # 检查总字数\n    if total_chars < 150:\n        err_infos.append(f\"字数不足150字:{total_chars}\")\n    elif total_chars > 300:\n        err_infos.append(f\"字数超过300字:{total_chars}\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \",\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "近年来，随着人工智能技术的飞速发展，越来越多的企业开始探索如何将AI技术应用于商业领域，以提高效率和创造新的价值。特别是在数据分析、客户服务和市场预测等领域，人工智能展现出了巨大的潜力和优势。然而，如何有效地实施AI策略以获得最大化的收益仍然是许多公司面临的挑战。了解AI在商业中的具体应用案例、成功因素以及可能的风险，有助于更好地指导企业的决策和战略制定。\n\n请撰写一篇文章，探讨AI技术在现代企业中的实际应用及其带来的影响。内容应包括但不限于以下几点：1) 描述一个具体的AI应用案例及其对某企业的影响；2) 分析AI在商业实施中可能遇到的挑战；3) 提供如何有效整合AI技术以促进企业发展的建议。请确保文章标题用$()$标记，如$(AI技术在现代商业中的应用与挑战)$。请注意，文章字数需至少为350个汉字但不超过500个汉字，并以“AI将继续改变我们理解商业的方式。”作为结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化检查结果\n    err_infos = []\n    check_code = True\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少【答案开始】标记\")\n        check_code = False\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少【答案结束】标记\")\n        check_code = False\n    \n    # 提取答案内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[5:-5].strip()  # 去除标记和首尾空白\n    \n    # 检查标题格式\n    title_pattern = r\"\\$\\(.*?\\)\"\n    title_match = re.search(title_pattern, content)\n    if not title_match or not content.startswith(title_match.group()):\n        err_infos.append(\"标题未用$()$标记或不在开头\")\n        check_code = False\n    \n    # 统计汉字字数\n    chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', content)\n    num_chinese = len(chinese_chars)\n    if num_chinese < 350:\n        err_infos.append(f\"字数不足350字（当前{num_chinese}字）\")\n        check_code = False\n    elif num_chinese > 500:\n        err_infos.append(f\"字数超过500字（当前{num_chinese}字）\")\n        check_code = False\n    \n    # 检查结尾句子\n    if not content.endswith(\"AI将继续改变我们理解商业的方式。\"):\n        err_infos.append(\"未以指定句子结尾\")\n        check_code = False\n    \n    # 检查内容要点\n    required_points = [\n        (\"案例\", \"未描述具体AI应用案例\"),\n        (\"挑战\", \"未分析实施挑战\"),\n        (\"建议\", \"未提供整合建议\")\n    ]\n    for keyword, err_msg in required_points:\n        if keyword not in content:\n            err_infos.append(err_msg)\n            check_code = False\n    \n    return {\n        \"check_code\": check_code,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "随着全球气候变暖和环境污染的加剧，都市农业逐渐成为一种解决城市食物供应和环境问题的新兴方式。都市农业不仅能够在城市中提供新鲜的农产品，还能够通过绿化城市环境、吸收二氧化碳等方式改善城市生态系统。许多城市已经开始实施屋顶花园、社区农场和垂直农场等形式的都市农业，以提高城市的可持续性。然而，都市农业的发展也面临着诸如土地资源有限、政策法规不完善等挑战。因此，研究都市农业的发展现状及其未来潜力对于城市规划者和政策制定者来说至关重要。\n\n\n请撰写一篇关于“都市农业的现状与未来”的文章。文章必须包含“可持续发展”和“城市绿化”这两个词。文章长度应至少包含200个汉字，并且不得超过350个汉字。请以“都市农业在现代城市中的作用”这句话开头，并以“这将为城市的未来发展带来无限可能。”这句话结尾。文章应包含四个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第三个段落必须由六个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证响应格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"回答格式错误：未包含【答案开始】或【答案结束】标记\"}\n    \n    # 提取实际内容\n    content = response[7:-7].strip()\n    \n    # 验证开头结尾\n    if not content.startswith(\"都市农业在现代城市中的作用\"):\n        return {\"check_code\": False, \"reason\": \"开头不符合要求\"}\n    if not content.endswith(\"这将为城市的未来发展带来无限可能。\"):\n        return {\"check_code\": False, \"reason\": \"结尾不符合要求\"}\n    \n    # 验证段落结构\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量错误（需要4段，实际{len(paragraphs)}段）\"}\n    \n    # 验证第三段落句子数量\n    third_para = paragraphs[2]\n    sentences = re.split(r'[。？！]', third_para.strip())\n    valid_sentences = [s for s in sentences if s.strip()]\n    if len(valid_sentences) != 6:\n        return {\"check_code\": False, \"reason\": f\"第三段句子数量错误（需要6句，实际{len(valid_sentences)}句）\"}\n    \n    # 验证关键词\n    if \"可持续发展\" not in content or \"城市绿化\" not in content:\n        return {\"check_code\": False, \"reason\": \"缺少关键词：可持续发展或城市绿化\"}\n    \n    # 验证字数\n    hanzi_count = len(re.findall(r'[一-龥]', content))\n    if hanzi_count < 200:\n        return {\"check_code\": False, \"reason\": f\"字数不足（需要至少200汉字，实际{hanzi_count}字）\"}\n    if hanzi_count > 350:\n        return {\"check_code\": False, \"reason\": f\"字数超过（需要不超过350汉字，实际{hanzi_count}字）\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在现代社会中，交通拥堵和环境污染是许多大城市面临的主要问题。为了应对这些挑战，世界各地的城市正在探索各种解决方案，如推广公共交通、鼓励自行车出行、提升电动车普及率等。然而，这些措施的实施效果因地理位置、经济发展水平和市民文化习惯等因素而异。\n\n假设你是一名城市规划师，负责设计一个未来的城市交通系统。请详细描述你将采取的具体措施，以解决交通拥堵和环境污染问题。要求你在描述中避免使用“汽车”、“高速”、“排放”这几个词汇。请解释每一个措施的具体实施方式和预期效果，并考虑到不同社会阶层的需求和利益。确保你的描述全面而具体，以便其他人能够清晰理解你的设计思路和方案。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化检查结果\n    err_infos = []\n    \n    # 检查起始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker):\n        err_infos.append(\"missing start tag\")\n    if not response.endswith(end_marker):\n        err_infos.append(\"missing end tag\")\n    \n    # 提取答案内容（如果标记存在）\n    content = \"\"\n    if response.startswith(start_marker) and response.endswith(end_marker):\n        content = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 检查禁止词汇\n    forbidden_words = [\"汽车\", \"高速\", \"排放\"]\n    for word in forbidden_words:\n        if re.search(rf'\b{re.escape(word)}\b', content):\n            err_infos.append(f\"contains forbidden word: '{word}'\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于城市公共交通系统改进建议的文章。文章以“随着城市化进程的加速”这个短语开头，文章应只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，“交通”这个词务必至少出现两次。在第二个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查开始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少【答案开始】标记\")\n    if \"【答案结束】\" not in response:\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    start_idx = response.find(start_tag) + len(start_tag)\n    end_idx = response.find(end_tag)\n    \n    if start_idx < 0 or end_idx < 0 or end_idx <= start_idx:\n        err_infos.append(\"标记位置错误\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    content = response[start_idx:end_idx].strip()\n    \n    # 检查开头短语\n    if not content.startswith(\"随着城市化进程的加速\"):\n        err_infos.append(\"未以指定短语开头\")\n    \n    # 检查段落结构\n    paragraphs = re.split(r'\\n{2,}', content)\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误: 需要4段, 实际{len(paragraphs)}段\")\n    \n    # 检查第二段落句子数量\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1]\n        sentences = re.split(r'[。？！]', second_para)\n        valid_sentences = [s.strip() for s in sentences if s.strip()]\n        if len(valid_sentences) != 6:\n            err_infos.append(f\"第二段落应为6个句子, 实际{len(valid_sentences)}个\")\n    \n    # 检查第三段落\"交通\"词频\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2]\n        traffic_count = third_para.count(\"交通\")\n        if traffic_count < 2:\n            err_infos.append(f\"第三段落'交通'出现次数不足: 需要至少2次, 实际{traffic_count}次\")\n    \n    # 检查多余内容\n    if len(paragraphs) > 4 or response.count(\"【答案开始】\") > 1 or response.count(\"【答案结束】\") > 1:\n        err_infos.append(\"包含多余内容或重复标记\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于“室内植物如何改善工作环境”的文章，并以“在当今快节奏的工作环境中”这几个字开头。请确保文章只出现2个段落（不要出现标题），每个段落之间用'～～'符号分隔。要求文章以“因此，选择适合的植物将是一个明智的决定。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答没有以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答没有以【答案结束】结尾\")\n    \n    # 提取实际内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 检查开头和结尾\n    if not content.startswith(\"在当今快节奏的工作环境中\"):\n        errors.append(\"内容没有以指定句子开头\")\n    if not content.endswith(\"因此，选择适合的植物将是一个明智的决定。\"):\n        errors.append(\"内容没有以指定句子结尾\")\n    \n    # 检查段落分隔符\n    parts = content.split('～～')\n    if len(parts) != 2:\n        errors.append(f\"段落数量错误，需要2段但找到{len(parts)}段\")\n    else:\n        if not all(parts):  # 检查段落是否为空\n            errors.append(\"存在空段落\")\n    \n    # 检查额外内容\n    if re.search(r'【答案[开始|结束]】', content):\n        errors.append(\"内容中包含了答案标记\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于城市交通拥堵的文章，文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    required_instruct = \"请撰写一篇关于城市交通拥堵的文章，文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。\"\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或以'【答案结束】'结尾。\"\n        }\n    content = response[6:-6].strip()\n    if not content.startswith(required_instruct):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有一字不差地重复指令要求。\"\n        }\n    content = content[len(required_instruct):].strip()\n    paragraphs = content.split(\"\\n\\n\")\n    paragraphs = [k for k in paragraphs if k]\n    if len(paragraphs) != 4:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章段落数不是四个。\"\n        }\n\n    # 正则表达式模式：匹配中文句号、问号、感叹号中的任意一个\n    pattern = r'[。？！]'\n\n    # 使用正则表达式分割文本\n    raw_sentences = re.split(pattern, paragraphs[2])\n\n    # 过滤分割结果中的空字符串（处理文本开头/结尾有标点或连续标点的情况）\n    third_paragraph_sentences = [sentence.strip() for sentence in raw_sentences if sentence.strip()]\n    if len(third_paragraph_sentences) != 6:\n        return {\n            \"check_code\": False,\n            \"reason\": \"第三段的句子数不是六个。\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "撰写一篇关于“家庭智能设备对日常生活的改变”的文章，文章需包含“科技进步”这个词，并详细解释并列出其中三种主要影响，使用“【影响1】”、“【影响2】”和“【影响3】”作为主要影响的占位符。文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。确保第二个段落不含任何标点符号。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 定义原始指令文本\n    original_instruction = \"撰写一篇关于“家庭智能设备对日常生活的改变”的文章，文章需包含“科技进步”这个词，并详细解释并列出其中三种主要影响，使用“【影响1】”、“【影响2】”和“【影响3】”作为主要影响的占位符。文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。确保第二个段落不含任何标点符号。\"\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答未以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答未以【答案结束】结尾\")\n    \n    # 提取核心内容（去除标记）\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 检查是否一字不差重复指令要求\n    if not content.startswith(original_instruction):\n        err_infos.append(\"回答开头未一字不差重复指令要求\")\n    \n    # 提取文章部分（去除重复的指令文本）\n    article = content.replace(original_instruction, \"\", 1).strip()\n    \n    # 检查段落结构\n    paragraphs = article.split(\"\\n\\n\")\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量不符合要求（应为4段，实际{len(paragraphs)}段）\")\n    \n    # 检查第二段落标点符号（仅允许空格和文字）\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1].strip()\n        if re.search(r'[，。！？；：“”‘’\"\\'.,!?;:]', second_para):\n            err_infos.append(\"第二段落包含标点符号\")\n    \n    # 检查关键词\n    if \"科技进步\" not in article:\n        err_infos.append(\"文章未包含关键词'科技进步'\")\n    \n    # 检查影响占位符\n    required_tags = [\"【影响1】\", \"【影响2】\", \"【影响3】\"]\n    for tag in required_tags:\n        if tag not in article:\n            err_infos.append(f\"未找到必要占位符：{tag}\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }\n"}
{"prompt": "请写一篇关于在现代农业中如何利用废弃物资源高效转化为有机肥的文章。要求文章的每个句子（用中文句号或问号或感叹号分隔）至少18个汉字，至多25个汉字。要求文章以“这将为农业生产带来新的可能性。”结尾。要求文章中不允许出现“环境保护”、“可持续发展”两个词语。请在回复中详细解释并列出其中四种主要方法，使用“&方法1&”、“&方法2&”、“&方法3&”和“&方法4&”作为主要原因的占位符。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 定义原始指令字符串\n    instruction = \"请写一篇关于在现代农业中如何利用废弃物资源高效转化为有机肥的文章。要求文章的每个句子（用中文句号或问号或感叹号分隔）至少18个汉字，至多25个汉字。要求文章以“这将为农业生产带来新的可能性。”结尾。要求文章中不允许出现“环境保护”、“可持续发展”两个词语。请在回复中详细解释并列出其中四种主要方法，使用“&方法1&”、“&方法2&”、“&方法3&”和“&方法4&”作为主要原因的占位符。\"\n    errors = []\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    # 检查首尾标记\n    if not response.startswith(start_marker):\n        errors.append(\"缺少【答案开始】标记\")\n    if not response.endswith(end_marker):\n        errors.append(\"缺少【答案结束】标记\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 提取内容部分\n    content = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 检查指令重复\n    if not content.startswith(instruction):\n        errors.append(\"指令重复不完整或不一致\")\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 提取文章部分\n    article = content[len(instruction):].strip()\n    \n    # 检查结尾句子\n    if not article.endswith(\"这将为农业生产带来新的可能性。\"):\n        errors.append(\"未按要求结尾\")\n    \n    # 检查禁用词\n    forbidden_terms = [\"环境保护\", \"可持续发展\"]\n    for term in forbidden_terms:\n        if term in article:\n            errors.append(f\"包含禁用词: {term}\")\n    \n    # 分句检查长度\n    sentences = re.split(r'[。？！]', article)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    for idx, sent in enumerate(sentences):\n        chinese_chars = re.findall(r'[一-龥]', sent)\n        count = len(chinese_chars)\n        if count < 18 or count > 25:\n            errors.append(f\"第{idx+1}句长度不符: {count}个汉字\")\n    \n    # 检查方法占位符\n    placeholders = [\"&方法1&\", \"&方法2&\", \"&方法3&\", \"&方法4&\"]\n    placeholder_positions = []\n    \n    for ph in placeholders:\n        pos = article.find(ph)\n        if pos == -1:\n            errors.append(f\"缺少占位符: {ph}\")\n        else:\n            placeholder_positions.append(pos)\n    \n    # 检查占位符顺序\n    if placeholder_positions and sorted(placeholder_positions) != placeholder_positions:\n        errors.append(\"占位符顺序错误\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \";\".join(errors) if errors else \"\"\n    }\n"}
{"prompt": "请撰写一篇关于“城市夜生活的多样性”的文章。文章应只出现6个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“音乐”这个词必须出现至少两次。在第四个段落中，不能包含任何标点符号。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import string\n    \n    # 定义验证错误信息列表\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答开头缺少'【答案开始】'标记\")\n    if \"【答案结束】\" not in response:\n        err_infos.append(\"回答结尾缺少'【答案结束】'标记\")\n    \n    # 提取答案内容\n    if err_infos:  # 如果已有错误，直接返回\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    try:\n        content = response.split(\"【答案开始】\")[1].split(\"【答案结束】\")[0].strip()\n    except IndexError:\n        return {\"check_code\": False, \"reason\": \"无法提取答案内容\"}\n\n    # 检查指令重复部分\n    expected_repetition = (\n        \"请撰写一篇关于“城市夜生活的多样性”的文章。文章应只出现6个段落（不要出现标题），\"\n        \"每个段落用两个换行符“\\n\\n”分隔开来。在第二个段落中，“音乐”这个词必须出现至少两次。\"\n        \"在第四个段落中，不能包含任何标点符号。首先一字不差的重复上面的要求，然后直接给出答案。\"\n        \"在重复要求之前，请不要提供额外信息。\\n\\n不允许生成多余的内容和解析。上面的是指令，\"\n        \"在回答的开头用\\\"【答案开始】\\\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，\"\n        \"如果要求中需要你提供多个回答，也都放在此处，然后用\\\"【答案结束】\\\"标记你的回答的结束。\"\n    )\n    \n    if not content.startswith(expected_repetition):\n        err_infos.append(\"指令重复部分不完整或不准确\")\n    \n    # 提取文章部分（指令重复后的内容）\n    article_part = content[len(expected_repetition):].strip()\n    \n    # 检查段落数量\n    paragraphs = [p.strip() for p in article_part.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 6:\n        err_infos.append(f\"段落数量应为6，实际为{len(paragraphs)}\")\n    \n    # 检查第二段中\"音乐\"出现次数\n    if len(paragraphs) >= 2:\n        music_count = paragraphs[1].count(\"音乐\")\n        if music_count < 2:\n            err_infos.append(f\"第二段中'音乐'出现次数不足2次（实际：{music_count}次）\")\n    \n    # 检查第四段标点符号\n    if len(paragraphs) >= 4:\n        fourth_para = paragraphs[3]\n        # 中英文标点符号集合\n        chinese_punct = \"，。！？；：“”‘’（）【】《》\"\n        all_punct = set(string.punctuation + chinese_punct)\n        \n        punct_in_para = [char for char in fourth_para if char in all_punct]\n        if punct_in_para:\n            err_infos.append(f\"第四段包含标点符号：{set(punct_in_para)}\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请分别描述自驾车在城市交通和乡村交通中的主要挑战。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    if not response.startswith(start_marker):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(end_marker):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取中间内容\n    content = \"\"\n    if response.startswith(start_marker) and response.endswith(end_marker):\n        content = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 检查分隔符\n    separator = \"@@@@@@\"\n    parts = [p.strip() for p in content.split(separator)] if content else []\n    \n    if separator not in content:\n        err_infos.append(\"缺少六个@符号分隔符\")\n    elif len(parts) != 2:\n        err_infos.append(f\"分隔后得到{len(parts)}部分内容，但需要2部分\")\n    else:\n        # 检查每个部分是否包含关键词\n        if not re.search(r'城市|城镇|都市', parts[0]):\n            err_infos.append(\"第一部分未描述城市交通挑战\")\n        if not re.search(r'乡村|农村|乡间', parts[1]):\n            err_infos.append(\"第二部分未描述乡村交通挑战\")\n    \n    # 检查是否存在多余内容\n    if content.count(start_marker) > 0 or content.count(end_marker) > 0:\n        err_infos.append(\"答案中间包含多余标记\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请描述一个繁忙的城市街道场景，要求在描述中至少出现“喧闹”五次，必须正好出现“行人”三次，并且至多出现“车辆”两次。文章中需包含15个句子（用中文句号或问号或感叹号分隔）。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    response = response.strip(\"【答案开始】\").strip(\"【答案结束】\").strip()\n    sentences = re.split('[。！？]', response)\n    sentences = [k for k in sentences if k]\n    if len(sentences) != 15:\n        return {\n            \"check_code\": False,\n            \"reason\": \"句子数量不等于15\"\n        }\n    if response.count('喧闹') < 5:\n        return {\n            \"check_code\": False,\n            \"reason\": \"'喧闹'出现次数少于5次\"\n        }\n    if response.count('行人') != 3:\n        return {\n            \"check_code\": False,\n            \"reason\": \"'行人'出现次数不等于3次\"\n        }\n    if response.count('车辆') > 2:\n        return {\n            \"check_code\": False,\n            \"reason\": \"'车辆'出现次数多于2次\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请描述一种你认为未来可能会流行的家用智能设备，并详细解释它可能受欢迎的三种主要原因，使用“【原因1】”、“【原因2】”和“【原因3】”作为主要原因的占位符。文章应刚好由15个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    expected_start = \"【答案开始】\"\n    expected_end = \"【答案结束】\"\n    if not response.startswith(expected_start):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头\"\n        }\n    if not response.endswith(expected_end):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案结束】'结尾\"\n        }\n    content = response[len(expected_start):-len(expected_end)].strip()\n    # 正则表达式模式：匹配中文句号、问号、感叹号中的任意一个\n    pattern = r'[。？！]'\n\n    # 使用正则表达式分割文本\n    raw_sentences = re.split(pattern, content)\n\n    # 过滤分割结果中的空字符串（处理文本开头/结尾有标点或连续标点的情况）\n    sentences = [sentence.strip() for sentence in raw_sentences if sentence.strip()]\n    if len(sentences) != 15:\n        return {\n            \"check_code\": False,\n            \"reason\": \"句子数量不等于15\"\n        }\n    if \"【原因1】\" not in content or \"【原因2】\" not in content or \"【原因3】\" not in content:\n        return {\n            \"check_code\": False,\n            \"reason\": \"缺少原因占位符\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请撰写一篇关于“室内植物对心理健康的影响”的文章。请在文章中详细解释并列出其中三种主要影响，使用“&影响1&”、“&影响2&”和“&影响3&”作为主要影响的占位符。请确保文章只出现5个段落（不要出现标题），每个段落之间用'～～'符号分隔。请确保文章恰好由9个句子（用中文句号或问号或感叹号分隔）组成。其中第6个句子至少包含25个汉字。同时，避免使用“压力”、“焦虑”、“治疗”这几个词。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    errors = []\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取实际回答内容\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[6:-6].strip()  # 去除标记\n    \n        # 检查段落数量和分隔符\n        paragraphs = [p.strip() for p in content.split('～～')]\n        if len(paragraphs) != 5:\n            errors.append(f\"段落数量错误：实际{len(paragraphs)}段，要求5段\")\n        \n        # 检查句子数量\n        sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n        if len(sentences) != 9:\n            errors.append(f\"句子数量错误：实际{len(sentences)}句，要求9句\")\n        \n        # 检查第6句长度\n        if len(sentences) >= 6:\n            chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', sentences[5])\n            if len(chinese_chars) < 25:\n                errors.append(f\"第6句汉字数量不足：实际{len(chinese_chars)}字，要求至少25字\")\n        elif len(sentences) > 0:\n            errors.append(\"句子数量不足，无法检查第6句长度\")\n        \n        # 检查占位符\n        placeholders = [\"&影响1&\", \"&影响2&\", \"&影响3&\"]\n        for ph in placeholders:\n            if ph not in content:\n                errors.append(f\"缺少占位符：{ph}\")\n        \n        # 检查禁用词\n        forbidden_words = [\"压力\", \"焦虑\", \"治疗\"]\n        for word in forbidden_words:\n            if word in content:\n                errors.append(f\"包含禁用词：{word}\")\n    else:\n        errors.append(\"无法提取内容，请检查标记\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"；\".join(errors) if errors else \"\"\n    }"}
{"prompt": "在当今全球化的背景下，各国之间的文化交流变得越来越频繁。然而，文化交流过程中不可避免地会遇到文化差异带来的挑战。文化差异不仅体现在语言上，还包括价值观、习俗、社会规范等方面。了解和尊重文化差异是成功进行跨文化交流的关键。譬如，在商业谈判中，理解对方文化中的面子观念可能影响谈判的进展和结果。在教育领域，教师需要考虑学生的文化背景来调整教学方法，以达到更好的教育效果。此外，文化差异还可能影响旅游体验，游客需要了解目的地国家的文化习俗，以避免不必要的误会。\n\n请撰写一篇讨论跨文化交流中如何克服文化差异的文章。文章需包含以下特定要求：\n\n1. 必须在文中使用“文化冲突”、“沟通桥梁”和“文化敏感性”这三个词语。\n2. 文章中需要详细列出三种克服文化差异的方法，使用“&方法1&”、“&方法2&”和“&方法3&”作为主要方法的占位符。\n3. 文中需包含12个句子，每个句子之间用2589这个数字作为分隔符号。\n4. 文章应由5个段落（不要出现标题）组成，每个段落之间用'～～'符号分隔。其中第3段必须至少包含250个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 初始化检查结果\n    err_infos = []\n    result = {\"check_code\": True, \"reason\": err_infos}\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        err_infos.append(\"缺少答案标记\")\n        result[\"check_code\"] = False\n        return result\n    \n    # 提取实际内容\n    start_idx = response.find(\"【答案开始】\") + 6\n    end_idx = response.find(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n    \n    # 1. 检查关键词\n    required_words = [\"文化冲突\", \"沟通桥梁\", \"文化敏感性\"]\n    for word in required_words:\n        if word not in content:\n            err_infos.append(f\"缺少关键词'{word}'\")\n    \n    # 2. 检查方法占位符\n    method_placeholders = [\"&方法1&\", \"&方法2&\", \"&方法3&\"]\n    for placeholder in method_placeholders:\n        if placeholder not in content:\n            err_infos.append(f\"缺少方法占位符'{placeholder}'\")\n    \n    # 3. 检查段落结构\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 5:\n        err_infos.append(f\"段落数量错误({len(paragraphs)}个，应为5个)\")\n    \n    # 4. 检查第三段长度\n    if len(paragraphs) >= 3:\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', paragraphs[2])\n        if len(chinese_chars) < 250:\n            err_infos.append(f\"第三段仅{len(chinese_chars)}汉字，不足250字\")\n    else:\n        err_infos.append(\"缺少第三段\")\n    \n    # 5. 检查句子数量和分隔符\n    all_sentences = []\n    for para in paragraphs:\n        sentences = para.split('2589')\n        all_sentences.extend([s.strip() for s in sentences if s.strip()])\n    \n    if len(all_sentences) != 12:\n        err_infos.append(f\"句子数量错误({len(all_sentences)}句，应为12句)\")\n    \n    # 更新最终结果\n    if err_infos:\n        result[\"check_code\"] = False\n    \n    return result"}
{"prompt": "请完全用西班牙语描述你认为人们在未来的智能家居中最有可能使用的三种科技设备，并解释它们如何改善日常生活，不要出现其他语言。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或以'【答案结束】'结尾。\"\n        }\n    content = response[7:-7].strip()\n    if any(char in content for char in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答中包含非西班牙语字符。\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请描述一种你认为对未来农业有重要影响的新技术，并详细解释其原理和应用场景。请将回答内容完全按照以下 JSON 格式回复，不要在 JSON 格式之外添加任何其他内容：\n\n{\n    \"技术名称\": \"\",\n    \"原理\": \"\",\n    \"应用场景\": \"\"\n}\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开始或以'【答案结束】'结束\"\n        }\n    try:\n        content = response[6:-6].strip()\n        data = json.loads(content)\n        if not all(key in data for key in [\"技术名称\", \"原理\", \"应用场景\"]):\n            return {\n                \"check_code\": False,\n                \"reason\": \"JSON 中缺少必要的键\"\n            }\n        if any(not data[key] for key in [\"技术名称\", \"原理\", \"应用场景\"]):\n            return {\n                \"check_code\": False,\n                \"reason\": \"JSON 中的某些键没有值\"\n            }\n    except json.JSONDecodeError:\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答的 JSON 格式不正确\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请撰写一篇关于现代城市交通拥堵对居民日常生活影响的简短文章。文章应包含四个段落，每个段落之间用'～～'符号分隔。在第二个段落中，“压力”这个词至少出现两次，且文章需以“这就是我们必须努力改善交通状况的原因。”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        errors.append(\"未找到答案开始或结束标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取内容\n    start_index = response.index(\"【答案开始】\") + 6\n    end_index = response.index(\"【答案结束】\")\n    content = response[start_index:end_index].strip()\n    \n    # 检查结尾\n    if not content.endswith(\"这就是我们必须努力改善交通状况的原因。\"):\n        errors.append(\"文章未以指定句子结尾\")\n    \n    # 检查段落分隔\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 4:\n        errors.append(f\"段落数量错误（应为4段，实际{len(paragraphs)}段）\")\n    else:\n        # 检查第二段的\"压力\"出现次数\n        second_para = paragraphs[1]\n        pressure_count = second_para.count('压力')\n        if pressure_count < 2:\n            errors.append(f\"第二段'压力'出现次数不足（应为至少2次，实际{pressure_count}次）\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请描述一下你对人工智能在医疗领域的应用有哪些好处，并以‘在我看来’这四个字开头。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    stripped_resp = response.strip()\n    \n    # 检查答案标记\n    if not stripped_resp.startswith(\"【答案开始】\"):\n        errors.append(\"缺少起始标记【答案开始】\")\n    if not stripped_resp.endswith(\"【答案结束】\"):\n        errors.append(\"缺少结束标记【答案结束】\")\n    \n    # 如果标记错误直接返回\n    if errors:\n        return {\n            \"check_code\": False,\n            \"reason\": \"; \".join(errors)\n        }\n    \n    # 提取答案内容\n    content = stripped_resp[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查开头格式\n    if not content.startswith(\"在我看来\"):\n        errors.append(\"内容未以'在我看来'开头\")\n    \n    # 检查分隔符\n    separator_count = len(re.findall(r\"\\*{6}\", content))\n    if separator_count != 1:\n        errors.append(f\"需要1个分隔符******，实际找到{separator_count}个\")\n    \n    # 检查答案完整性\n    parts = [p.strip() for p in re.split(r\"\\*{6}\", content)]\n    if len(parts) != 2:\n        errors.append(f\"分隔后应得到2个部分，实际得到{len(parts)}个\")\n    else:\n        if not parts[0] or parts[0] == \"在我看来\":\n            errors.append(\"第一部分内容为空\")\n        if not parts[1]:\n            errors.append(\"第二部分内容为空\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请简要描述一下心理学中的“暗示效应”是什么，并且回答内容不少于50个字但不超过70个字。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[5:-5]  # 去除首尾标记\n    \n    # 检查答案分隔符\n    parts = content.split(\"******\")\n    if len(parts) < 2:\n        err_infos.append(\"答案分隔符数量不足，需要6个星号分隔符\")\n    elif len(parts) > 2:\n        err_infos.append(\"答案分隔符过多，仅允许两个答案\")\n    \n    # 检查每个答案的字数\n    if len(parts) >= 2:\n        ans1 = re.sub(r'\\s', '', parts[0])\n        ans2 = re.sub(r'\\s', '', parts[1])\n        \n        if not (50 <= len(ans1) <= 70):\n            err_infos.append(f\"答案1字数不符要求（实际：{len(ans1)}字）\")\n        if not (50 <= len(ans2) <= 70):\n            err_infos.append(f\"答案2字数不符要求（实际：{len(ans2)}字）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于城市夜晚生活的文章。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第3段恰好由6个句子（用中文句号或问号或感叹号分隔）组成。要求文章以“在城市的夜晚”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        errors.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    start_idx = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.find(\"【答案结束】\")\n    if start_idx >= end_idx:\n        errors.append(\"答案标记顺序错误\")\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    content = response[start_idx:end_idx].strip()\n    \n    # 检查开头\n    if not content.startswith(\"在城市的夜晚\"):\n        errors.append(\"未以指定开头\")\n    \n    # 检查段落数量和分隔符\n    paragraphs = [p.strip() for p in content.split('～～')]\n    if len(paragraphs) != 4:\n        errors.append(f\"段落数量错误: {len(paragraphs)}段\")\n    \n    # 检查第3段句子数量\n    if len(paragraphs) >= 3 and not errors:\n        third_para = paragraphs[2]\n        sentences = re.split(r'[。？！]', third_para)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        if len(sentences) != 6:\n            errors.append(f\"第3段包含{len(sentences)}个句子\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \";\".join(errors) if errors else \"\"\n    }"}
{"prompt": "将下列文本中的标点符号全部删除，再将所有的“长江”添加上书名号“《》”，直接返回修改后的文本，不要出现其他多余的内容。\n\n长江是中国乃至亚洲最长的河流，全长约6300公里，发源于青藏高原的唐古拉山脉，自西向东贯穿中国腹地，最终注入东海。长江不仅是中国重要的自然景观，更是中华文明的发源地之一，孕育了悠久的历史和灿烂的文化。长江流域气候多样，涵盖了从高原寒冷气候到亚热带湿润气候的广阔区域，这使得其沿岸地区拥有丰富的自然资源和生物多样性。长江流域也是中国最为重要的农业区之一，尤其是下游的长江三角洲地区，素有“鱼米之乡”之称。长江对中国的经济有着举足轻重的影响。长江航运能力极强，是世界上最繁忙的内河航道之一，沿江的港口城市如上海、武汉、重庆等，依托长江的水运优势，成为中国经济发展的重要引擎。长江的水能资源也极为丰富，三峡大坝作为世界上规模最大的水电站，既满足了中国大部分地区的电力需求，又在防洪、航运等方面发挥了重要作用。然而，长江的开发利用也带来了环境问题，水污染、生态破坏和生物多样性减少成为日益严峻的挑战。近年来，中国政府加大了对长江的生态保护力度，实施了“长江经济带绿色发展”战略，力求在发展经济的同时保护好这一宝贵的自然资源。长江不仅是中国地理和经济的重要组成部分，也在中国文化中占据着特殊的位置。无数的诗词、绘画和文学作品中都描绘了长江的壮丽景象和深厚的文化内涵。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义原始文本\n    original_text = \"长江是中国乃至亚洲最长的河流，全长约6300公里，发源于青藏高原的唐古拉山脉，自西向东贯穿中国腹地，最终注入东海。长江不仅是中国重要的自然景观，更是中华文明的发源地之一，孕育了悠久的历史和灿烂的文化。长江流域气候多样，涵盖了从高原寒冷气候到亚热带湿润气候的广阔区域，这使得其沿岸地区拥有丰富的自然资源和生物多样性。长江流域也是中国最为重要的农业区之一，尤其是下游的长江三角洲地区，素有“鱼米之乡”之称。长江对中国的经济有着举足轻重的影响。长江航运能力极强，是世界上最繁忙的内河航道之一，沿江的港口城市如上海、武汉、重庆等，依托长江的水运优势，成为中国经济发展的重要引擎。长江的水能资源也极为丰富，三峡大坝作为世界上规模最大的水电站，既满足了中国大部分地区的电力需求，又在防洪、航运等方面发挥了重要作用。然而，长江的开发利用也带来了环境问题，水污染、生态破坏和生物多样性减少成为日益严峻的挑战。近年来，中国政府加大了对长江的生态保护力度，实施了“长江经济带绿色发展”战略，力求在发展经济的同时保护好这一宝贵的自然资源。长江不仅是中国地理和经济的重要组成部分，也在中国文化中占据着特殊的位置。无数的诗词、绘画和文学作品中都描绘了长江的壮丽景象和深厚的文化内涵。\"\n    \n    # 检查响应格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"响应未包含正确的标记\"}\n    \n    # 提取响应内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 验证是否包含多余内容\n    if \"【\" in content or \"】\" in content:\n        return {\"check_code\": False, \"reason\": \"响应包含多余标记\"}\n    \n    # 生成预期结果\n    # 删除所有标点符号\n    cleaned_text = re.sub(r'[^\\w\\s]|_', '', original_text)\n    # 替换所有长江为《长江》\n    expected_text = cleaned_text.replace('长江', '《长江》')\n    \n    # 检查内容一致性\n    if content != expected_text:\n        # 检查标点删除情况\n        has_punctuation = re.search(r'[^\\w\\s《》]', content)\n        # 检查长江替换情况\n        has_plain_changjiang = '长江' in content\n        has_wrong_format = re.search(r'[《](?!长江)[^》]*长江[^》]*[》]', content) or re.search(r'[《]长江[^》]*[》]', content)\n        \n        errors = []\n        if has_punctuation:\n            errors.append(\"存在未删除的标点符号\")\n        if has_plain_changjiang:\n            errors.append(\"存在未添加书名号的'长江'\")\n        if has_wrong_format:\n            errors.append(\"书名号格式错误\")\n        \n        return {\"check_code\": False, \"reason\": \";\".join(errors) if errors else \"内容与预期不符\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "将下列文本中的标点符号全部删除，并将前80个字作为第一部分，该部分中每四个字作为一组，组与组之间用“||”分隔。最后42个字作为第三部分，该部分中每三个字作为一组，组与组之间用“--”分隔。其余的作为第二部分，该部分中每十个字作为一组，组与组之间用“//”分隔。每个部分之间用六个星号“******”分隔。直接返回修改后的文本，不要出现其他多余的内容。\n\n宣纸不仅是书画创作的理想载体，也是中国文化的重要组成部分。它承载着中华民族书画艺术的精髓，见证了历代书画名家的杰作。作为中国传统文化的象征之一，宣纸制作技艺已被联合国教科文组织列为人类非物质文化遗产。宣纸以其独特的工艺和卓越的品质在中国书画艺术中占据着不可替代的地位，体现了中国古代工匠的智慧与技艺。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from string import punctuation\n    \n    # 检查响应格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案未按要求用标记包裹\"}\n    \n    # 提取答案内容\n    answer = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 验证分隔符结构\n    parts = answer.split(\"******\")\n    if len(parts) != 3:\n        return {\"check_code\": False, \"reason\": f\"分隔符错误，应为三部分但得到{len(parts)}部分\"}\n    \n    part1, part2, part3 = parts\n    \n    # 第一部分验证\n    seg1 = part1.split(\"||\")\n    clean1 = ''.join(seg1)\n    if len(clean1) != 80:\n        return {\"check_code\": False, \"reason\": f\"第一部分应为80字，实际{len(clean1)}字\"}\n    if any(len(seg) != 4 for seg in seg1):\n        return {\"check_code\": False, \"reason\": \"第一部分分组应为4字一组\"}\n    \n    # 第三部分验证\n    seg3 = part3.split(\"--\")\n    clean3 = ''.join(seg3)\n    if len(clean3) != 42:\n        return {\"check_code\": False, \"reason\": f\"第三部分应为42字，实际{len(clean3)}字\"}\n    if any(len(seg) != 3 for seg in seg3):\n        return {\"check_code\": False, \"reason\": \"第三部分分组应为3字一组\"}\n    \n    # 第二部分验证\n    seg2 = part2.split(\"//\")\n    clean2 = ''.join(seg2)\n    if any(len(seg) != 10 for seg in seg2[:-1]):\n        return {\"check_code\": False, \"reason\": \"第二部分前组应为10字一组\"}\n    \n    # 总文本验证\n    full_text = clean1 + clean2 + clean3\n    if re.search(f\"[{re.escape(punctuation)}，。！？；：‘’“”【】（）《》]\", full_text):\n        return {\"check_code\": False, \"reason\": \"文本包含标点符号\"}\n    \n    # 长度一致性验证\n    total_len = len(clean1) + len(clean2) + len(clean3)\n    if len(full_text) != total_len:\n        return {\"check_code\": False, \"reason\": \"分段长度不一致\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于“传统工艺与现代设计融合”的文章。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。请确保文章恰好由10个句子（用中文句号或问号或感叹号分隔）组成。其中第5个句子的第3个汉字必须是“艺”字。要求文章至少200个汉字，至多300个汉字。要求文章中“匠心”一词至少出现1次，“创新”一词至少出现1次，“传承”一词至多出现3次。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 提取答案部分\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    response = response.strip()\n    \n    if not response.startswith(start_marker) or not response.endswith(end_marker):\n        return {\"check_code\": False, \"reason\": \"答案标记缺失或错误\"}\n    \n    answer_content = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 验证指令重复部分（简化验证）\n    instruction_keywords = \"请撰写一篇关于“传统工艺与现代设计融合”的文章。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。请确保文章恰好由10个句子（用中文句号或问号或感叹号分隔）组成。其中第5个句子的第3个汉字必须是“艺”字。要求文章至少200个汉字，至多300个汉字。要求文章中“匠心”一词至少出现1次，“创新”一词至少出现1次，“传承”一词至多出现3次。\"\n    if not answer_content.startswith(instruction_keywords):\n        return {\"check_code\": False, \"reason\": \"未正确重复指令要求\"}\n    article = answer_content.replace(instruction_keywords, \"\").strip()\n    \n    # 验证段落结构\n    paragraphs = article.split('～～')\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量错误（实际{len(paragraphs)}段）\"}\n    \n    # 验证句子数量\n    sentences = re.split(r'[。？！]', article)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 10:\n        return {\"check_code\": False, \"reason\": f\"句子数量错误（实际{len(sentences)}句）\"}\n    \n    # 验证第5句第3字\n    if len(sentences[4]) < 3 or sentences[4][2] != '艺':\n        return {\"check_code\": False, \"reason\": f\"第5句第3字错误（实际：'{sentences[4][:3]}'）\"}\n    \n    # 验证汉字数量\n    chinese_chars = re.findall(r'[一-龥]', article)\n    char_count = len(chinese_chars)\n    if char_count < 200 or char_count > 300:\n        return {\"check_code\": False, \"reason\": f\"汉字数量超限（实际{char_count}字）\"}\n    \n    # 验证关键词频率\n    keywords = {\n        \"匠心\": (\"min\", 1, article.count(\"匠心\")),\n        \"创新\": (\"min\", 1, article.count(\"创新\")),\n        \"传承\": (\"max\", 3, article.count(\"传承\"))\n    }\n    \n    errors = []\n    for word, (rule, limit, count) in keywords.items():\n        if rule == \"min\" and count < limit:\n            errors.append(f\"'{word}'出现{count}次<{limit}\")\n        elif rule == \"max\" and count > limit:\n            errors.append(f\"'{word}'出现{count}次>{limit}\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \" | \".join(errors)}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在现代社会中，心理健康问题变得越来越普遍。很多人由于工作压力、家庭矛盾或个人原因而遭受心理困扰，影响了他们的生活质量。心理健康问题不仅会影响个体的情绪，还会对身体健康产生负面影响。例如，长期的压力和焦虑可能导致失眠、消化不良等身体症状。此外，心理问题还可能影响人与人之间的关系，使人感到孤独和无助。为了提升公众对心理健康的重视，许多组织和机构开始推广心理健康知识，并提供心理咨询服务。\n\n请你写一篇关于“如何在日常生活中维护心理健康”的文章。在文章中，请详细解释并列出其中三种主要原因，使用“【原因1】”、“【原因2】”和“【原因3】”作为主要原因的占位符。请确保每个原因都有具体的解释和实际的建议，以帮助读者更好地理解和应用这些方法来维护心理健康。文章内容应包括实际案例或研究数据，以增加可信度和实用性。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查开头和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n    if not content:\n        err_infos.append(\"未找到有效的答案内容段\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    content = content.group(1).strip()\n    \n    # 检查三个原因标记\n    reason_markers = [\"【原因1】\", \"【原因2】\", \"【原因3】\"]\n    for marker in reason_markers:\n        if marker not in content:\n            err_infos.append(f\"缺少必要标记: {marker}\")\n    \n    # 检查每个原因的解释内容\n    reason_pattern = r\"【原因\\d】(.+?)(?=(?:【原因\\d】|$))\"\n    reasons = re.findall(reason_pattern, content, re.DOTALL)\n    \n    if len(reasons) < 3:\n        err_infos.append(\"原因数量不足3个\")\n    else:\n        for i, reason in enumerate(reasons[:3], 1):\n            if len(reason.strip()) < 100:  # 检查解释长度\n                err_infos.append(f\"原因{i}的解释过于简短\")\n            if not re.search(r\"(案例|数据|研究|统计|调查)\", reason):\n                err_infos.append(f\"原因{i}缺少案例或研究数据支持\")\n    \n    # 检查整体内容质量\n    if len(content) < 500:\n        err_infos.append(\"整体内容不完整\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“智能家居技术在日常生活中的应用”的文章，文章内容不少于500字但不超过600字，并且请确保文章只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或以'【答案结束】'结尾\"\n        }\n    content = response[6:-6].strip()\n    paragraphs = content.split('\\n\\n')\n    paragraphs = [k for k in paragraphs if k]\n    if len(paragraphs) != 4:\n        return {\n            \"check_code\": False,\n            \"reason\": \"段落数不等于4\"\n        }\n    word_count = len(content.split())\n    if word_count < 500 or word_count > 600:\n        return {\n            \"check_code\": False,\n            \"reason\": \"字数不在500到600之间\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "撰写一篇关于城市交通改善建议的文章，文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。文章请以“在现代城市中”这几个字开头，同时在文中详细解释并列出其中四种主要原因，使用“【原因1】”、“【原因2】”、“【原因3】”和“【原因4】”作为主要原因的占位符。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少答案开始标记\")\n    if \"【答案结束】\" not in response:\n        err_infos.append(\"缺少答案结束标记\")\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or end_idx <= start_idx:\n        return {\"check_code\": False, \"reason\": \"答案标记错误\"}\n    \n    content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 检查开头\n    if not content.startswith(\"在现代城市中\"):\n        err_infos.append(\"未以指定短语开头\")\n    \n    # 检查段落数量\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量不符要求（当前{len(paragraphs)}段）\")\n    \n    # 检查第三段落句子数量\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2]\n        sentences = re.split(r'[。？！]+', third_para)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            err_infos.append(f\"第三段句子数量不符要求（当前{len(sentences)}句）\")\n    \n    # 检查原因占位符\n    required_placeholders = {\"【原因1】\", \"【原因2】\", \"【原因3】\", \"【原因4】\"}\n    missing_placeholders = [p for p in required_placeholders if p not in content]\n    if missing_placeholders:\n        err_infos.append(f\"缺少原因占位符：{', '.join(missing_placeholders)}\")\n    \n    # 检查多余内容\n    if response.find(\"【答案开始】\") != 0:\n        err_infos.append(\"答案标记前出现多余内容\")\n    if end_idx + len(\"【答案结束】\") < len(response):\n        err_infos.append(\"答案标记后出现多余内容\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于城市公共交通系统优化的文章，并以“城市交通”这四个字开头。文章应只出现5个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由4个句子（用中文句号或问号或感叹号分隔）组成。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义原始指令要求\n    original_instruction = (\n        '请写一篇关于城市公共交通系统优化的文章，并以“城市交通”这四个字开头。文章应只出现5个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。在第三个段落中，必须刚好由4个句子（用中文句号或问号或感叹号分隔）组成。'\n    )\n    \n    # 检查标记完整性\n    if not response.startswith(\"【答案开始】\"):\n        return {\"check_code\": False, \"reason\": \"回答未以'【答案开始】'开头\"}\n    \n    if \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"回答缺少'【答案结束】'标记\"}\n    \n    # 提取内容部分\n    content = response[len(\"【答案开始】\"):].split(\"【答案结束】\")[0]\n    if not content.startswith(original_instruction):\n        return {\"check_code\": False, \"reason\": \"未一字不差重复指令要求\"}\n    \n    # 提取文章部分\n    article = content[len(original_instruction):].strip()\n    if not article.startswith(\"城市交通\"):\n        return {\"check_code\": False, \"reason\": \"文章未以'城市交通'开头\"}\n    \n    # 检查段落结构\n    paragraphs = re.split(r'\\n\\n', article)\n    if len(paragraphs) != 5:\n        return {\"check_code\": False, \"reason\": f\"段落数量错误（实际：{len(paragraphs)}，要求：5）\"}\n    \n    # 检查第三段句子数量\n    third_para = paragraphs[2]\n    sentences = re.split(r'[。？！]', third_para)\n    valid_sentences = [s.strip() for s in sentences if s.strip()]\n    if len(valid_sentences) != 4:\n        return {\"check_code\": False, \"reason\": f\"第三段句子数量错误（实际：{len(valid_sentences)}，要求：4）\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "随着全球对可再生能源需求的增加，太阳能作为一种清洁、可再生的能源来源，正变得越来越重要。太阳能技术的发展不仅对环境保护产生了积极影响，还在全球能源结构转型中发挥着关键作用。太阳能发电主要分为光伏（PV）和太阳能热能发电两种方式。光伏技术利用半导体材料的光电效应将光能直接转换为电能，而太阳能热能发电则通过集热器将太阳能转化为热能，再通过热能驱动发电机发电。近年来，太阳能电池的效率不断提高，成本也逐渐下降，使得太阳能发电在许多地区已具备经济竞争力。与此同时，太阳能在城市建筑、交通工具和移动设备中的应用也日益广泛。为了更好地理解太阳能的优势与挑战，请深入探讨下列问题。\n\n\n请详细分析太阳能在住宅应用中的三大主要优势，并使用“&优势1&”、“&优势2&”和“&优势3&”作为主要优势的占位符。要求第二个句子（用中文句号或问号或感叹号分隔）以“这对未来至关重要”结尾。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化验证结果\n    check_code = True\n    err_infos = []\n    \n    # 检查头尾标记\n    if not response.startswith(\"【答案开始】\"):\n        check_code = False\n        err_infos.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        check_code = False\n        err_infos.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 检查答案分隔符\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        check_code = False\n        err_infos.append(f\"答案数量错误: 应为2个，实际为{len(answers)}个\")\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        # 检查占位符\n        placeholders = [\"&优势1&\", \"&优势2&\", \"&优势3&\"]\n        for ph in placeholders:\n            if ph not in ans:\n                check_code = False\n                err_infos.append(f\"答案{idx}缺少占位符{ph}\")\n        \n        # 检查句子结构和结尾\n        sentences = re.split(r'[。？！]', ans)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        if len(sentences) < 2:\n            check_code = False\n            err_infos.append(f\"答案{idx}句子数量不足\")\n        elif not sentences[1].endswith(\"这对未来至关重要\"):\n            check_code = False\n            err_infos.append(f\"答案{idx}第二句结尾不符合要求\")\n    \n    return {\"check_code\": check_code, \"reason\": err_infos}"}
{"prompt": "在日常生活中，科技的进步已经深刻地影响了我们的通讯方式。特别是随着移动互联网的普及，信息的获取和传递变得更加便捷和高效。然而，这种便利也带来了一些新挑战，比如信息过载和隐私泄漏等问题。为了应对这些挑战，许多公司和组织正在开发新的技术和策略，以保护用户隐私并提高信息的可管理性。\n\n请你撰写一篇关于未来五年内通讯技术可能会如何发展的文章。文章只能有30个句子（用中文句号或问号或感叹号分隔）。要求在文章中至少使用三次“隐私保护”、必须出现两次“信息管理”、以及最多出现一次“数据加密”。在文章中详细列出关于通讯技术发展的三个主要驱动力，使用“【驱动力1】”、“【驱动力2】”和“【驱动力3】”作为主要驱动力的占位符。请确保文章的每个句子（用中文句号或问号或感叹号分隔）至少有25个字，至多30个字。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import defaultdict\n\n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少结束标记【答案结束】\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查分隔符\n    answers = content.split(\"******\")\n    if len(answers) != 2:\n        errors.append(\"答案分隔符数量错误（应恰好包含6个星号的分隔符）\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 合并两个答案进行整体检查\n    full_text = \"\".join(answers)\n    \n    # 关键词计数\n    keyword_counts = {\n        \"隐私保护\": full_text.count(\"隐私保护\"),\n        \"信息管理\": full_text.count(\"信息管理\"),\n        \"数据加密\": full_text.count(\"数据加密\")\n    }\n    \n    # 检查关键词数量\n    if keyword_counts[\"隐私保护\"] < 3:\n        errors.append(f\"隐私保护出现次数不足（{keyword_counts['隐私保护']}次，至少需要3次）\")\n    if keyword_counts[\"信息管理\"] != 2:\n        errors.append(f\"信息管理出现次数错误（{keyword_counts['信息管理']}次，应恰好2次）\")\n    if keyword_counts[\"数据加密\"] > 1:\n        errors.append(f\"数据加密出现次数过多（{keyword_counts['数据加密']}次，最多允许1次）\")\n    \n    # 检查驱动力标记\n    drivers = re.findall(r\"【驱动力\\d】\", full_text)\n    driver_counts = defaultdict(int)\n    for d in drivers:\n        driver_counts[d] += 1\n    \n    required_drivers = {\"【驱动力1】\", \"【驱动力2】\", \"【驱动力3】\"}\n    missing_drivers = required_drivers - set(driver_counts.keys())\n    duplicate_drivers = [d for d, c in driver_counts.items() if c > 1]\n    \n    if missing_drivers:\n        errors.append(f\"缺少驱动力标记：{', '.join(sorted(missing_drivers))}\")\n    if duplicate_drivers:\n        errors.append(f\"重复的驱动力标记：{', '.join(sorted(duplicate_drivers))}\")\n    \n    # 检查句子数量和长度\n    all_sentences = []\n    for ans in answers:\n        sentences = re.split(r'[。？！]', ans)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        all_sentences.extend(sentences)\n    \n    # 检查总句子数\n    if len(all_sentences) != 30:\n        errors.append(f\"句子总数错误（{len(all_sentences)}句，应恰好30句）\")\n    \n    # 检查每句长度\n    invalid_lengths = []\n    for i, sent in enumerate(all_sentences, 1):\n        if not (25 <= len(sent) <= 30):\n            invalid_lengths.append(f\"第{i}句（{len(sent)}字）\")\n    \n    if invalid_lengths:\n        errors.append(f\"无效句子长度：{', '.join(invalid_lengths)}\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请用德语详细描述一种创新的家庭节能方法，该方法在日常生活中易于实施且成本效益高。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    # 导入所需模块\n    import re\n    from langdetect import detect, DetectorFactory, LangDetectException\n\n    # 确保结果可重现\n    DetectorFactory.seed = 0\n    \n    err_infos = []\n    \n    # 验证起始标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"开头缺少【答案开始】标记\")\n    \n    # 验证结束标记\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"结尾缺少【答案结束】标记\")\n    \n    # 提取内容部分\n    content_match = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n    if not content_match:\n        err_infos.append(\"未找到有效答案内容\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    content = content_match.group(1).strip()\n    \n    # 验证内容非空\n    if not content:\n        err_infos.append(\"答案内容为空\")\n    \n    # 验证语言是否为德语\n    try:\n        if detect(content) != 'de':\n            err_infos.append(\"答案内容未使用德语\")\n    except LangDetectException:\n        err_infos.append(\"语言检测失败\")\n    \n    # 验证多余内容\n    if len(response) > len(content_match.group(0)):\n        err_infos.append(\"存在超出标记外的额外内容\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"验证通过\" if not err_infos else \";\".join(err_infos)\n    }\n"}
{"prompt": "请写一篇关于“图书馆设计中如何促进读者互动”的文章，要求文章的内容中详细解释并列出三种主要设计方法，并使用“&方法1&”、“&方法2&”和“&方法3&”作为设计方法的占位符。文章必须只能有9个句子（用中文句号或问号或感叹号分隔），其中每个句子的字数至少15个汉字，最多20个汉字。同时，要求第6个句子以“为了实现这一目标”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查首尾标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查占位符\n    placeholders = [\"&方法1&\", \"&方法2&\", \"&方法3&\"]\n    for ph in placeholders:\n        if ph not in content:\n            err_infos.append(f\"缺少占位符{ph}\")\n    \n    # 分割句子并检查数量\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 9:\n        err_infos.append(f\"句子数量错误: 需要9句,实际{len(sentences)}句\")\n    \n    # 检查每句长度\n    for i, s in enumerate(sentences):\n        hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', s))\n        if hanzi_count < 15 or hanzi_count > 20:\n            err_infos.append(f\"第{i+1}句字数错误: {hanzi_count}字\")\n    \n    # 检查第6句开头\n    if len(sentences) >= 6:\n        if not sentences[5].startswith(\"为了实现这一目标\"):\n            err_infos.append(\"第6句未以指定短语开头\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "在全球化的时代，文化融合成为了一个重要的议题。不同国家和地区的人们在文化交流中，常常会面临语言障碍、文化误解等问题。然而，这种多样性也为创新和发展带来了新动力。比如，音乐作为一种全球通用的语言，它在文化融合中扮演着重要角色。从古典音乐到流行音乐，从民族乐器到现代电子音乐，音乐已成为连接不同文化的重要桥梁。现代音乐节不仅展示了多元文化的魅力，还促进了文化的传播和交流。音乐节上的表演者和观众来自世界各地，他们用音乐表达情感、传递思想，突破了语言的限制。对于音乐产业来说，全球化带来了新的机遇和挑战。音乐制作人、唱片公司和艺术家需要在理解和尊重不同文化的基础上，创造出能够跨越文化界限的作品。\n\n请撰写一篇关于“音乐在文化融合中的角色”的文章。文章需只有12个句子（每个句子之间用0912这个数字作为分隔符号）组成，请确保文章包含4个段落。每个段落之间用'～～'符号分隔。其中第2段的第8个汉字必须是“乐”字。请勿在文章中使用“全球化”、“融合”、“交流”这三个词。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查开始结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"未正确使用【答案开始】和【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    # 检查禁用词\n    forbidden_words = [\"全球化\", \"融合\", \"交流\"]\n    for word in forbidden_words:\n        if word in content:\n            err_infos.append(f\"使用了禁止词汇'{word}'\")\n    \n    # 检查段落结构\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量为{len(paragraphs)}而非4\")\n    \n    # 检查句子数量和结构\n    total_sentences = []\n    for i, para in enumerate(paragraphs):\n        sentences = [s for s in para.split('0912') if s.strip()]\n        total_sentences.extend(sentences)\n        \n        if i == 1:  # 第二段特殊检查\n            if len(sentences) < 1:\n                err_infos.append(\"第二段落无有效句子\")\n            else:\n                # 合并第二段所有句子进行检查\n                full_text = ''.join(sentences)\n                chinese_chars = [c for c in full_text if '\\u4e00' <= c <= '\\u9fff']\n                if len(chinese_chars) < 8:\n                    err_infos.append(\"第二段汉字数量不足8个\")\n                elif chinese_chars[7] != '乐':\n                    err_infos.append(f\"第二段第8个汉字是'{chinese_chars[7]}'而非'乐'\")\n    \n    # 检查总句子数\n    if len(total_sentences) != 12:\n        err_infos.append(f\"总句子数为{len(total_sentences)}而非12\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于“现代城市交通拥堵的成因与解决方案”的文章。文章只能有4个段落（不要出现标题），每个段落之间用“～～”符号分隔。第2段的第8个汉字必须是“路”字。文章必须以“我们必须共同努力，改善城市交通环境。”这句话结尾。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义原始指令要求\n    original_instruction = \"请写一篇关于“现代城市交通拥堵的成因与解决方案”的文章。文章只能有4个段落（不要出现标题），每个段落之间用“～～”符号分隔。第2段的第8个汉字必须是“路”字。文章必须以“我们必须共同努力，改善城市交通环境。”这句话结尾。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\"\n    \n    # 验证结果存储\n    check_code = True\n    err_infos = []\n    \n    # 检查基本结构标记\n    if \"【答案开始】\" not in response:\n        check_code = False\n        err_infos.append(\"缺少【答案开始】标记\")\n    if \"【答案结束】\" not in response:\n        check_code = False\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    response = response.strip()\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        check_code = False\n        err_infos.append(\"无法定位有效答案内容\")\n        return {\"check_code\": check_code, \"reason\": err_infos}\n    \n    content = response[len(\"【答案开始】\"): -len(\"【答案结束】\")].strip()\n    \n    # 检查指令重复\n    if not content.startswith(original_instruction):\n        check_code = False\n        err_infos.append(\"指令重复不完整或不准确\")\n    \n    # 提取实际答案部分\n    answers_part = content.replace(original_instruction, \"\").strip()\n    answers = answers_part.split(\"@@@@@@\")\n    \n    # 验证答案数量\n    if len(answers) < 2:\n        check_code = False\n        err_infos.append(\"答案数量不足2个\")\n    elif len(answers) > 2:\n        check_code = False\n        err_infos.append(\"答案数量超过2个\")\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers[:2]):\n        ans = ans.strip()\n        \n        # 检查段落分隔符\n        paragraphs = ans.split(\"～～\")\n        if len(paragraphs) != 4:\n            check_code = False\n            err_infos.append(f\"答案{i+1}段落数量不是4段\")\n            continue\n        \n        # 检查第二段第8个汉字\n        if len(paragraphs) > 1:\n            second_para = re.sub(r\"\\s+\", \"\", paragraphs[1])  # 移除空格\n            chinese_chars = re.findall(r'[一-鿿]', second_para)\n            if len(chinese_chars) < 8:\n                check_code = False\n                err_infos.append(f\"答案{i+1}第二段汉字不足8个\")\n            elif chinese_chars[7] != \"路\":\n                check_code = False\n                err_infos.append(f\"答案{i+1}第二段第8个汉字不是'路'\")\n        \n        # 检查结尾句\n        last_para = paragraphs[-1].strip()\n        if not last_para.endswith(\"我们必须共同努力，改善城市交通环境。\"):\n            check_code = False\n            err_infos.append(f\"答案{i+1}结尾句不符合要求\")\n    \n    return {\"check_code\": check_code, \"reason\": err_infos}"}
{"prompt": "撰写一篇关于户外露营技巧的文章，文章应包含四个段落（不要出现标题），每个段落之间用'～～'符号分隔。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。文章的每个句子至少15个汉字，并且不多于25个汉字。请确保第四个句子（用中文句号或问号或感叹号分隔）以‘这很有帮助’结尾。同时，文章中不允许出现“豪华”、“智能”、“科技”这几个词。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    check_code = True\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        check_code = False\n        err_infos.append(\"回答未包含正确的开始/结束标记\")\n        return {\"check_code\": check_code, \"reason\": \";\".join(err_infos)}\n    \n    # 提取实际内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查禁止词\n    forbidden_words = [\"豪华\", \"智能\", \"科技\"]\n    for word in forbidden_words:\n        if word in content:\n            check_code = False\n            err_infos.append(f\"包含禁止词'{word}'\")\n    \n    # 检查段落分隔\n    paragraphs = [p.strip() for p in content.split('～～') if p.strip()]\n    if len(paragraphs) != 4:\n        check_code = False\n        err_infos.append(f\"段落数量错误（实际：{len(paragraphs)}，应为4）\")\n    \n    # 检查第三个段落句子数量\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2]\n        # 使用中文标点分句\n        sentences = re.split(r'[。？！]', third_para)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            check_code = False\n            err_infos.append(f\"第三段句子数量错误（实际：{len(sentences)}，应为6）\")\n    \n    # 检查所有句子长度和第四个句子结尾\n    all_sentences = []\n    for para in paragraphs:\n        # 分句并过滤空句子\n        s_list = re.split(r'[。？！]', para)\n        s_list = [s.strip() for s in s_list if s.strip()]\n        all_sentences.extend(s_list)\n    \n    # 检查第四个句子结尾\n    if len(all_sentences) >= 4:\n        fourth_sentence = all_sentences[3]\n        if not fourth_sentence.endswith('这很有帮助'):\n            check_code = False\n            err_infos.append(\"第四个句子未以'这很有帮助'结尾\")\n    else:\n        check_code = False\n        err_infos.append(\"总句子数量不足4个\")\n    \n    # 检查每个句子长度\n    for i, sent in enumerate(all_sentences):\n        # 提取汉字字符\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', sent)\n        chinese_count = len(chinese_chars)\n        if chinese_count < 15 or chinese_count > 25:\n            check_code = False\n            err_infos.append(f\"第{i+1}个句子长度不符（实际：{chinese_count}字）\")\n    \n    return {\n        \"check_code\": check_code,\n        \"reason\": \";\".join(err_infos) if err_infos else \"验证通过\"\n    }"}
{"prompt": "请撰写一篇关于“传统手工艺与现代技术结合”的文章。文章需满足以下要求：  \n1.  文章必须以“未来的创新将继续推动传统的传承。”这句话结束。\n2. 文章只能分为四个段落（不要出现标题），每个段落之间用“～～”符号分隔。其中第2段的第8个汉字必须是“艺”字。  \n3. 文章必须恰好由15个句子组成（用中文句号或问号或感叹号分隔），并确保第10个句子的第3个汉字是“技”字。  \n4. 模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查整体格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"答案未使用指定标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查答案分隔符\n    if \"@@@@@@\" not in content:\n        err_infos.append(\"缺少六个@分隔符\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量应为2个，实际为{len(answers)}个\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        ans_err = []\n        \n        # 检查结束语\n        if not ans.strip().endswith(\"未来的创新将继续推动传统的传承。\"):\n            ans_err.append(f\"答案{idx}未以指定句子结尾\")\n        \n        # 检查段落分隔和数量\n        paragraphs = ans.split(\"～～\")\n        if len(paragraphs) != 4:\n            ans_err.append(f\"答案{idx}段落数应为4，实际为{len(paragraphs)}\")\n        \n        # 检查第二段第8个汉字\n        if len(paragraphs) >= 2:\n            second_para = paragraphs[1].strip()\n            hanzi_count = 0\n            target_char = \"\"\n            for char in second_para:\n                if '\\u4e00' <= char <= '\\u9fff':  # 汉字Unicode范围\n                    hanzi_count += 1\n                    if hanzi_count == 8:\n                        target_char = char\n                        break\n            if hanzi_count < 8:\n                ans_err.append(f\"答案{idx}第二段不足8个汉字\")\n            elif target_char != \"艺\":\n                ans_err.append(f\"答案{idx}第二段第8个汉字应为'艺'，实际为'{target_char}'\")\n        \n        # 检查句子数量\n        sentences = re.split(r'[。？！]', ans)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 15:\n            ans_err.append(f\"答案{idx}应为15个句子，实际为{len(sentences)}个\")\n        \n        # 检查第10句第3个汉字\n        if len(sentences) >= 10:\n            tenth_sentence = sentences[9]\n            hanzi_count = 0\n            target_char = \"\"\n            for char in tenth_sentence:\n                if '\\u4e00' <= char <= '\\u9fff':\n                    hanzi_count += 1\n                    if hanzi_count == 3:\n                        target_char = char\n                        break\n            if hanzi_count < 3:\n                ans_err.append(f\"答案{idx}第10句不足3个汉字\")\n            elif target_char != \"技\":\n                ans_err.append(f\"答案{idx}第10句第3个汉字应为'技'，实际为'{target_char}'\")\n        \n        # 收集当前答案的错误\n        if ans_err:\n            err_infos.extend(ans_err)\n    \n    # 返回最终验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请撰写一篇关于如何有效组织一次社区清扫活动的文章。请确保文章只出现3个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第2段恰好由6个句子（用中文句号或问号或感叹号分隔）组成。要求文章的第3个句子以“团队合作是”开头。请在回复中详细解释并列出其中三种主要原因，使用“&原因1&”、“&原因2&”和“&原因3&”作为主要原因的占位符。要求模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息列表\n    err_infos = []\n    \n    # 检查起始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker):\n        err_infos.append(\"回答开头缺少'【答案开始】'标记\")\n    if not response.endswith(end_marker):\n        err_infos.append(\"回答结尾缺少'【答案结束】'标记\")\n    \n    # 提取答案内容\n    content = response.replace(start_marker, \"\").replace(end_marker, \"\").strip()\n    \n    # 检查答案分隔符\n    answers = content.split('@@@@@@')\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量错误，应为2个，实际分割出{len(answers)}个\")\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers):\n        ans = ans.strip()\n        if not ans:\n            err_infos.append(f\"答案{i+1}为空\")\n            continue\n        \n        # 分割段落\n        paragraphs = re.split(r'～～+', ans)\n        if len(paragraphs) != 3:\n            err_infos.append(f\"答案{i+1}段落数量错误：应为3段，实际为{len(paragraphs)}段\")\n            continue\n        \n        # 检查第二段句子数量\n        sentences_para2 = re.split(r'[。？！]', paragraphs[1])\n        sentences_para2 = [s.strip() for s in sentences_para2 if s.strip()]\n        if len(sentences_para2) != 6:\n            err_infos.append(f\"答案{i+1}第2段句子数量错误：应为6句，实际为{len(sentences_para2)}句\")\n        \n        # 检查全局第三句\n        all_sentences = re.split(r'[。？！]', ans)\n        all_sentences = [s.strip() for s in all_sentences if s.strip()]\n        if len(all_sentences) < 3:\n            err_infos.append(f\"答案{i+1}总句子数不足3句\")\n        else:\n            if not all_sentences[2].startswith('团队合作是'):\n                err_infos.append(f\"答案{i+1}第3个句子不以'团队合作是'开头：'{all_sentences[2][:20]}...'\")\n        \n        # 检查第三段占位符\n        para3 = paragraphs[2]\n        if \"&原因1&\" not in para3:\n            err_infos.append(f\"答案{i+1}第3段缺少'&原因1&'占位符\")\n        if \"&原因2&\" not in para3:\n            err_infos.append(f\"答案{i+1}第3段缺少'&原因2&'占位符\")\n        if \"&原因3&\" not in para3:\n            err_infos.append(f\"答案{i+1}第3段缺少'&原因3&'占位符\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“城市公共交通创新”的文章，请确保文章只由15个句子（用中文句号或问号或感叹号分隔）组成。其中第7个句子至少有12个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查开始结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response or end_marker not in response:\n        return {\"check_code\": False, \"reason\": \"答案未包含正确的开始/结束标记\"}\n    \n    # 提取答案内容\n    content_start = response.find(start_marker) + len(start_marker)\n    content_end = response.find(end_marker)\n    content = response[content_start:content_end].strip()\n    \n    # 分割句子\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]  # 移除空句子\n    \n    # 检查句子数量\n    if len(sentences) != 15:\n        return {\"check_code\": False, \"reason\": f\"句子数量错误：要求15个，实际{len(sentences)}个\"}\n    \n    # 检查第7句长度\n    if len(sentences) < 7:\n        return {\"check_code\": False, \"reason\": \"第7个句子不存在\"}\n    \n    seventh_sentence = sentences[6]\n    hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', seventh_sentence))\n    if hanzi_count < 12:\n        return {\"check_code\": False, \"reason\": f\"第7句汉字不足12个（实际{hanzi_count}字）\"}\n    \n    # 主题验证\n    if \"公共交通\" not in content and \"交通创新\" not in content:\n        return {\"check_code\": False, \"reason\": \"内容未涉及公共交通创新主题\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于“宠物在家庭生活中的角色”的文章。要求文章分为4个段落，每个段落用两个换行符“\n\n”分隔开来。请在文中至少出现“陪伴”一词3次，必须出现“快乐”一词2次，并且最多出现“责任”一词1次。文章中每个句子的字数至少为15个字，最多为25个字。另外，第四个句子需以“在这个过程中”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    content = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 检查段落结构\n    paragraphs = content.split('\\n\\n')\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误: 需要4段，实际{len(paragraphs)}段\")\n    \n    # 统计关键词\n    count_pei = content.count(\"陪伴\")\n    count_kuai = content.count(\"快乐\")\n    count_ze = content.count(\"责任\")\n    \n    if count_pei < 3:\n        err_infos.append(f\"'陪伴'次数不足: 需要≥3次，实际{count_pei}次\")\n    if count_kuai != 2:\n        err_infos.append(f\"'快乐'次数错误: 需要=2次，实际{count_kuai}次\")\n    if count_ze > 1:\n        err_infos.append(f\"'责任'次数超限: 需要≤1次，实际{count_ze}次\")\n    \n    # 提取所有句子\n    sentences = []\n    for para in paragraphs:\n        # 按中文标点分割句子\n        para_sentences = re.split(r'([。？！])', para)\n        # 重组句子（保留标点）\n        combined = []\n        for i in range(0, len(para_sentences)-1, 2):\n            sentence = (para_sentences[i] + para_sentences[i+1]).strip()\n            if sentence:\n                combined.append(sentence)\n        sentences.extend(combined)\n    \n    # 检查第四个句子\n    if len(sentences) >= 4:\n        if not sentences[3].startswith(\"在这个过程中\"):\n            err_infos.append(\"第四句未以'在这个过程中'开头\")\n    else:\n        err_infos.append(f\"句子数量不足4句，只有{len(sentences)}句\")\n    \n    # 检查句子长度\n    for i, sent in enumerate(sentences, 1):\n        # 计算中文字符数量（去空格）\n        char_count = len(re.sub(r'\\s', '', sent))\n        if char_count < 15 or char_count > 25:\n            err_infos.append(f\"第{i}句字数超限({char_count}字): '{sent[:10]}...'\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一个故事，讲述一位年轻的厨师如何在一家海滨小餐馆中取得成功。故事中必须包含“星星”这个词，并以“他终于实现了自己的梦想。”这句话结尾。请确保故事只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。整篇文章必须只能由30个句子（用中文句号或问号或感叹号分隔）组成。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义指令要求的完整字符串\n    instruction_str = \"请写一个故事，讲述一位年轻的厨师如何在一家海滨小餐馆中取得成功。故事中必须包含“星星”这个词，并以“他终于实现了自己的梦想。”这句话结尾。请确保故事只出现4个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。整篇文章必须只能由30个句子（用中文句号或问号或感叹号分隔）组成。\"\n    \n    # 验证标记完整性\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案缺少开始/结束标记\"}\n    \n    # 提取答案主体内容\n    answer_body = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 验证指令重复部分\n    if not answer_body.startswith(instruction_str):\n        return {\"check_code\": False, \"reason\": \"未正确重复指令要求\"}\n    \n    # 提取故事内容\n    story = answer_body[len(instruction_str):].strip()\n    \n    # 验证故事结尾\n    if not story.endswith(\"他终于实现了自己的梦想。\"):\n        return {\"check_code\": False, \"reason\": \"故事未以指定句子结尾\"}\n    \n    # 验证包含\"星星\"关键词\n    if \"星星\" not in story:\n        return {\"check_code\": False, \"reason\": \"故事缺少'星星'关键词\"}\n    \n    # 验证段落数量\n    paragraphs = [p.strip() for p in story.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量应为4，实际为{len(paragraphs)}\"}\n    \n    # 验证句子数量\n    sentences = [s.strip() for s in re.split(r'[。？！]', story) if s.strip()]\n    if len(sentences) != 30:\n        return {\"check_code\": False, \"reason\": f\"故事应包含30个句子，实际包含{len(sentences)}个句子\"}\n    \n    return {\"check_code\": True, \"reason\": \"所有验证通过\"}"}
{"prompt": "请写一段关于城市绿化对居民健康影响的分析，要求以‘根据研究’这几个字开头，并且每个句子（用中文句号或问号或感叹号分隔）至少15个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查标记是否存在\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"未找到答案开始或结束标记\"}\n    \n    # 提取答案内容\n    start_idx = response.index(\"【答案开始】\") + 6\n    end_idx = response.index(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查开头格式\n    if not content.startswith(\"根据研究\"):\n        return {\"check_code\": False, \"reason\": \"回答未以'根据研究'开头\"}\n    \n    # 分句检查长度\n    sentences = re.split(r'[。？！]', content)\n    for i, sent in enumerate(sentences):\n        sent = sent.strip()\n        if not sent:  # 跳过空句子\n            continue\n            \n        # 计算汉字数量（排除非汉字字符）\n        hanzi_chars = re.findall(r'[\\u4e00-\\u9fa5]', sent)\n        if len(hanzi_chars) < 15:\n            return {\"check_code\": False, \n                    \"reason\": f\"第{i+1}句不足15个汉字（实际{len(hanzi_chars)}字）: '{sent}'\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于海洋探索的文章，特别强调人类在海洋深处的发现，但不能使用“深海”、“潜艇”、“科技”这几个词。文章应以“在广袤的蓝色世界中”开头，并以“这些发现激励着我们继续探索未知的领域。”结尾。文章长度为7个句子（用中文句号或问号或感叹号分隔）。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n\n    # 检查响应格式：开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取实际回答内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[5:-5].strip()  # 去除标记和首尾空格\n    \n    # 验证开头语句\n    if not content.startswith(\"在广袤的蓝色世界中\"):\n        err_infos.append(\"开头语句不符合要求\")\n    \n    # 验证结尾语句\n    if not content.endswith(\"这些发现激励着我们继续探索未知的领域。\"):\n        err_infos.append(\"结尾语句不符合要求\")\n    \n    # 验证句子数量\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) != 7:\n        err_infos.append(f\"文章长度应为7句，实际为{len(sentences)}句\")\n    \n    # 检查禁用词\n    forbidden_words = [\"深海\", \"潜艇\", \"科技\"]\n    for word in forbidden_words:\n        if word in content:\n            err_infos.append(f\"使用了禁用词: {word}\")\n    \n    # 检查额外内容\n    if \"【答案开始】\" in content or \"【答案结束】\" in content:\n        err_infos.append(\"答案中包含多余标记\")\n    \n    # 汇总结果\n    check_code = len(err_infos) == 0\n    reason = \"; \".join(err_infos) if err_infos else \"\"\n    \n    return {\"check_code\": check_code, \"reason\": reason}"}
{"prompt": "在中国的饮食文化中，火锅是一种极具代表性的美食，广受各地人民的喜爱。火锅的历史可以追溯到战国时期，至今已有两千多年的历史。每个地区的火锅都有其独特的风味和特色，例如四川火锅以其麻辣闻名，潮汕火锅则以清淡鲜美著称。火锅不仅是一种饮食方式，更是一种社交活动，亲朋好友围坐在火锅前，共享美味的同时也增进了彼此的感情。\n\n请撰写一篇关于火锅文化的文章，内容至少150字，最多200字。在文章中，你需要描述不同地区火锅的特点，并且避免使用“辣”、“麻”、“鲜”这三个词。文章中需刚好由7个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 定义错误信息列表\n    errors = []\n    \n    # 检查响应格式标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取实际回答内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[5:-5].strip()  # 去除标记\n    \n    # 检查字数限制\n    char_count = len(re.sub(r'\\s', '', content))  # 去除所有空白字符\n    if char_count < 150 or char_count > 200:\n        errors.append(f\"字数不符要求（当前{char_count}字）\")\n    \n    # 检查禁用词\n    forbidden_words = ['辣', '麻', '鲜']\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        errors.append(f\"包含禁用词：{'、'.join(found_words)}\")\n    \n    # 检查句子数量\n    sentences = [s for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) != 7:\n        errors.append(f\"句子数量不符（当前{len(sentences)}句）\")\n    \n    # 检查地区特点描述\n    regions = ['四川', '潮汕']\n    missing_regions = [region for region in regions if region not in content]\n    if missing_regions:\n        errors.append(f\"缺少地区描述：{'、'.join(missing_regions)}\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请写一篇关于城市交通拥堵问题的文章。文章必须由92个句子（用中文句号或问号或感叹号分隔）组成。文章必须由9个段落组成，每个段落用两个换行符“\n\n”分隔开来。在第5个段落中，必须刚好由12个句子（用中文句号或问号或感叹号分隔）组成。请确保文章的字数不少于1000字且不超过1300字。最后一段必须以“因此，城市规划需要更为智能化的解决方案。”这句话结尾。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义指令要求文本\n    instruction_text = \"请写一篇关于城市交通拥堵问题的文章。文章必须由92个句子（用中文句号或问号或感叹号分隔）组成。文章必须由9个段落组成，每个段落用两个换行符“\\n\\n”分隔开来。在第5个段落中，必须刚好由12个句子（用中文句号或问号或感叹号分隔）组成。请确保文章的字数不少于1000字且不超过1300字。最后一段必须以“因此，城市规划需要更为智能化的解决方案。”这句话结尾。\"\n    \n    errors = []\n    \n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        errors.append(\"缺少答案标记【答案开始】或【答案结束】\")\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 提取答案内容\n    start_index = response.index(\"【答案开始】\") + len(\"【答案开始】\")\n    end_index = response.index(\"【答案结束】\")\n    answer_content = response[start_index:end_index].strip()\n    \n    # 检查指令重复部分\n    if not answer_content.startswith(instruction_text):\n        errors.append(\"未正确重复指令要求\")\n    \n    # 提取文章部分\n    article_start = len(instruction_text)\n    article_content = answer_content[article_start:].lstrip()\n    \n    # 检查段落结构\n    paragraphs = [p.strip() for p in article_content.split('\\n\\n') if p.strip()]\n    if len(paragraphs) != 9:\n        errors.append(f\"段落数量错误: 实际{len(paragraphs)}段, 需要9段\")\n    \n    # 检查句子数量\n    total_sentences = 0\n    for i, para in enumerate(paragraphs):\n        # 使用中文标点分句\n        sentences = [s for s in re.split(r'[。？！]', para) if s.strip()]\n        para_sentences = len(sentences)\n        total_sentences += para_sentences\n        \n        # 检查第五段落\n        if i == 4 and para_sentences != 12:\n            errors.append(f\"第五段落句子数错误: 实际{para_sentences}句, 需要12句\")\n    \n    # 检查总句子数\n    if total_sentences != 92:\n        errors.append(f\"总句子数错误: 实际{total_sentences}句, 需要92句\")\n    \n    # 检查字数\n    clean_text = re.sub(r'\\s', '', article_content)  # 移除所有空白字符\n    char_count = len(clean_text)\n    if char_count < 1000 or char_count > 1300:\n        errors.append(f\"字数范围错误: 实际{char_count}字, 需要1000-1300字\")\n    \n    # 检查结尾\n    if paragraphs and not paragraphs[-1].endswith('因此，城市规划需要更为智能化的解决方案。'):\n        errors.append(\"最后一段未以指定句子结尾\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \";\".join(errors) if errors else \"\"\n    }\n"}
{"prompt": "请撰写一篇关于“人工智能在农业领域的创新应用”的文章。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。请确保文章恰好由9个句子组成，每个句子用“^”符号分隔。要求文章以“随着科技的不断进步”开头。要求模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查开始和结束标记\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"未找到答案开始或结束标记\"}\n    \n    # 提取答案内容\n    content = response.split(\"【答案开始】\")[1].split(\"【答案结束】\")[0].strip()\n    \n    # 检查答案分隔符\n    if \"@@@@@@\" not in content:\n        return {\"check_code\": False, \"reason\": \"缺少答案分隔符@@@@@@\"}\n    \n    # 分割两个答案\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案数量错误，应为2个实际{len(answers)}个\"}\n    \n    # 验证每个答案\n    err_infos = []\n    for i, ans in enumerate(answers):\n        ans = ans.strip()\n        # 检查开头\n        if not ans.startswith(\"随着科技的不断进步\"):\n            err_infos.append(f\"答案{i+1}开头不符合要求\")\n        \n        # 检查段落分隔符\n        paragraphs = ans.split(\"～～\")\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{i+1}段落数错误，应为4实际{len(paragraphs)}\")\n        \n        # 合并所有文本检查句子分隔符\n        full_text = ans.replace(\"～～\", \"\")\n        sentences = full_text.split(\"^\")\n        if len(sentences) != 9:\n            err_infos.append(f\"答案{i+1}句子数错误，应为9实际{len(sentences)}\")\n    \n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "首先，将下列文本中的第3个句子的第19个汉字删除；然后，再将上一步修改过的文本中的“脊”字全部替换为“福”字；然后，再将上一步修改过的文本中的第4个句子的“的”字删除；最后，在上一步修改过的文本中的第34个汉字和第35个汉字之间插入汉字“五”。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n脊柱外科是医学领域中一个专门治疗脊柱疾病的分支。脊柱是人体的支柱结构，对保护脊髓和支撑身体起着重要作用。常见的脊柱疾病包括脊柱侧弯、椎间盘突出和脊髓损伤等。脊柱外科医生通过手术和康复治疗来改善患者的症状，恢复功能，提高生活质量。随着医学技术的发展，微创手术和新型植入物的应用使得脊柱外科手术的安全性和效果不断提高。脊柱外科的研究和发展需要多学科的合作，包括神经外科、骨科和康复医学等，以提供更加全面和精准的治疗方案。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 原始文本\n    original_text = \"脊柱外科是医学领域中一个专门治疗脊柱疾病的分支。脊柱是人体的支柱结构，对保护脊髓和支撑身体起着重要作用。常见的脊柱疾病包括脊柱侧弯、椎间盘突出和脊髓损伤等。脊柱外科医生通过手术和康复治疗来改善患者的症状，恢复功能，提高生活质量。随着医学技术的发展，微创手术和新型植入物的应用使得脊柱外科手术的安全性和效果不断提高。脊柱外科的研究和发展需要多学科的合作，包括神经外科、骨科和康复医学等，以提供更加全面和精准的治疗方案。\"\n    \n    # 处理步骤\n    # 步骤1：删除第3个句子的第19个汉字\n    sentences = re.split(r'(?<=。)', original_text)\n    sentences = [s for s in sentences if s != '']\n    third_sentence = sentences[2]\n    hanzi_count = 0\n    new_third = \"\"\n    for char in third_sentence:\n        if '\\u4e00' <= char <= '\\u9fff':  # 判断汉字\n            hanzi_count += 1\n            if hanzi_count != 19:  # 跳过第19个汉字\n                new_third += char\n        else:\n            new_third += char\n    sentences[2] = new_third\n    text_step1 = \"\".join(sentences)\n    \n    # 步骤2：将\"脊\"全部替换为\"福\"\n    text_step2 = text_step1.replace(\"脊\", \"福\")\n    \n    # 步骤3：删除第4个句子的\"的\"字\n    sentences = re.split(r'(?<=。)', text_step2)\n    sentences = [s for s in sentences if s != '']\n    fourth_sentence = sentences[3]\n    # 只删除第一个出现的\"的\"字\n    found = False\n    new_fourth = \"\"\n    for char in fourth_sentence:\n        if char == \"的\" and not found:\n            found = True\n            continue  # 跳过第一个\"的\"\n        new_fourth += char\n    sentences[3] = new_fourth\n    text_step3 = \"\".join(sentences)\n    \n    # 步骤4：在第34个和第35个汉字之间插入\"五\"\n    hanzi_positions = []\n    for i, char in enumerate(text_step3):\n        if '\\u4e00' <= char <= '\\u9fff':  # 记录汉字位置\n            hanzi_positions.append(i)\n    if len(hanzi_positions) >= 35:\n        insert_pos = hanzi_positions[34]  # 第35个汉字的位置\n        text_step4 = text_step3[:insert_pos] + \"五\" + text_step3[insert_pos:]\n    else:\n        text_step4 = text_step3  # 不足35个汉字则不插入\n    \n    correct_answer = text_step4\n    \n    # 验证response\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or end_idx <= start_idx:\n        return {\"check_code\": False, \"reason\": \"答案标记缺失或错误\"}\n    \n    start_idx += len(start_marker)\n    user_answer = response[start_idx:end_idx].strip()\n    \n    if user_answer == correct_answer:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": \"修改结果与预期不符\"}"}
{"prompt": "在现代社会。宠物已经成为许多家庭的重要成员。养宠物不仅可以带来快乐和陪伴。还能帮助人们缓解压力。然而。养宠物也需要承担一定的责任和义务。选择合适的宠物、提供适当的食物和住所、定期进行健康检查和疫苗接种。都是养宠物者需要考虑的重要方面。此外。宠物的行为训练和社会化也至关重要。可以避免宠物在家庭和社区中引发不必要的麻烦。\n\n请写一篇文章，探讨养宠物对人类身心健康的影响。文章只应出现六个段落，每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。整篇文章的内容不能出现中文逗号。文章的内容长度应至少为500字，至多为600字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息列表\n    errors = []\n    \n    # 检查起始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker):\n        errors.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(end_marker):\n        errors.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取实际内容\n    content = response\n    if response.startswith(start_marker) and response.endswith(end_marker):\n        content = response[len(start_marker):-len(end_marker)].strip()\n    else:\n        # 如果标记不全，直接返回错误\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 验证段落数量和分隔符\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 6:\n        errors.append(f\"段落数量应为6，实际为{len(paragraphs)}\")\n    \n    # 验证第三段落句子数量\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2]\n        # 使用正则表达式分割句子（考虑句号、问号、感叹号）\n        sentences = re.split(r'(?<=[。？！])', third_para)\n        # 过滤空字符串\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            errors.append(f\"第三段落应为6个句子，实际为{len(sentences)}\")\n    else:\n        errors.append(\"无法验证第三段落（段落数量不足）\")\n    \n    # 检查是否出现中文逗号\n    if \"，\" in content:\n        errors.append(\"内容中出现中文逗号\")\n    \n    # 验证内容长度（500-600字）\n    char_count = len(content)\n    if char_count < 500:\n        errors.append(f\"内容长度不足500字（当前{char_count}字）\")\n    elif char_count > 600:\n        errors.append(f\"内容长度超过600字（当前{char_count}字）\")\n    \n    # 返回验证结果\n    if errors:\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于“如何高效整理工作文件”的文章。文章必须以“在工作中”这几个字开头。文章内容需详细列出其中三种主要方法，并使用“&方法1&”、“&方法2&”和“&方法3&”作为方法的占位符。文章只能分为三个段落（不要出现标题），每个段落之间用“～～”符号分隔。其中第二个段落，必须恰好由5个句子（用中文句号或问号或感叹号分隔）组成。文章的每个句子不得少于15个汉字，但不得超过25个汉字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n\n    # 验证答案标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案缺少开始/结束标记\"}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    if \"&方法1&\" not in content or \"&方法2&\" not in content or \"&方法3&\" not in content:\n        return {\"check_code\": False, \"reason\": \"缺少方法占位符(&方法1&/&方法2&/&方法3&)\"}\n    \n    # 分割两个答案\n    parts = content.split(\"@@@@@@\")\n    if len(parts) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案数量错误，应为2个，实际{len(parts)}个\"}\n    \n    error_msgs = []\n    for ans_idx, answer in enumerate(parts, 1):\n        ans_errors = []\n        \n        # 检查开头\n        if not answer.startswith(\"在工作中\"):\n            ans_errors.append(\"开头不是'在工作中'\")\n        \n        # 检查段落分隔符\n        paragraphs = [p.strip() for p in answer.split(\"～～\") if p.strip()]\n        if len(paragraphs) != 3:\n            ans_errors.append(f\"段落数量错误，应为3段，实际{len(paragraphs)}段\")\n        \n        # 检查第二段句子数量\n        if len(paragraphs) >= 2:\n            sentences = re.split(r'[。？！]', paragraphs[1])\n            sentences = [s.strip() for s in sentences if s.strip()]\n            if len(sentences) != 5:\n                ans_errors.append(f\"第二段应为5句，实际{len(sentences)}句\")\n        \n        # 检查所有句子长度\n        for p_idx, para in enumerate(paragraphs, 1):\n            sentences = re.split(r'[。？！]', para)\n            for s_idx, sent in enumerate(sentences, 1):\n                if not sent.strip():\n                    continue\n                # 计算汉字数量\n                hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', sent))\n                if hanzi_count < 15 or hanzi_count > 25:\n                    ans_errors.append(\n                        f\"第{p_idx}段第{s_idx}句长度不符\"\n                        f\"(当前{hanzi_count}字，应为15-25字): '{sent[:10]}...'\"\n                    )\n        \n        # 检查方法占位符\n        if \"&方法1&\" not in answer:\n            ans_errors.append(\"缺少&方法1&\")\n        if \"&方法2&\" not in answer:\n            ans_errors.append(\"缺少&方法2&\")\n        if \"&方法3&\" not in answer:\n            ans_errors.append(\"缺少&方法3&\")\n        \n        if ans_errors:\n            error_msgs.append(f\"答案{ans_idx}错误: {'; '.join(ans_errors)}\")\n    \n    if error_msgs:\n        return {\"check_code\": False, \"reason\": \" | \".join(error_msgs)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "写一篇关于“城市发展与生态保护”的文章，并且文章中需要包含“可持续发展”和“绿色能源”这两个词。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取答案内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查分隔符和答案数量\n    parts = [p.strip() for p in content.split(\"******\") if p.strip()]\n    if len(parts) != 2:\n        err_infos.append(f\"答案数量错误，需要2个答案，实际得到{len(parts)}个\")\n    \n    # 检查关键词\n    keywords = [\"可持续发展\", \"绿色能源\"]\n    for i, part in enumerate(parts):\n        for kw in keywords:\n            if kw not in part:\n                err_infos.append(f\"答案{i+1}中缺少关键词'{kw}'\")\n    \n    # 检查多余内容\n    if \"不允许生成多余的内容\" in response or \"指令要求\" in response:\n        err_infos.append(\"包含多余的解释性内容\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于如何通过简单的生活习惯改变来提高个人健康水平的文章，要求文章以“保持健康”这四个字开头，并以“这是我们健康生活的重要保障。”这句话结尾。这篇文章必须包含30个句子，文章中每个句子（用中文句号或问号或感叹号分隔）至少12个字，且最多18个字。请避免使用“疾病”、“药物”、“治疗”这几个词。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取实际回答内容\n    content_match = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n    if not content_match:\n        err_infos.append(\"未找到有效回答内容\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    content = content_match.group(1).strip()\n    \n    # 检查开头和结尾\n    if not content.startswith(\"保持健康\"):\n        err_infos.append(\"回答未以'保持健康'开头\")\n    if not content.endswith(\"这是我们健康生活的重要保障。\"):\n        err_infos.append(\"回答未以指定结尾句结束\")\n    \n    # 分割句子\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    # 检查句子数量\n    if len(sentences) != 30:\n        err_infos.append(f\"句子数量不符要求（实际:{len(sentences)}/要求:30）\")\n    \n    # 检查每句长度和禁用词\n    for i, s in enumerate(sentences):\n        # 统计中文字符数量（排除标点）\n        char_count = len(re.findall(r'[\\u4e00-\\u9fa5]', s))\n        if char_count < 12 or char_count > 18:\n            err_infos.append(f\"第{i+1}句长度不符（实际:{char_count}字）\")\n        \n        # 检查禁用词\n        if re.search(r'疾病|药物|治疗', s):\n            err_infos.append(f\"第{i+1}句包含禁用词汇\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "在现代社会中，随着人口的增加和城市化进程的加快，交通拥堵问题愈发严重。许多城市都在探索解决交通拥堵的新方法，其中一种方法就是推广公共交通系统。然而，公共交通系统的成功实施需要克服诸多挑战，包括成本、政策支持和公众接受度等方面。\n\n请你想象一下未来的某个城市，这个城市成功实施了一个高效的公共交通系统，极大地缓解了交通拥堵问题。请详细描述这个公共交通系统的特点和优势。描述中必须出现“智能机器人”、“空中汽车”、“万物互联”这三个词，但在描述中请避免使用“高科技”、“智能化”、“电动”这三个词。描述需要以“在这个城市”开头，并且包含“【优势1】”、“【优势2】”、“【优势3】”这三个占位符来阐述具体的优势。文章只能由30个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查标记完整性\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if \"【答案结束】\" not in response:\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    if err_infos: \n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取核心内容\n    content = response.split(\"【答案开始】\")[-1].split(\"【答案结束】\")[0].strip()\n    \n    # 检查开头格式\n    if not content.startswith(\"在这个城市\"):\n        err_infos.append(\"内容未以'在这个城市'开头\")\n    \n    # 检查必要词汇\n    required_words = [\"智能机器人\", \"空中汽车\", \"万物互联\"]\n    for word in required_words:\n        if word not in content:\n            err_infos.append(f\"缺少必要词汇'{word}'\")\n    \n    # 检查禁用词汇\n    banned_words = [\"高科技\", \"智能化\", \"电动\"]\n    for word in banned_words:\n        if word in content:\n            err_infos.append(f\"包含禁用词汇'{word}'\")\n    \n    # 检查优势标记\n    advantage_tags = [\"【优势1】\", \"【优势2】\", \"【优势3】\"]\n    for tag in advantage_tags:\n        if tag not in content:\n            err_infos.append(f\"缺少优势标记{tag}\")\n    \n    # 检查句子数量\n    sentences = re.split(r'[。？！]', content)\n    valid_sentences = [s for s in sentences if s.strip()]\n    if len(valid_sentences) != 30:\n        err_infos.append(f\"句子数量为{len(valid_sentences)}非30句\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请详细描述一个繁忙的城市早晨，要求在描述中至少出现三次“嘈杂”，必须出现两次“行人”，并且至多出现一次“交通”，文中必须只能有20个句子（用中文句号或问号或感叹号分隔）。请确保文章的第10个句子（用中文句号或问号或感叹号分隔）以“开始了一天的生活”结尾。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    import json\n    \n    # 定义验证结果\n    check_code = True\n    reason = []\n    err_infos = []\n\n    # 检查响应格式\n    if not response.startswith(\"【答案开始】\"):\n        check_code = False\n        err_infos.append(\"响应未以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        check_code = False\n        err_infos.append(\"响应未以【答案结束】结尾\")\n    \n    # 提取答案内容\n    content = response[5:-5]  # 去除首尾标记\n    parts = content.split(\"******\")\n    if len(parts) != 2:\n        check_code = False\n        err_infos.append(\"答案分隔符数量错误\")\n        return json.dumps({\"check_code\": check_code, \"reason\": err_infos})\n    \n    # 验证每个答案\n    for idx, answer in enumerate(parts, 1):\n        # 检查句子数量\n        sentences = [s.strip() for s in re.split(r'[。？！]', answer) if s.strip()]\n        if len(sentences) != 20:\n            check_code = False\n            err_infos.append(f\"答案{idx}句子数量错误: {len(sentences)}句\")\n        \n        # 检查第10句结尾\n        if len(sentences) >= 10:\n            if not sentences[9].endswith(\"开始了一天的生活\"):\n                check_code = False\n                err_infos.append(f\"答案{idx}第10句结尾错误: '{sentences[9]}'\")\n        else:\n            check_code = False\n            err_infos.append(f\"答案{idx}句子数量不足10句\")\n        \n        # 检查关键词频率\n        count_zaoza = answer.count(\"嘈杂\")\n        count_xingren = answer.count(\"行人\")\n        count_jiaotong = answer.count(\"交通\")\n        \n        if count_zaoza < 3:\n            check_code = False\n            err_infos.append(f\"答案{idx}'嘈杂'出现次数不足: {count_zaoza}次\")\n        if count_xingren != 2:\n            check_code = False\n            err_infos.append(f\"答案{idx}'行人'出现次数错误: {count_xingren}次\")\n        if count_jiaotong > 1:\n            check_code = False\n            err_infos.append(f\"答案{idx}'交通'出现次数超限: {count_jiaotong}次\")\n    \n    return {\"check_code\": check_code, \"reason\": err_infos}"}
{"prompt": "蒙古包是蒙古族传统的住处，其独特的圆顶形状和轻便的结构使其适合游牧生活。蒙古包通常由木质框架和覆盖的毛毡或布制成，能够抵御极端的气候条件。蒙古包的内部布置也非常讲究，体现了蒙古族的文化和生活方式。蒙古包的历史可以追溯到公元前3世纪，至今仍在使用。它不仅是蒙古族文化的重要组成部分，也是世界文化遗产的一部分。蒙古包结构简单，但非常实用，能够在短时间内搭建和拆卸，非常适合游牧民族的生活方式。蒙古包的建筑原理和材料选择对现代可持续建筑有一定的启示意义。\n\n请描述蒙古包的历史和文化意义，并在文中必须提到以下词语：蒙古族、游牧、文化遗产。文章中只包含30个句子（用中文句号或问号或感叹号分隔），文章只有五个段落，每个段落用两个换行符“\n\n”分隔开来。在第二段中，“蒙古包”这个词务必至少出现两次。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查首尾标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少【答案开始】或【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 分割两个答案\n    answers = content.split(\"******\")\n    if len(answers) != 2:\n        err_infos.append(f\"答案分割错误，应用6个*分隔，实际分隔符数量: {len(answers)-1}\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        # 检查段落数量\n        paragraphs = [p.strip() for p in ans.split(\"\\n\\n\") if p.strip()]\n        if len(paragraphs) != 5:\n            err_infos.append(f\"答案{idx}段落数错误：需要5段，实际{len(paragraphs)}段\")\n            continue\n        \n        # 检查第二段蒙古包出现次数\n        second_para = paragraphs[1]\n        count_mgb = second_para.count(\"蒙古包\")\n        if count_mgb < 2:\n            err_infos.append(f\"答案{idx}第二段'蒙古包'出现次数不足：需要≥2次，实际{count_mgb}次\")\n        \n        # 合并全文检查句子总数\n        full_text = \"\".join(paragraphs)\n        sentences = [s.strip() for s in re.split(r'[。？！]', full_text) if s.strip()]\n        if len(sentences) != 30:\n            err_infos.append(f\"答案{idx}句子数错误：需要30句，实际{len(sentences)}句\")\n        \n        # 检查关键词\n        keywords = {\"蒙古族\", \"游牧\", \"文化遗产\"}\n        missing = [kw for kw in keywords if kw not in full_text]\n        if missing:\n            err_infos.append(f\"答案{idx}缺少关键词：{', '.join(missing)}\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请设计一个关于如何在家庭环境中培养孩子团队合作能力的建议，要求回答内容至少200个汉字，但不超过350个汉字。此外，第2个句子（用中文句号或问号或感叹号分隔）必须以“这对孩子的成长至关重要。”这句话结尾。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义原始指令\n    instruction = \"请设计一个关于如何在家庭环境中培养孩子团队合作能力的建议，要求回答内容至少200个汉字，但不超过350个汉字。此外，第2个句子（用中文句号或问号或感叹号分隔）必须以“这对孩子的成长至关重要。”这句话结尾。\"\n    \n    # 验证标记存在性\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"回答未包含必要的开始/结束标记\"}\n    \n    # 提取回答内容\n    start_index = response.index(\"【答案开始】\") + 6\n    end_index = response.index(\"【答案结束】\")\n    content = response[start_index:end_index].strip()\n    \n    # 验证指令重复部分\n    normalized_instruction = re.sub(r'\\s+', '', instruction)\n    normalized_start = re.sub(r'\\s+', '', content[:len(instruction)])\n    if normalized_instruction not in normalized_start:\n        return {\"check_code\": False, \"reason\": \"未正确重复原始指令要求\"}\n    \n    # 提取实际建议部分\n    advice_start = len(instruction)\n    advice_text = content[advice_start:].strip()\n    \n    # 验证建议长度\n    chinese_chars = re.findall(r'[一-龥]', advice_text)\n    char_count = len(chinese_chars)\n    if char_count < 200:\n        return {\"check_code\": False, \"reason\": f\"建议内容不足200汉字（实际{char_count}字）\"}\n    if char_count > 350:\n        return {\"check_code\": False, \"reason\": f\"建议内容超过350汉字（实际{char_count}字）\"}\n    \n    # 验证第二句话\n    sentences = re.split(r'[。？！]', advice_text)\n    valid_sentences = [s.strip() for s in sentences if s.strip()]\n    if len(valid_sentences) < 2:\n        return {\"check_code\": False, \"reason\": \"建议内容少于2个完整句子\"}\n    \n    second_sentence = valid_sentences[1]\n    if not second_sentence.endswith(\"这对孩子的成长至关重要\"):\n        return {\"check_code\": False, \"reason\": f\"第二句话结尾不符合要求：'{second_sentence[-10:]}'\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "描述一个旅行冒险故事，设定在一个完全未知的星球，但不允许使用“外星人”、“飞船”、“宇宙”这几个词。故事的字数至少200字，至多500字，并且以“在一个明媚的早晨”开头。文章应由四个段落组成，每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好有六个句子。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查标记完整性\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    if start_tag not in response or end_tag not in response:\n        errors.append(\"缺少【答案开始】/【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 提取故事内容\n    start_idx = response.find(start_tag) + len(start_tag)\n    end_idx = response.find(end_tag)\n    story = response[start_idx:end_idx].strip()\n    \n    # 1. 检查开头\n    if not story.startswith(\"在一个明媚的早晨\"):\n        errors.append(\"故事未以'在一个明媚的早晨'开头\")\n    \n    # 2. 检查字数\n    word_count = len(story)\n    if word_count < 200:\n        errors.append(f\"字数不足200字(当前:{word_count}字)\")\n    elif word_count > 500:\n        errors.append(f\"字数超过500字(当前:{word_count}字)\")\n    \n    # 3. 检查段落结构\n    paragraphs = [p.strip() for p in story.split('\\n\\n') if p.strip()]\n    if len(paragraphs) != 4:\n        errors.append(f\"段落数量错误(需要4段,当前:{len(paragraphs)}段)\")\n    \n    # 4. 检查第三段句子数\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2]\n        # 按中文标点分割句子\n        sentences = re.split(r'(?<=[。！？…])', third_para)\n        # 过滤空句子\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            errors.append(f\"第三段句子数错误(需要6句,当前:{len(sentences)}句)\")\n    else:\n        errors.append(\"缺少第三段落\")\n    \n    # 5. 检查禁用词\n    forbidden_words = [\"外星人\", \"飞船\", \"宇宙\"]\n    found_words = [word for word in forbidden_words if word in story]\n    if found_words:\n        errors.append(f\"包含禁用词: {','.join(found_words)}\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \";\".join(errors) if errors else \"\"\n    }"}
{"prompt": "在现代社会，健康饮食变得越来越重要。随着生活节奏的加快和工作压力的增加，许多人无法保证自己每天摄取足够的营养。因此，了解如何在忙碌的生活中保持健康的饮食习惯显得尤为重要。\n\n请你写一篇关于如何在繁忙的工作日中保持健康饮食习惯的文章。文章应包含6个段落，每个段落用两个换行符“\n\n”分隔开来。文章中必须包含\"厌食症\"和\"蛋白质\"这两个词语，在第四个段落中，“营养均衡”这个词务必恰好只出现两次，“健康”这个词务必至少出现三次。文章应出现23个句子（用中文句号或问号或感叹号分隔）。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查首尾标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取文章内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查段落数量和分隔符\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 6:\n        err_infos.append(f\"段落数量错误（应为6段，实际{len(paragraphs)}段）\")\n    \n    # 检查关键词存在性\n    if \"厌食症\" not in content:\n        err_infos.append(\"缺少关键词'厌食症'\")\n    if \"蛋白质\" not in content:\n        err_infos.append(\"缺少关键词'蛋白质'\")\n    \n    # 检查第四段特定关键词\n    if len(paragraphs) >= 4:\n        para4 = paragraphs[3]\n        eq_count = para4.count(\"营养均衡\")\n        health_count = para4.count(\"健康\")\n        \n        if eq_count != 2:\n            err_infos.append(f\"第四段'营养均衡'出现{eq_count}次（应为2次）\")\n        if health_count < 3:\n            err_infos.append(f\"第四段'健康'出现{health_count}次（至少需要3次）\")\n    else:\n        err_infos.append(\"无法检查第四段（段落不足）\")\n    \n    # 检查总句子数量\n    sentences = re.split(r'[。？！]', content)\n    valid_sentences = [s for s in sentences if s.strip()]\n    if len(valid_sentences) != 23:\n        err_infos.append(f\"句子数量错误（应为23句，实际{len(valid_sentences)}句）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"验证通过\"\n    }"}
{"prompt": "随着全球气候变化的加剧，环境保护与可持续发展成为全球关注的焦点。近年来，许多国家都在积极推进绿色能源和可再生资源的使用，以减少对化石燃料的依赖。这不仅能减少温室气体的排放，还能促进经济的可持续发展。在这样的背景下，世界各地的城市正在探索新的方法，以适应和应对这些变化。例如，城市农耕和垂直农业正在成为城市中越来越流行的概念。这些创新方法不仅有助于减少城市的碳足迹，还能提高粮食生产的效率和可及性。此外，教育和意识的提升也是实现可持续发展的关键因素之一。通过教育，人们可以更好地理解和参与到环境保护中，从而为未来的地球创造一个更加美好的环境。\n请撰写一篇关于“城市可持续发展与绿色创新”的文章，探讨如何通过创新技术和政策来推动城市的可持续发展。请确保文章标题用$()$标记，如$(XXXX)$。请确保文章由6个段落组成，每个段落之间用'～～'符号分隔。其中第3段的第8个汉字必须是“地”字。文章总句子数需为15个句子，其中第10个句子的第3个汉字必须是“物”字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化验证结果\n    check_code = True\n    err_infos = []\n    \n    # 1. 检查答案标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        check_code = False\n        err_infos.append(\"缺少答案开始/结束标记\")\n        return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容（移除标记）\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 2. 检查标题格式\n    title_match = re.search(r'\\$\\((.*?)\\)\\$', content)\n    if not title_match:\n        check_code = False\n        err_infos.append(\"标题未用$()$标记\")\n    else:\n        title = title_match.group(0)\n        content = content.replace(title, \"\", 1).strip()\n    \n    # 3. 检查段落分隔\n    paragraphs = [p.strip() for p in content.split('～～') if p.strip()]\n    if len(paragraphs) != 6:\n        check_code = False\n        err_infos.append(f\"段落数量错误: {len(paragraphs)}而非6个\")\n    \n    # 4. 检查第3段第8个汉字\n    if len(paragraphs) >= 3:\n        p3 = paragraphs[2]\n        hanzi_count = 0\n        for char in p3:\n            if '\\u4e00' <= char <= '\\u9fff':  # 汉字判断\n                hanzi_count += 1\n                if hanzi_count == 8:\n                    if char != '地':\n                        check_code = False\n                        err_infos.append(\"第3段第8个汉字不是'地'\")\n                    break\n        if hanzi_count < 8:\n            check_code = False\n            err_infos.append(\"第3段汉字不足8个\")\n    \n    # 5. 检查总句子数和第10句第3字\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    if len(sentences) != 15:\n        check_code = False\n        err_infos.append(f\"总句子数错误: {len(sentences)}而非15句\")\n    elif len(sentences) >= 10:\n        s10 = sentences[9]\n        hanzi_count = 0\n        for char in s10:\n            if '\\u4e00' <= char <= '\\u9fff':\n                hanzi_count += 1\n                if hanzi_count == 3:\n                    if char != '物':\n                        check_code = False\n                        err_infos.append(\"第10句第3个汉字不是'物'\")\n                    break\n        if hanzi_count < 3:\n            check_code = False\n            err_infos.append(\"第10句汉字不足3个\")\n    \n    return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos) if err_infos else \"\"}"}
{"prompt": "纸制品在我们的生活中扮演着重要角色，从书籍、包装到日常使用的笔记本，它们的生产和应用涉及多个领域。造纸工艺经过数百年的发展，从最初的手工制作到现在的机器化生产，造纸材料也从传统的木浆发展到环保型的竹浆、甘蔗渣等。许多国家已经开始大力推动再生纸的使用，以减少森林砍伐和环境污染。对于普通消费者来说，如何更好地选择和使用纸制品能够体现个人环保意识，同时也关系到自身生活质量的提升。了解不同类型纸制品的特性以及它们的适用场景，可以帮助人们做出更明智的选择。  \n\n请撰写一篇关于“如何选择适合自己的纸制品”的文章。请确保文章只分为四个段落（不要出现标题），每个段落之间用“～～”符号分隔。其中第三个段落中，必须恰好由六个句子（用中文句号或问号或感叹号分隔）组成。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 检查答案分隔符\n    parts = content.split(\"@@@@@@\")\n    if len(parts) != 2:\n        errors.append(f\"答案分隔符错误：需要1个'@@@@@@'分隔符，实际找到{len(parts)-1}个\")\n    \n    # 检查每个答案的段落结构\n    for i, part in enumerate(parts, 1):\n        # 检查段落分隔符\n        segments = part.split(\"～～\")\n        if len(segments) != 4:\n            errors.append(f\"答案{i}段落数量错误：需要4段，实际{len(segments)}段\")\n            continue\n        \n        # 检查第三段句子数量\n        third_segment = segments[2].strip()\n        if third_segment:\n            # 使用中文标点分割句子\n            sentences = re.split(r'[。？！]', third_segment)\n            # 过滤空句子\n            sentences = [s.strip() for s in sentences if s.strip()]\n            if len(sentences) != 6:\n                errors.append(f\"答案{i}第三段句子数量错误：需要6句，实际{len(sentences)}句\")\n        else:\n            errors.append(f\"答案{i}第三段内容为空\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "撰写一篇关于“家庭节能技巧”的文章，文章应只有6个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由8个句子（用中文句号或问号或感叹号分隔）组成。在文章中避免使用“电器”、“智能”、“设备”这三个词语，并且必须包含“环保”这个词。请在回复中详细解释并列出其中三种主要原因，使用“【技巧1】”、“【技巧2】”和“【技巧3】”作为主要技巧的占位符。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查首尾标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    answers = content.split(\"******\")\n    \n    # 验证答案数量\n    if len(answers) != 2:\n        err_infos.append(f\"需要2个答案，实际检测到{len(answers)}个\")\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        if not ans:\n            err_infos.append(f\"答案{idx}为空\")\n            continue\n        \n        # 检查段落结构\n        paragraphs = re.split(r'\\n{2,}', ans)\n        if len(paragraphs) != 6:\n            err_infos.append(f\"答案{idx}段落数错误（需要6段，实际{len(paragraphs)}段）\")\n        \n        # 检查第三段句子数\n        if len(paragraphs) >= 3:\n            sentences = re.split(r'[。？！]', paragraphs[2])\n            sentences = [s.strip() for s in sentences if s.strip()]\n            if len(sentences) != 8:\n                err_infos.append(f\"答案{idx}第三段需8个句子（实际{len(sentences)}句）\")\n        \n        # 检查关键词\n        if \"环保\" not in ans:\n            err_infos.append(f\"答案{idx}缺少关键词'环保'\")\n        for word in [\"电器\", \"智能\", \"设备\"]:\n            if word in ans:\n                err_infos.append(f\"答案{idx}包含禁用词'{word}'\")\n        \n        # 检查技巧占位符\n        for placeholder in [\"【技巧1】\", \"【技巧2】\", \"【技巧3】\"]:\n            if placeholder not in ans:\n                err_infos.append(f\"答案{idx}缺少占位符{placeholder}\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“城市绿化对生活质量的影响”的文章，请确保文章由14个句子（用中文句号或问号或感叹号分隔）组成。其中第6个句子不超过12个汉字。请在回复中详细解释并列出其中三种主要影响，使用“&影响1&”、“&影响2&”和“&影响3&”作为主要影响的占位符。请确保文章只出现3个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第1段至少要200个汉字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查响应是否以【答案开始】开头并以【答案结束】结尾\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"响应必须以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"响应必须以【答案结束】结尾\")\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取实际回答内容\n    content = response[5:-5]  # 去除首尾标记\n    \n    # 验证指令重复部分\n    required_instruction = (\n        \"请撰写一篇关于“城市绿化对生活质量的影响”的文章，请确保文章由14个句子（用中文句号或问号或感叹号分隔）组成。其中第6个句子不超过12个汉字。请在回复中详细解释并列出其中三种主要影响，使用“&影响1&”、“&影响2&”和“&影响3&”作为主要影响的占位符。请确保文章只出现3个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第1段至少要200个汉字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\"\n    )\n    \n    if not content.startswith(required_instruction):\n        err_infos.append(\"未正确重复指令要求\")\n    \n    # 提取两个答案\n    answers_section = content[len(required_instruction):]\n    answers = answers_section.split(\"@@@@@@\")\n    \n    # 验证答案数量\n    if len(answers) != 2:\n        err_infos.append(f\"应包含2个答案，实际找到{len(answers)}个\")\n    \n    # 验证每个答案\n    for i, answer in enumerate(answers, 1):\n        # 验证段落数量和分隔符\n        paragraphs = answer.split(\"～～\")\n        if len(paragraphs) != 3:\n            err_infos.append(f\"答案{i}应有3个段落，实际{len(paragraphs)}段\")\n        \n        # 验证第一段长度\n        if paragraphs:\n            chinese_chars = re.findall(r'[一-龥]', paragraphs[0])\n            if len(chinese_chars) < 200:\n                err_infos.append(f\"答案{i}第1段应≥200汉字，实际{len(chinese_chars)}字\")\n        \n        # 验证句子数量和第六句长度\n        sentences = re.split(r'[。？！]', answer)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        if len(sentences) != 14:\n            err_infos.append(f\"答案{i}应有14个句子，实际{len(sentences)}句\")\n        elif len(sentences) > 5:\n            sixth_sentence = re.sub(r'\\s+', '', sentences[5])  # 去除空格\n            if len(sixth_sentence) > 12:\n                err_infos.append(f\"答案{i}第6句应≤12汉字，实际'{sixth_sentence}'({len(sixth_sentence)}字)\")\n        \n        # 验证影响占位符\n        placeholders = [\"&影响1&\", \"&影响2&\", \"&影响3&\"]\n        for ph in placeholders:\n            if ph not in answer:\n                err_infos.append(f\"答案{i}缺少占位符{ph}\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"验证通过\" if not err_infos else \"; \".join(err_infos)\n    }"}
{"prompt": "请将下面文本中的前五个“熊猫”替换为“鲸鱼”，剩下的“熊猫”替换为“天鹅”，再将文本中的第五句话和第八句话调换顺序（每句话以中文句号作为分隔），其他句子的顺序不要变动，最后将最后一句话替换为“OVER”。直接返回修改后的文本，不要出现其他多余的内容。\n\n熊猫是一种可爱且受欢迎的动物，已成为中国的象征。熊猫凭借其独特的黑白毛色、憨态可掬的外表以及温顺的性格，在全球范围内广受喜爱。熊猫的生活习性非常独特，主要生活在中国的四川、陕西和甘肃等地的竹林中。熊猫是典型的食草动物，尤其偏爱竹子作为主要食物。熊猫的日常生活中大部分时间都在进食和休息，以维持其身体健康和能量需求。熊猫对竹子的依赖性极高，平均每天需要进食约12-38公斤的竹子，以满足其庞大的食物需求。然而，熊猫的栖息地日益减少，加上熊猫的繁殖率较低，使得它们成为了易危物种。近年来，通过保护区的建立和国际合作，熊猫的数量正在缓慢增加。熊猫不仅是生物多样性保护的关键物种，更象征着人类对自然环境的关注和努力。熊猫的保护和文化传播，也让全球各地的人们有机会进一步了解和喜爱这种中国的国宝。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    original_text = \"熊猫是一种可爱且受欢迎的动物，已成为中国的象征。熊猫凭借其独特的黑白毛色、憨态可掬的外表以及温顺的性格，在全球范围内广受喜爱。熊猫的生活习性非常独特，主要生活在中国的四川、陕西和甘肃等地的竹林中。熊猫是典型的食草动物，尤其偏爱竹子作为主要食物。熊猫的日常生活中大部分时间都在进食和休息，以维持其身体健康和能量需求。熊猫对竹子的依赖性极高，平均每天需要进食约12-38公斤的竹子，以满足其庞大的食物需求。然而，熊猫的栖息地日益减少，加上熊猫的繁殖率较低，使得它们成为了易危物种。近年来，通过保护区的建立和国际合作，熊猫的数量正在缓慢增加。熊猫不仅是生物多样性保护的关键物种，更象征着人类对自然环境的关注和努力。熊猫的保护和文化传播，也让全球各地的人们有机会进一步了解和喜爱这种中国的国宝。\"\n    \n    # 检查响应格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"响应格式错误：缺少答案标记\"}\n    \n    answer = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 执行标准替换和调整\n    def process_text(text):\n        # 统计熊猫出现次数（共11次）\n        parts = text.split('熊猫')\n        if len(parts) != 12:  # 11次分割产生12部分\n            return None\n        \n        # 前5次替换为鲸鱼，后6次替换为天鹅\n        processed = parts[0]\n        for i in range(1, 12):\n            processed += \"鲸鱼\" + parts[i] if i <= 5 else \"天鹅\" + parts[i]\n        \n        # 分割句子并调整顺序\n        sentences = [s.strip() for s in processed.split('。') if s.strip()]\n        if len(sentences) != 10:\n            return None\n        \n        # 交换第5句(索引4)和第8句(索引7)\n        sentences[4], sentences[7] = sentences[7], sentences[4]\n        # 替换最后一句为OVER\n        sentences[-1] = \"OVER\"\n        \n        # 重新组合文本（前9句加句号，最后不加）\n        return '。'.join(sentences[:-1]) + '。' + sentences[-1]\n    \n    expected = process_text(original_text)\n    if expected is None:\n        return {\"check_code\": False, \"reason\": \"文本处理基础错误\"}\n    \n    # 验证答案内容\n    if answer != expected:\n        # 详细比较差异\n        if \"鲸鱼\" not in answer or \"天鹅\" not in answer:\n            return {\"check_code\": False, \"reason\": \"关键词替换错误\"}\n        \n        sent_ans = [s.strip() for s in answer.split('。') if s.strip()]\n        sent_exp = expected.split('。')\n        \n        if len(sent_ans) != 10:\n            return {\"check_code\": False, \"reason\": f\"句子数量错误（应为10句，实际{len(sent_ans)}句）\"}\n        \n        if sent_ans[4] != sent_exp[4] or sent_ans[7] != sent_exp[7]:\n            return {\"check_code\": False, \"reason\": \"第5句和第8句未正确调换\"}\n        \n        if sent_ans[-1] != \"OVER\":\n            return {\"check_code\": False, \"reason\": \"最后一句未替换为OVER\"}\n        \n        return {\"check_code\": False, \"reason\": \"未知内容差异\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于家庭聚餐的文章，内容必须在100至200个汉字之间。文章应只出现4个段落，每个段落之间用'～～'符号分隔。在第二个段落中，“温馨”这个词至少出现两次。请确保第一个句子（用中文句号或问号或感叹号分隔）以“在这个特别的日子”开头，并且第四个句子以“留下了深刻的印象”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取实际内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    if not content:\n        err_infos.append(\"内容为空\")\n        return {\"check_code\": False, \"reason\": \",\".join(err_infos)}\n    \n    # 检查字数（100-200汉字）\n    chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', content)\n    char_count = len(chinese_chars)\n    if char_count < 100 or char_count > 200:\n        err_infos.append(f\"字数不符合要求（当前:{char_count}字）\")\n    \n    # 检查段落分隔符和段落数量\n    paragraphs = [p.strip() for p in content.split('～～') if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误（当前:{len(paragraphs)}段）\")\n    else:\n        # 检查第二段中\"温馨\"出现次数\n        if paragraphs[1].count(\"温馨\") < 2:\n            err_infos.append(\"第二段中'温馨'出现少于2次\")\n        \n        # 检查首句开头\n        first_sentences = re.split(r'[。？！]', paragraphs[0].strip())\n        if not first_sentences[0].startswith(\"在这个特别的日子\"):\n            err_infos.append(\"首句未以'在这个特别的日子'开头\")\n        \n        # 检查第四句结尾\n        all_text = re.sub(r'～～', '', content)  # 移除段落分隔符\n        sentences = [s.strip() for s in re.split(r'([。？！])', all_text) if s.strip() and s not in \"。？！\"]\n        if len(sentences) >= 4:\n            if not sentences[3].endswith(\"留下了深刻的印象\"):\n                err_infos.append(\"第四句未以'留下了深刻的印象'结尾\")\n        else:\n            err_infos.append(\"句子总数不足4句\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \",\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "首先，将下列文本中的第5个句子的“析”字删除；然后，再将上一步修改过的文本中的“面”字全部加上“--”，格式应该为“--面--”；然后，再将上一步修改过的文本中第3个句子的汉字和标点符号按照倒序排列；最后，将上一步修改过的文本中的第35个汉字和第59个汉字互换位置。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n音乐学是一门研究音乐的学科，涉及音乐理论、历史、文化和实践等多个方面。音乐学家通过分析音乐作品、研究作曲家及其时代背景，来理解音乐在社会中的作用和影响。音乐不仅是艺术的表现，也是文化交流的重要载体。不同文化背景下的音乐风格和表现形式各具特色，反映了各民族的历史和生活方式。音乐学的研究方法多样，包括文献分析、田野调查、实验研究等。随着科技的发展，音乐学的研究工具也不断更新，音频分析软件和数字化资源的使用使得音乐学的研究更加精准和深入。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 提取实际答案\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        return {\"check_code\": False, \"reason\": \"missing_markers\"}\n    \n    actual_answer = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 原始文本\n    original_text = \"音乐学是一门研究音乐的学科，涉及音乐理论、历史、文化和实践等多个方面。音乐学家通过分析音乐作品、研究作曲家及其时代背景，来理解音乐在社会中的作用和影响。音乐不仅是艺术的表现，也是文化交流的重要载体。不同文化背景下的音乐风格和表现形式各具特色，反映了各民族的历史和生活方式。音乐学的研究方法多样，包括文献分析、田野调查、实验研究等。随着科技的发展，音乐学的研究工具也不断更新，音频分析软件和数字化资源的使用使得音乐学的研究更加精准和深入。\"\n    \n    # 步骤1: 删除第5个句子的\"析\"字\n    sentences = [s.strip() for s in original_text.split('。') if s]\n    if len(sentences) < 5:\n        return {\"check_code\": False, \"reason\": \"sentence_count\"}\n    sentences[4] = sentences[4].replace('析', '')\n    step1_text = '。'.join(sentences) + '。'\n    \n    # 步骤2: \"面\"字添加\"--\"\n    step2_text = step1_text.replace('面', '--面--')\n    \n    # 步骤3: 倒序第3个句子\n    sentences2 = [s.strip() for s in step2_text.split('。') if s]\n    if len(sentences2) < 3:\n        return {\"check_code\": False, \"reason\": \"sentence_count_step3\"}\n    sentences2[2] = sentences2[2][::-1]  # 整个句子倒序\n    step3_text = '。'.join(sentences2) + '。'\n    \n    # 步骤4: 交换第35和第59个汉字\n    char_list = list(step3_text)\n    if len(char_list) < 59:\n        return {\"check_code\": False, \"reason\": \"text_length\"}\n    # 位置索引调整（从1开始计数）\n    pos35 = 34  # 第35个字符索引\n    pos59 = 58  # 第59个字符索引\n    char_list[pos35], char_list[pos59] = char_list[pos59], char_list[pos35]\n    correct_result = ''.join(char_list)\n    \n    # 验证结果\n    if actual_answer == correct_result:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": \"result_mismatch\"}"}
{"prompt": "撰写一篇描述“城市生活的节奏与压力”的文章，文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。确保第二个段落不含任何标点符号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答开头缺少【答案开始】标记\")\n    if \"【答案结束】\" not in response:\n        errors.append(\"回答缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    start_pattern = r\"【答案开始】([\\s\\S]*)【答案结束】\"\n    match = re.search(start_pattern, response)\n    if not match:\n        errors.append(\"无法定位答案内容\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    content = match.group(1).strip()\n    \n    # 检查内容中是否包含多余标记\n    if \"【答案开始】\" in content or \"【答案结束】\" in content:\n        errors.append(\"答案内容中包含多余标记\")\n    \n    # 分割段落并验证数量\n    paragraphs = re.split(r'\\n{2,}', content)  # 连续两个以上换行符作为分隔\n    filtered_paragraphs = [p.strip() for p in paragraphs if p.strip()]\n    \n    if len(filtered_paragraphs) != 4:\n        errors.append(f\"实际段落数量为{len(filtered_paragraphs)}，应为4\")\n    \n    # 验证第二段落标点符号\n    if len(filtered_paragraphs) >= 2:\n        second_para = filtered_paragraphs[1]\n        if re.search(r'[,.?!;:\"\\'，。？！；：“”‘’]', second_para):\n            errors.append(\"第二段落包含标点符号\")\n    else:\n        errors.append(\"无法获取第二段落\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "在现代科技的推动下，智能家居设备逐渐成为日常生活的一部分。这些设备涵盖了从智能灯泡到全自动吸尘器等多种产品，为家庭带来了便捷的生活体验。然而，随着智能家居的普及，人们也开始关注其潜在的隐私安全问题。智能家居设备通常连接至互联网，并通过手机应用或语音助手进行控制。这种连接虽然带来了便利，但也可能成为黑客攻击的目标。因此，了解智能家居设备的安全性变得尤为重要。用户需要意识到使用这些设备可能带来的风险，并采取适当的措施来保护自己的隐私，如定期更新设备的固件、设置强密码以及使用网络安全软件来监控设备的连接情况。\n\n请撰写一篇文章，探讨智能家居设备带来的安全隐患以及用户可以采取哪些措施来保护自己的隐私。请在文章中详细解释并列出三种主要的安全隐患，使用“&隐患1&”、“&隐患2&”和“&隐患3&”作为主要隐患的占位符。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。内容不能出现中文逗号。文章需要以“安全从小事做起。”这句话结尾。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案格式错误：必须以【答案开始】开头并以【答案结束】结尾\"}\n    \n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    parts = content.split(\"@@@@@@\")\n    if len(parts) != 2:\n        return {\"check_code\": False, \"reason\": \"答案分隔错误：必须包含且仅包含一个@@@@@@分隔符\"}\n    \n    for i, answer in enumerate(parts, 1):\n        # 检查段落分隔符\n        paragraphs = answer.split(\"～～\")\n        if len(paragraphs) != 4:\n            return {\"check_code\": False, \"reason\": f\"答案{i}段落数错误：需要4个段落，实际{len(paragraphs)}段\"}\n        \n        # 检查结尾语句\n        if not paragraphs[-1].strip().endswith(\"安全从小事做起。\"):\n            return {\"check_code\": False, \"reason\": f\"答案{i}结尾错误：必须以'安全从小事做起。'结束\"}\n        \n        # 检查占位符\n        for placeholder in [\"&隐患1&\", \"&隐患2&\", \"&隐患3&\"]:\n            if placeholder not in answer:\n                return {\"check_code\": False, \"reason\": f\"答案{i}缺失占位符：缺少{placeholder}\"}\n        \n        # 检查中文逗号\n        if \"，\" in answer:\n            return {\"check_code\": False, \"reason\": f\"答案{i}包含中文逗号：内容中禁止使用中文逗号\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "昆虫在生态系统中扮演着重要的角色，它们不仅是许多动物的食物来源，还参与了植物的授粉和分解有机物的过程。然而，近年来，由于环境污染、气候变化和栖息地破坏等原因，全球昆虫数量正在急剧下降。特别是在城市化进程加剧的地区，昆虫的生存环境受到了极大的威胁。这种趋势不仅影响了生物多样性，还对农业和生态系统的稳定性造成了不利影响。为了解决这一问题，世界各地的科学家和环保组织正在积极采取措施，保护昆虫栖息地，减少有害农药的使用，促进有机农业的发展。\n\n\n请写一篇关于如何保护城市中的昆虫栖息地的文章，要求文章包含具体的措施和建议，并详细解释每个措施的原因。文章中不得出现“人类”、“发展”、“未来”这三个词语。文章的每个句子必须至少10个字，最多15个字。文章结尾要求以“保护昆虫，就是保护我们自己。”这句话结束。请在回复中详细解释并列出其中三种主要措施，使用“【措施1】”、“【措施2】”和“【措施3】”作为主要措施的占位符。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取实际内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 检查禁用词\n    forbidden_words = [\"人类\", \"发展\", \"未来\"]\n    for word in forbidden_words:\n        if word in content:\n            err_infos.append(f\"包含禁用词：{word}\")\n    \n    # 检查句子长度\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    for i, s in enumerate(sentences):\n        if len(s) < 10 or len(s) > 15:\n            err_infos.append(f\"第{i+1}句长度不符：'{s}'({len(s)}字)\")\n    \n    # 检查固定结尾\n    if not content.endswith(\"保护昆虫，就是保护我们自己。\"):\n        err_infos.append(\"结尾未按要求结束\")\n    \n    # 检查措施占位符\n    required_tags = [\"【措施1】\", \"【措施2】\", \"【措施3】\"]\n    for tag in required_tags:\n        if tag not in content:\n            err_infos.append(f\"缺少措施标记：{tag}\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于“如何提升睡眠质量”的文章。在文章中需要列出三种主要方法，并使用“&方法1&”、“&方法2&”和“&方法3&”作为主要方法的占位符。此外，要求第二个句子（用中文句号或问号或感叹号分隔）必须以“这对身体健康至关重要。”这几个字结尾。要求模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查开始结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 检查答案分隔符\n    parts = content.split(\"@@@@@@\")\n    if len(parts) != 2:\n        err_infos.append(f\"答案分隔符错误，应包含6个@分隔的两个答案，实际分隔得到{len(parts)}部分\")\n    \n    # 检查每个答案\n    for i, part in enumerate(parts, 1):\n        # 检查占位符\n        for placeholder in [f\"&方法{j}&\" for j in range(1,4)]:\n            if placeholder not in part:\n                err_infos.append(f\"答案{i}缺少占位符{placeholder}\")\n        \n        # 检查第二个句子结尾\n        sentences = re.split(r'([。？！])', part)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        if len(sentences) < 3:  # 因包含分隔符，实际句子数为len//2\n            err_infos.append(f\"答案{i}句子数量不足，无法定位第二个句子\")\n        else:\n            second_sentence = sentences[2] + sentences[3] if len(sentences) > 3 else \"\"\n            if not second_sentence.endswith(\"这对身体健康至关重要。\"):\n                err_infos.append(f\"答案{i}的第二个句子结尾不符合要求，应为'这对身体健康至关重要。'，实际为'{second_sentence[:20]}...'\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "气候变化已成为全球关注的重大问题，它不仅影响自然环境，也对人类的经济和社会发展带来挑战。科学研究表明，温室气体的排放是导致全球气温上升的主要原因之一，其中二氧化碳是最主要的温室气体之一。由于工业革命以来人类活动的加剧，化石燃料的大量使用使得大气中的二氧化碳浓度显著增加，进而导致全球气候变暖。这种变化带来了极端天气、海平面上升、生物多样性减少等一系列问题。各国政府和组织已开始采取措施，如制定碳排放目标、推广可再生能源等，以减缓气候变化的影响。然而，公众的参与和支持也是实现这些目标的关键。因此，了解气候变化的原因和影响，以及采取适当的行动来应对这些挑战，是每个人都应关注的重要议题。\n\n请撰写一篇关于“气候变化与个人责任”的文章。请确保文章标题用$()$标记，如$(xxx)$。文章必须以“近年来”这几个字开头，并且恰好由14个句子组成。第9个句子的第3个汉字必须是“是”字。此外，第5个句子必须不多于12个汉字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n\n    # 验证答案结构\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"答案缺少开始/结束标记\"}\n    \n    content = response.split(\"【答案开始】\")[1].split(\"【答案结束】\")[0].strip()\n    if content.count('@@@@@@') != 1:\n        return {\"check_code\": False, \"reason\": \"答案分隔符错误\"}\n    \n    ans1, ans2 = [a.strip() for a in content.split('@@@@@@', 1)]\n    results = []\n    \n    # 验证单个答案\n    def validate_ans(ans, idx):\n        errors = []\n        # 标题验证\n        title_match = re.search(r'\\$\\(.*?\\)\\$', ans)\n        if not title_match:\n            errors.append(f\"答案{idx}缺少$()$标题标记\")\n        elif not ans.startswith(title_match.group()):\n            errors.append(f\"答案{idx}标题未置于开头\")\n        \n        # 正文提取\n        body = re.sub(r'\\$\\(.*?\\)\\$', '', ans, count=1).strip()\n        if not body.startswith(\"近年来\"):\n            errors.append(f\"答案{idx}未以'近年来'开头\")\n        \n        # 句子分割\n        sentences = re.split(r'[。？！]', body)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 14:\n            errors.append(f\"答案{idx}句子数量应为14（实际:{len(sentences)}）\")\n        else:\n            # 第5句验证\n            if len(re.findall(r'[\\u4e00-\\u9fa5]', sentences[4])) > 12:\n                errors.append(f\"答案{idx}第5句超过12个汉字\")\n            # 第9句验证\n            if len(sentences) > 8:\n                chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', sentences[8])\n                if len(chinese_chars) < 3 or chinese_chars[2] != '是':\n                    errors.append(f\"答案{idx}第9句第3个汉字不是'是'\")\n        return errors\n    \n    # 验证两个答案\n    results.extend(validate_ans(ans1, 1))\n    results.extend(validate_ans(ans2, 2))\n    \n    if results:\n        return {\"check_code\": False, \"reason\": \"; \".join(results)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请描述一个你参加的音乐节的体验。文章应只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“音乐”这个词务必至少出现三次。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查是否包含开始和结束标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": [\"答案缺少开始或结束标记\"]}\n    \n    # 提取答案内容\n    start_idx = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.find(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查段落结构\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": [f\"段落数量错误（需要4段，实际{len(paragraphs)}段）\"]}\n    \n    # 检查第二段落中的\"音乐\"出现次数\n    music_count = len(re.findall(r\"音乐\", paragraphs[1]))\n    if music_count < 3:\n        return {\"check_code\": False, \"reason\": [f\"第二段中'音乐'出现次数不足（需要≥3次，实际{music_count}次）\"]}\n    \n    # 检查多余内容\n    if response[:response.find(\"【答案开始】\")] or response[response.find(\"【答案结束】\") + len(\"【答案结束】\"):]:\n        return {\"check_code\": False, \"reason\": [\"答案外部存在多余内容\"]}\n    \n    return {\"check_code\": True, \"reason\": []}"}
{"prompt": "撰写一篇关于城市交通发展的文章，文章应只出现六个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取内容部分\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[5:-5].strip()  # 移除标记\n    \n    # 验证段落结构\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 6:\n        err_infos.append(f\"段落数量错误：需要6段，实际{len(paragraphs)}段\")\n    \n    # 验证第三段落句子数\n    if len(paragraphs) >= 3:\n        # 使用中文标点分割句子并过滤空字符串\n        sentences = [s.strip() for s in re.split(r'[。？！]', paragraphs[2]) if s.strip()]\n        if len(sentences) != 6:\n            err_infos.append(f\"第三段句子数错误：需要6句，实际{len(sentences)}句\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"验证通过\"\n    }"}
{"prompt": "请描述一下你对现代城市交通系统的优化建议，并以‘在我看来’这几个字开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查是否包含答案开始和结束标记\n    if not re.search(r'^【答案开始】', response) or not re.search(r'【答案结束】$', response):\n        return {\"check_code\": False, \"reason\": \"回答缺少【答案开始】或【答案结束】标记\"}\n    \n    # 提取标记之间的内容\n    content = re.search(r'【答案开始】([\\s\\S]*)【答案结束】', response)\n    if not content:\n        return {\"check_code\": False, \"reason\": \"无法提取回答内容\"}\n    content = content.group(1).strip()\n    \n    # 检查是否以指定开头\n    if not content.startswith('在我看来'):\n        return {\"check_code\": False, \"reason\": \"回答没有以'在我看来'开头\"}\n    \n    # 检查是否包含多余标记\n    if '【答案开始】' in content or '【答案结束】' in content:\n        return {\"check_code\": False, \"reason\": \"回答内容中包含多余的标记\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在日常生活中，我们经常会接触到各种各样的烹饪方式和食材搭配。食物的风味不仅仅取决于食材本身，还受到烹饪手法、调料配比以及环境条件的影响。例如，在制作一道简单的家常菜时，炒、煮、蒸等不同的烹饪方式会带来截然不同的口感，而调料的比例变化又会直接影响菜肴的风味层次。理解这些烹饪基本知识可以帮助我们更好地发挥创造力，制作出独具特色的菜品。  \n\n请根据你对烹饪的理解，设想并详细描述一道创意菜品的制作过程。这道菜品需要以“番茄”和“鸡肉”为主要食材，并使用至少两种烹饪方式（例如炒、烤、蒸等）。请确保文章中包括具体的食材准备步骤、烹饪手法以及最终呈现的菜品效果。文章中“酸甜”一词出现的次数不得少于2次；“嫩滑”一词必须恰好出现3次；“香气”一词出现的次数不得超过1次。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append('回答未以\"【答案开始】\"开头')\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append('回答未以\"【答案结束】\"结尾')\n    \n    if err_infos:\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取标记间的内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    # 检查关键词频率\n    if content.count(\"酸甜\") < 2:\n        err_infos.append(f'\"酸甜\"出现次数少于2次（当前：{content.count(\"酸甜\")}次）')\n    if content.count(\"嫩滑\") != 3:\n        err_infos.append(f'\"嫩滑\"未恰好出现3次（当前：{content.count(\"嫩滑\")}次）')\n    if content.count(\"香气\") > 1:\n        err_infos.append(f'\"香气\"出现超过1次（当前：{content.count(\"香气\")}次）')\n    \n    return {\"check_code\": len(err_infos) == 0, \"reason\": err_infos}"}
{"prompt": "请详细描写一种你设想的创新型厨具，并解释其独特功能和使用场景。请在回答中明确列出“&特点1&”、“&特点2&”和“&特点3&”作为核心功能的占位符，并具体说明它们的意义。文章只能有4个段落（不要出现标题），每个段落之间用“～～”分隔。在第2段中，“便捷”这个词必须至少出现2次，“环保”这个词最多出现3次。回答内容字数必须至少500个汉字，但不超过1200个汉字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 错误信息收集\n    err_infos = []\n    \n    # 检查答案标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response or end_marker not in response:\n        err_infos.append(\"缺失答案开始/结束标记\")\n        return {\"check_code\": False, \"reason\": \",\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(start_marker):-len(start_marker)].strip()\n\n    s = \"请详细描写一种你设想的创新型厨具，并解释其独特功能和使用场景。请在回答中明确列出“&特点1&”、“&特点2&”和“&特点3&”作为核心功能的占位符，并具体说明它们的意义。文章只能有4个段落（不要出现标题），每个段落之间用“～～”分隔。在第2段中，“便捷”这个词必须至少出现2次，“环保”这个词最多出现3次。回答内容字数必须至少500个汉字，但不超过1200个汉字。\"\n    if not content.startswith(s):\n        return {\"check_code\": False, \"reason\": \",\".join(err_infos)}\n    content = content.replace(s, \"\").strip()\n    \n    # 验证段落结构\n    paragraphs = [k for k in content.split(\"～～\") if k.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误（实际:{len(paragraphs)}/要求:4）\")\n    \n    # 检查第二段关键词\n    if len(paragraphs) >= 2:\n        para2 = paragraphs[1]\n        if para2.count(\"便捷\") < 2:\n            err_infos.append(f\"第二段'便捷'出现不足2次（实际:{para2.count('便捷')}）\")\n        if para2.count(\"环保\") > 3:\n            err_infos.append(f\"第二段'环保'超过3次（实际:{para2.count('环保')}）\")\n    \n    # 检查占位符\n    placeholders = [\"&特点1&\", \"&特点2&\", \"&特点3&\"]\n    for ph in placeholders:\n        if ph not in content:\n            err_infos.append(f\"缺失占位符{ph}\")\n    \n    # 检查汉字字数\n    hanzi_chars = re.findall(r'[一-龥]', content)\n    hanzi_count = len(hanzi_chars)\n    if hanzi_count < 500:\n        err_infos.append(f\"字数不足500字（实际:{hanzi_count}）\")\n    if hanzi_count > 1200:\n        err_infos.append(f\"字数超过1200字（实际:{hanzi_count}）\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \",\".join(err_infos) if err_infos else \"验证通过\"\n    }"}
{"prompt": "随着科技的快速发展，智慧城市的概念正在全球范围内广泛应用。智慧城市利用物联网、云计算和大数据等技术，提高城市管理效率，优化资源配置，改善市民生活质量。智慧城市的核心在于通过智能技术来实现城市的可持续发展和居民的幸福感。一个智慧城市的建设涉及方方面面，包括交通管理、环境监测、公共安全、能源管理和市民服务等领域。智慧交通系统通过实时交通数据分析，优化交通信号和行驶路线，从而减少拥堵。环境监测系统则可以通过传感器网络实时监测空气质量和噪音水平，保障市民健康。与此同时，智慧城市还强调市民参与，通过开放数据平台，市民可以提出建议和反馈，促进城市治理的透明化和民主化。\n\n请你设计一个只有三个段落的智慧城市应用场景描述，段落之间用两个换行符“\n\n”分隔开来。在第一个段落中，必须刚好由四个句子组成。整个回答的内容不能出现中文逗号。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"Missing start tag 【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"Missing end tag 【答案结束】\")\n    \n    # 提取内容主体\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 验证答案分隔符\n    answers = content.split(\"******\")\n    if len(answers) != 2:\n        err_infos.append(f\"Found {len(answers)} answers separated by asterisks instead of 2\")\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers):\n        ans = ans.strip()\n        \n        # 检查中文逗号\n        if \"，\" in ans:\n            err_infos.append(f\"Answer {i+1} contains Chinese comma\")\n        \n        # 检查段落结构\n        paragraphs = re.split(r'\\n{2,}', ans)\n        if len(paragraphs) != 3:\n            err_infos.append(f\"Answer {i+1} has {len(paragraphs)} paragraphs instead of 3\")\n            continue\n        \n        # 检查第一段落句子数量\n        first_para = paragraphs[0].strip()\n        sentences = re.findall(r'[^.!?]+[.!?]', first_para)\n        if len(sentences) != 4:\n            err_infos.append(f\"Answer {i+1} first paragraph has {len(sentences)} sentences instead of 4\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于现代城市交通拥堵及其解决方案的短文，要求以“在当今的城市中”开头，并以“这是我们共同的责任。”结尾。文章只有25个句子（用中文句号或问号或感叹号分隔）。请在回复中详细解释并列出其中四种主要解决方案，使用“【方案1】”、“【方案2】”、“【方案3】”和“【方案4】”作为主要解决方案的占位符。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查答案标记完整性\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少答案开始标记\")\n    if \"【答案结束】\" not in response:\n        err_infos.append(\"缺少答案结束标记\")\n    \n    # 提取答案核心内容\n    content = response.split(\"【答案开始】\")[-1].split(\"【答案结束】\")[0].strip()\n    \n    # 检查指令重复部分（截取关键特征）\n    required_phrases = [\n        \"请写一篇关于现代城市交通拥堵及其解决方案的短文\",\n        \"以“在当今的城市中”开头\",\n        \"以“这是我们共同的责任。”结尾\",\n        \"文章只有25个句子\",\n        \"【方案1】、【方案2】、【方案3】、【方案4】\"\n    ]\n    missing_phrases = [p for p in required_phrases if p not in content]\n    if missing_phrases:\n        err_infos.append(f\"缺失指令要求: {','.join(missing_phrases)}\")\n    \n    # 提取实际文章内容（指令重复后的部分）\n    article_start = content.find(\"这是我们共同的责任。\")  # 定位指令结束特征\n    if article_start == -1:\n        article_content = content\n    else:\n        article_content = content[content.find(\"。\", article_start) + 1:]\n    \n    # 检查文章开头结尾\n    if not article_content.startswith(\"在当今的城市中\"):\n        err_infos.append(\"开头不符合要求\")\n    if not article_content.endswith(\"这是我们共同的责任。\"):\n        err_infos.append(\"结尾不符合要求\")\n    \n    # 统计句子数量\n    sentences = re.split(r'[。？！]', article_content)\n    valid_sentences = [s for s in sentences if s.strip() and len(s.strip()) > 1]\n    if len(valid_sentences) != 25:\n        err_infos.append(f\"句子数量应为25句，实际为{len(valid_sentences)}句\")\n    \n    # 检查方案占位符\n    solutions = [\"【方案1】\", \"【方案2】\", \"【方案3】\", \"【方案4】\"]\n    missing_sol = [s for s in solutions if s not in article_content]\n    if missing_sol:\n        err_infos.append(f\"缺失解决方案占位符: {','.join(missing_sol)}\")\n    \n    # 检查多余内容\n    if \"解析\" in content or \"注释\" in content:\n        err_infos.append(\"包含多余的解释性内容\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"验证通过\"\n    }"}
{"prompt": "在今天的社会中，数字支付已经成为人们日常生活中不可或缺的一部分。随着技术的进步，数字支付的形式变得多样化，从移动支付、二维码支付到人脸识别支付，各种新兴支付方式层出不穷。尽管这些技术提高了支付的便利性，但也引发了关于安全性和隐私的广泛讨论。许多人担心，随着越来越多的个人数据被收集和存储，如何确保这些数据的安全成为了一个重大挑战。尤其是在信息泄露事件频发的背景下，消费者的信任问题显得尤为突出。\n\n请撰写一篇关于数字支付的文章，详细描述其在现代社会中的影响，并探讨其面临的主要挑战和未来可能的发展方向。在文章中，至少使用四次“数字安全”这个词语，必须使用两次“便捷性”，并最多使用三次“隐私”。文章长度应在150至250个汉字之间。请确保文章的第三个句子以“随着科技的进步”开头。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n\n    err_infos = []\n    \n    # 检查首尾标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"答案未包含指定首尾标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    if \"@@@@@@\" not in content:\n        err_infos.append(\"答案未用@@@@@@分隔\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    answers = [ans.strip() for ans in content.split(\"@@@@@@\") if ans.strip()]\n    if len(answers) != 2:\n        err_infos.append(f\"需要2个答案，实际得到{len(answers)}个\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        # 汉字数量检查\n        chinese_chars = re.findall(r'[一-龥]', ans)\n        if not (150 <= len(chinese_chars) <= 250):\n            err_infos.append(f\"答案{idx}汉字数({len(chinese_chars)})超出150-250范围\")\n        \n        # 关键词计数\n        if answers.count(\"数字安全\") < 4:\n            err_infos.append(f\"答案{idx}'数字安全'出现次数不足4次\")\n        if answers.count(\"便捷性\") != 2:\n            err_infos.append(f\"答案{idx}'便捷性'未出现2次\")\n        if answers.count(\"隐私\") > 3:\n            err_infos.append(f\"答案{idx}'隐私'出现超过3次\")\n        \n        # 句子结构检查\n        sentences = re.split(r'[。？！]', ans)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) < 3:\n            err_infos.append(f\"答案{idx}句子数量不足3句\")\n        else:\n            if not sentences[2].startswith(\"随着科技的进步\"):\n                err_infos.append(f\"答案{idx}第三句不以'随着科技的进步'开头\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请撰写一篇关于“城市绿化对现代生活的影响”的文章。请在文章中至少使用三次“生态”和“城市”，并确保“环境”一词最多出现两次。文章应包含五个段落，每个段落之间用'～～'符号分隔，其中第3段必须至少包含100个汉字。请确保文章标题用$()$标记，如$(城市绿化的现代意义)$。最后以“绿色城市将引领未来的和谐生活。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        return {\"check_code\": False, \"reason\": \"答案标记缺失或位置错误\"}\n    \n    content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 验证标题格式\n    if not re.search(r'\\$\\(.*?\\)\\$', content):\n        errors.append(\"标题未用$()$标记\")\n    \n    # 分割段落\n    paragraphs = [p.strip() for p in content.split('～～') if p.strip()]\n    \n    # 验证段落数量\n    if len(paragraphs) < 5:\n        errors.append(f\"段落数量不足5段(实际:{len(paragraphs)}段)\")\n    \n    # 验证第三段长度\n    if len(paragraphs) >= 3:\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', paragraphs[2])\n        if len(chinese_chars) < 100:\n            errors.append(f\"第三段不足100汉字(实际:{len(chinese_chars)}字)\")\n    elif len(paragraphs) >= 1:  # 段落不足时特殊处理\n        errors.append(\"第三段落缺失\")\n    \n    # 关键词计数\n    ecology_count = len(re.findall(r'生态', content))\n    city_count = len(re.findall(r'城市', content))\n    env_count = len(re.findall(r'环境', content))\n    \n    if ecology_count < 3:\n        errors.append(f\"'生态'出现不足3次(实际:{ecology_count}次)\")\n    if city_count < 3:\n        errors.append(f\"'城市'出现不足3次(实际:{city_count}次)\")\n    if env_count > 2:\n        errors.append(f\"'环境'出现超过2次(实际:{env_count}次)\")\n    \n    # 验证结尾\n    if not content.rstrip().endswith(\"绿色城市将引领未来的和谐生活。\"):\n        errors.append(\"结尾语句不符合要求\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请创作一个关于科技对教育影响的短篇故事，故事中必须包含“互联”这个词。故事应详细描述其中三种主要影响，使用“【影响1】”、“【影响2】”和“【影响3】”作为主要影响的占位符。文章只应分为四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。确保第二个段落不含任何标点符号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from string import punctuation\n    \n    # 中文标点符号（常见）\n    chinese_punctuation = \"。？！，、；：“”‘’（）【】《》…—～·\"\n    all_punctuation = punctuation + chinese_punctuation\n    \n    # 验证标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    reason = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(start_marker):\n        reason.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(end_marker):\n        reason.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取内容\n    content = response[len(start_marker):-len(end_marker)].strip() if response.startswith(start_marker) and response.endswith(end_marker) else response\n    \n    # 检查关键词\n    if \"互联\" not in content:\n        reason.append(\"故事中未包含'互联'一词\")\n    \n    # 检查影响标记\n    for marker in [\"【影响1】\", \"【影响2】\", \"【影响3】\"]:\n        if marker not in content:\n            reason.append(f\"缺少必要标记: {marker}\")\n    \n    # 段落验证\n    paragraphs = [p.strip() for p in re.split(r'\\n{2,}', content) if p.strip()]\n    if len(paragraphs) != 4:\n        reason.append(f\"段落数量错误(应为4段，实际{len(paragraphs)}段)\")\n    \n    # 第二段落标点检查\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1]\n        if any(char in all_punctuation for char in second_para):\n            reason.append(\"第二段落包含标点符号\")\n    \n    return {\n        \"check_code\": len(reason) == 0,\n        \"reason\": \"; \".join(reason) if reason else \"\"\n    }"}
{"prompt": "近年来，随着城市化进程的加速，城市中的生态环境问题逐渐受到关注。屋顶绿化是一种有效改善城市生态环境的方式，它通过在建筑屋顶种植植物或铺设草坪，提升绿地面积，改善空气质量，调节城市热岛效应，并为城市居民提供更多的休闲空间。然而，屋顶绿化的实施也面临成本、维护以及建筑承重等多方面的挑战。请结合以下任务要求，探讨屋顶绿化的优劣势。  \n\n请根据以上背景信息，撰写一篇关于“屋顶绿化对现代城市的影响”的分析文章。文章需要满足以下要求：  \n1. 文章内容不得少于200个汉字，但不得超过300个汉字。\n2. 在文章中需要列出屋顶绿化的三个主要优势，并使用“&优势1&”、“&优势2&”、“&优势3&”作为主要优势得占位符。\n3. 文章只能有三个段落（不要出现标题），每个段落之间用“～～”符号分隔。其中第二个段落中，必须恰好由5个句子（用中文句号或问号或感叹号分隔）组成。\n4. 模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"未找到答案开始/结束标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    content = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n    if not content:\n        err_infos.append(\"答案格式提取失败\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    answers = content.group(1).strip().split(\"@@@@@@\")\n    \n    # 检查答案数量\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量错误: 应为2个, 实际{len(answers)}个\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        if not ans:\n            err_infos.append(f\"答案{idx}: 内容为空\")\n            continue\n        \n        # 检查段落分隔符\n        paragraphs = ans.split(\"～～\")\n        if len(paragraphs) != 3:\n            err_infos.append(f\"答案{idx}: 段落数量错误: 应为3段, 实际{len(paragraphs)}段\")\n        \n        # 检查第二段句子数量\n        if len(paragraphs) >= 2:\n            sentences = re.split(r'[。？！]', paragraphs[1])\n            sentences = [s.strip() for s in sentences if s.strip()]\n            if len(sentences) != 5:\n                err_infos.append(f\"答案{idx}: 第二段句子数量错误: 应为5句, 实际{len(sentences)}句\")\n        \n        # 检查优势占位符\n        for i in range(1, 4):\n            placeholder = f\"&优势{i}&\"\n            if placeholder not in ans:\n                err_infos.append(f\"答案{idx}: 缺少占位符{placeholder}\")\n        \n        # 检查汉字数量\n        hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', ans))\n        if hanzi_count < 200:\n            err_infos.append(f\"答案{idx}: 汉字数量不足200字 (当前{hanzi_count}字)\")\n        elif hanzi_count > 300:\n            err_infos.append(f\"答案{idx}: 汉字数量超过300字 (当前{hanzi_count}字)\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "在许多文化中，节庆活动是人们表达情感、维系社区关系的重要方式。传统节日如春节、中秋节、感恩节等，不仅是家人团聚的时刻，也是分享特定美食、传承文化习俗的重要机会。然而，在全球化和现代化的影响下，许多传统节日的庆祝方式逐渐发生变化，例如出现了跨文化的元素或更加商业化的趋势。探讨这些变化及其对节日意义的影响，可以帮助我们更好地理解现代社会中的文化传承与创新。  \n\n请写一篇关于现代节日庆祝方式变化的文章，探讨全球化和技术发展对传统节日的影响，并列举至少三个具体的例子来分析这些变化。请确保文章内容避免使用“科技”、“网络”和“社交媒体”这三个词语。同时，文章的第三个句子（用中文句号或问号或感叹号分隔）必须以“这是一种新的趋势。”这几个字结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义验证结果\n    err_infos = []\n    \n    # 检查是否包含答案标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response:\n        err_infos.append(\"缺少【答案开始】标记\")\n    if end_marker not in response:\n        err_infos.append(\"缺少【答案结束】标记\")\n    if start_marker not in response or end_marker not in response:\n        return {\n            \"check_code\": False,\n            \"reason\": \"; \".join(err_infos)\n        }\n    \n    # 提取答案内容\n    start_index = response.find(start_marker) + len(start_marker)\n    end_index = response.find(end_marker)\n    content = response[start_index:end_index].strip()\n    \n    # 检查禁用词\n    banned_words = [\"科技\", \"网络\", \"社交媒体\"]\n    found_words = [word for word in banned_words if word in content]\n    if found_words:\n        err_infos.append(f\"包含禁用词：{','.join(found_words)}\")\n    \n    # 检查第三个句子结尾\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    if len(sentences) < 3:\n        err_infos.append(\"句子数量不足3个\")\n    else:\n        third_sentence = sentences[2]\n        if not third_sentence.endswith(\"这是一种新的趋势\"):\n            err_infos.append(\"第三个句子结尾不符合要求\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "在现代工作环境中，效率和健康是两个极为重要的主题。尽管许多人努力在工作中保持高效，但常常忽略了健康的重要性。为了探讨如何在高效工作的同时保持健康，请你撰写一篇关于“在办公室环境中保持健康的方法”的文章。\n\n文章需要描述以下几个方面：\n1. 办公室环境中常见的健康问题，如久坐、疲劳等。\n2. 提供具体的解决方案，如定期休息、正确的坐姿、适当的运动等。\n3. 如何平衡工作效率和健康之间的关系。\n\n特别要求：\n1. 文章必须以“在现代工作环境中”这八个字开头。\n2. 在文章中禁止使用“科技”、“机器人”、“虚拟”这三个词。\n3. 文章只能有5个段落，每个段落用两个换行符“\n\n”分隔开来。\n4. 在第三段中，“运动”这个词务必至少出现4次。\n模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义验证结果初始值\n    check_code = True\n    err_infos = []\n    \n    # 提取答案部分\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        check_code = False\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos)}\n    \n    answers_section = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 分割多个答案\n    answers = re.split(r'\\*{6}', answers_section)\n    if len(answers) < 2:\n        check_code = False\n        err_infos.append(\"答案数量不足2个\")\n        return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos)}\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        errors = []\n        \n        # 验证开头\n        if not ans.startswith(\"在现代工作环境中\"):\n            errors.append(f\"答案{i}不以指定短语开头\")\n        \n        # 验证禁用词\n        forbidden_words = [\"科技\", \"机器人\", \"虚拟\"]\n        for word in forbidden_words:\n            if word in ans:\n                errors.append(f\"答案{i}包含禁用词'{word}'\")\n        \n        # 验证段落结构\n        paragraphs = re.split(r'\\n\\n+', ans)\n        if len(paragraphs) != 5:\n            errors.append(f\"答案{i}段落数量错误({len(paragraphs)}≠5)\")\n        \n        # 验证第三段运动词频\n        if len(paragraphs) >= 3:\n            para3 = paragraphs[2]\n            count = para3.count(\"运动\")\n            if count < 4:\n                errors.append(f\"答案{i}第三段'运动'出现不足4次(实际:{count})\")\n        \n        if errors:\n            check_code = False\n            err_infos.extend(errors)\n    \n    return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos)}"}
{"prompt": "请撰写一篇关于“城市夜晚中的独特声音”的文章。要求文章中必须出现“霓虹”、“低语”、“回响”三个词语。请确保文章恰好由10个句子（用中文句号或问号或感叹号分隔）组成。其中第4个句子的第3个汉字必须是“灯”字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 1. 检查起始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response or end_marker not in response:\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": \",\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response.split(start_marker)[1].split(end_marker)[0].strip()\n    \n    # 2. 检查关键词存在性\n    keywords = [\"霓虹\", \"低语\", \"回响\"]\n    missing = [kw for kw in keywords if kw not in content]\n    if missing:\n        err_infos.append(f\"缺少关键词：{','.join(missing)}\")\n    \n    # 3. 分割句子并检查数量\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    print(sentences)\n    if len(sentences) != 10:\n        err_infos.append(f\"句子数量错误（实际：{len(sentences)}/要求：10）\")\n    \n    # 4. 检查第4句第3个汉字（如果存在第4句）\n    if len(sentences) >= 4:\n        # 获取有效汉字（过滤非汉字字符）\n        valid_chars = [c for c in sentences[3] if '一' <= c <= '鿿']\n        if len(valid_chars) < 3:\n            err_infos.append(\"第4句少于3个汉字\")\n        elif valid_chars[2] != \"灯\":\n            err_infos.append(f\"第4句第3个汉字错误（实际：{valid_chars[2]}/要求：灯）\")\n    else:\n        err_infos.append(\"不存在第4个句子\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \",\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "近年来，随着人们对健康生活方式的关注，全球范围内掀起了一股“植物性饮食”的热潮。植物性饮食强调以水果、蔬菜、坚果、豆类和全谷物为主要食材，尽量减少动物性食品的摄入。许多人采用这种饮食模式不仅是为了减轻体重，还希望通过改变饮食习惯改善心血管健康、降低癌症风险以及减少对环境的负担。然而，植物性饮食的推广和实践并非无挑战，例如如何在日常饮食中保证营养均衡、避免某些营养素（如维生素B12、铁等）的缺乏，是许多人面临的问题。因此，探索如何将植物性饮食有效融入日常生活成为了一个值得研究的领域。\n\n请撰写一篇关于如何在日常生活中实现植物性饮食的文章。文章内容可以涵盖食材的选择、营养补充的技巧以及具体的菜肴建议。请确保文章恰好由10个句子（用中文句号或问号或感叹号分隔）组成。其中第7个句子以“为了让饮食更加丰富”开头。要求文章中不允许出现“健康”、“环保”、“减肥”三个词语。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少结束标记【答案结束】\")\n    \n    # 如果标记错误直接返回\n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取实际内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查禁止词\n    forbidden_words = [\"健康\", \"环保\", \"减肥\"]\n    for word in forbidden_words:\n        if word in content:\n            errors.append(f\"包含禁止词'{word}'\")\n    \n    # 分割句子\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    # 检查句子数量\n    if len(sentences) != 10:\n        errors.append(f\"句子数量为{len(sentences)}而非10个\")\n    \n    # 检查第7句开头\n    if len(sentences) >= 7:\n        if not sentences[6].startswith(\"为了让饮食更加丰富\"):\n            errors.append(\"第7句不以指定短语开头\")\n    else:\n        errors.append(\"句子数量不足7个\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于“智能家居技术如何改善日常生活”的文章，要求包含“便捷”、“安全”和“节能”三个词语，其中“便捷”至少出现3次，“安全”必须只出现5次，而“节能”最多出现2次。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第3段的第8个汉字必须是“效”字。另外，请确保文章恰好由15个句子（用中文句号或问号或感叹号分隔）组成，并且第10个句子的第11个汉字必须是“感”字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 提取答案内容\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    start_idx = response.find(start_tag)\n    end_idx = response.find(end_tag)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        errors.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": errors}\n    \n    content = response[start_idx + len(start_tag):end_idx].strip()\n    \n    # 验证段落分隔\n    paragraphs = [p.strip() for p in content.split('～～') if p.strip()]\n    if len(paragraphs) != 4:\n        errors.append(f\"段落数量错误：需要4段，实际{len(paragraphs)}段\")\n    \n    # 验证词语频次\n    if '便捷' not in content or '安全' not in content or '节能' not in content:\n        errors.append(\"未包含全部关键词\")\n    else:\n        if content.count('便捷') < 3:\n            errors.append(f\"'便捷'出现次数不足3次：实际{content.count('便捷')}次\")\n        if content.count('安全') != 5:\n            errors.append(f\"'安全'出现次数错误：需要5次，实际{content.count('安全')}次\")\n        if content.count('节能') > 2:\n            errors.append(f\"'节能'出现次数超限：最多2次，实际{content.count('节能')}次\")\n    \n    # 验证第3段第8字\n    if len(paragraphs) >= 3:\n        para3 = paragraphs[2].replace(' ', '')  # 去除空格\n        if len(para3) < 8:\n            errors.append(\"第3段长度不足8字\")\n        else:\n            if para3[7] != '效':\n                errors.append(f\"第3段第8字错误：应为'效'，实际是'{para3[7]}'\")\n    \n    # 验证句子数量\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 15:\n        errors.append(f\"句子数量错误：需要15句，实际{len(sentences)}句\")\n    \n    # 验证第10句第11字\n    if len(sentences) >= 10:\n        sent10 = sentences[9].replace(' ', '')\n        if len(sent10) < 11:\n            errors.append(\"第10句长度不足11字\")\n        else:\n            if sent10[10] != '感':\n                errors.append(f\"第10句第11字错误：应为'感'，实际是'{sent10[10]}'\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": errors if errors else []\n    }"}
{"prompt": "请写一篇关于智能家居技术的文章，要求第四个句子（用中文句号或问号或感叹号分隔）以‘例如’开头，第五个句子以‘这种趋势正在加速发展’结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化验证结果\n    err_infos = []\n    \n    # 检查标记是否完整\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response or end_marker not in response:\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    try:\n        content = response.split(start_marker)[1].split(end_marker)[0].strip()\n    except IndexError:\n        err_infos.append(\"答案标记格式错误\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 中文分句（按句号、问号、感叹号分割）\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    # 检查句子数量\n    if len(sentences) < 5:\n        err_infos.append(f\"回答只有{len(sentences)}句，不足5句\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 检查第四个句子\n    if not sentences[3].startswith('例如'):\n        err_infos.append(f\"第四句不以'例如'开头: '{sentences[3]}'\")\n    \n    # 检查第五个句子\n    if not sentences[4].endswith('这种趋势正在加速发展'):\n        err_infos.append(f\"第五句不以'这种趋势正在加速发展'结尾: '{sentences[4]}'\")\n    \n    # 返回最终验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请撰写一篇关于数字化转型对零售业影响的文章。文章应包含6个段落，每个段落之间用'～～'符号分隔。在第四个段落中，“顾客”这个词至少出现两次。文章的结尾必须以“这将是一个持续发展的过程。”结束。整篇文章至少100个汉字但不超过200个汉字。内容中不能出现中文逗号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答缺少【答案结束】标记\")\n    \n    # 提取文章内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 检查段落分隔\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 6:\n        err_infos.append(f\"段落数量错误: 需要6段,实际{len(paragraphs)}段\")\n    \n    # 检查第四段顾客出现次数\n    if len(paragraphs) >= 4:\n        customer_count = paragraphs[3].count(\"顾客\")\n        if customer_count < 2:\n            err_infos.append(f\"第四段'顾客'出现次数不足: 需要≥2次,实际{customer_count}次\")\n    \n    # 检查结尾\n    if len(paragraphs) > 0 and not paragraphs[-1].endswith(\"这将是一个持续发展的过程。\"):\n        err_infos.append(\"文章结尾未按要求结束\")\n    \n    # 检查字数\n    chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', content)\n    char_count = len(chinese_chars)\n    if char_count < 100:\n        err_infos.append(f\"字数不足: 需要≥100字,实际{char_count}字\")\n    elif char_count > 200:\n        err_infos.append(f\"字数超限: 需要≤200字,实际{char_count}字\")\n    \n    # 检查中文逗号\n    if \"，\" in content:\n        err_infos.append(\"内容包含中文逗号\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "在现代城市中，交通拥堵是一个普遍存在的问题。随着城市化进程的加快，越来越多的人选择开车出行，而这也导致了交通流量的增加和道路堵塞的现象。为了缓解这种情况，各个城市都在努力寻找解决方案，如发展公共交通、实施智能交通管理系统、鼓励绿色出行等。智能交通管理系统通过对交通流量的实时监控和分析，合理调配交通信号和交通资源，从而提高道路通行效率。在未来，随着技术的进步，这些措施有望显著改善城市交通状况。然而，仅靠技术手段还不够，公众意识的提高和政策的支持同样至关重要。  \n\n请撰写一篇关于“智能交通管理系统如何改变城市出行方式”的文章。文章需包含“智能交通”和“出行”这两个词。文章只应包含四个段落，并以“智慧交通将引领未来城市的发展。”这句话结尾。在第二段中，“交通”这个词必须出现至少两次。文章中的每个句子（用中文句号或问号或感叹号分隔）的字数必须至少为10个字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答未包含正确的开始/结束标记\")\n    else:\n        # 提取答案内容\n        content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n        \n        # 检查段落数量\n        paragraphs = [p.strip() for p in content.split('\\n') if p.strip()]\n        if len(paragraphs) != 4:\n            errors.append(f\"段落数量错误（需要4段，实际{len(paragraphs)}段）\")\n        else:\n            # 检查第二段\"交通\"出现次数\n            traffic_count = paragraphs[1].count(\"交通\")\n            if traffic_count < 2:\n                errors.append(f\"第二段'交通'出现次数不足（需要≥2次，实际{traffic_count}次）\")\n            \n            # 检查结尾句子\n            if not paragraphs[-1].endswith(\"智慧交通将引领未来城市的发展。\"):\n                errors.append(\"结尾句子不符合要求\")\n        \n        # 检查关键词\n        if \"智能交通\" not in content:\n            errors.append(\"缺少关键词'智能交通'\")\n        if \"出行\" not in content:\n            errors.append(\"缺少关键词'出行'\")\n        \n        # 检查每句字数\n        all_sentences = []\n        for p in paragraphs:\n            sentences = re.split(r'[。？！]', p)\n            all_sentences.extend([s.strip() for s in sentences if s.strip()])\n        \n        for i, sent in enumerate(all_sentences):\n            if len(sent) < 10:\n                errors.append(f\"第{i+1}句字数不足10字（实际{len(sent)}字）\")\n                break  # 发现一句不满足即停止\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "在现代社会中，交通工具的设计不仅仅关乎功能性，还与文化、环保、心理学等多方面的因素紧密相关。例如，在汽车设计中，颜色的选择可能会影响驾驶者的情绪；而在公共交通工具中，座位布局和灯光设计可能会影响乘客的舒适感和使用效率。此外，随着全球对于环保的关注，越来越多的交通工具开始采用可持续的材料和新能源技术。例如，电动汽车的普及正在改变传统燃油车的市场格局。同时，设计师们也在努力通过创新设计提升城市交通工具的适应性和便利性，以缓解城市拥堵问题。  \n\n请设计一个未来的城市公共交通工具，并详细描述它的外观、功能和技术特点。文章中必须出现“环保材料”和“心理舒适”这两个词语。同时，文章内容不能出现中文逗号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    # 初始化错误信息列表\n    errors = []\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答开头缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答结尾缺少【答案结束】标记\")\n    \n    # 提取回答内容\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n        \n        # 检查关键词\n        if \"环保材料\" not in content:\n            errors.append(\"回答内容缺少关键词'环保材料'\")\n        if \"心理舒适\" not in content:\n            errors.append(\"回答内容缺少关键词'心理舒适'\")\n        \n        # 检查中文逗号\n        if \"，\" in content:\n            errors.append(\"回答内容包含中文逗号\")\n    else:\n        # 当标记不完整时添加占位错误\n        if not errors:\n            errors.append(\"标记不完整导致内容无法验证\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "在现代城市中，交通拥堵是一个普遍存在的问题，对居民的生活质量和城市经济发展造成了重大影响。尽管许多城市采取了各种措施来缓解交通压力，如扩大公共交通网络和实施限制车流量的政策，但效果往往不尽如人意。近年来，智能交通系统（ITS）的发展为解决这一问题提供了新的思路。通过使用先进的信息技术，智能交通系统可以实时监控和管理交通流量，提高交通效率，并减少事故的发生。随着人工智能和大数据技术的进步，智能交通系统的应用前景愈发广阔。然而，如何在城市中有效地部署和利用这些技术，仍然是一个值得探讨的课题。\n\n请撰写一篇关于智能交通系统的文章，文章应分为三个段落（不要出现标题），每个段落之间用'～～'符号分隔。在第二个段落中，必须恰好由四个句子（用中文句号或问号或感叹号分隔）组成。请在文章中至少出现两次“交通流量”这个词语，并且出现“人工智能”这个词语不多于三次。此外，在文章中详细解释并列出智能交通系统的三种主要优点，使用“&优点1&”、“&优点2&”和“&优点3&”作为主要优点的占位符。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "import re\n\ndef check_response(response):\n    all_errors = []\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        all_errors.append(\"回答未以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        all_errors.append(\"回答未以【答案结束】结尾\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    answers = content.split('@@@@@@')\n    \n    # 检查答案数量\n    if len(answers) != 2:\n        all_errors.append(f\"答案数量不为2个（检测到{len(answers)}个）\")\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        if not ans:\n            all_errors.append(f\"答案{idx}为空\")\n            continue\n        \n        # 检查段落分隔符\n        segments = ans.split('～～')\n        if len(segments) != 3:\n            all_errors.append(f\"答案{idx}段落数不为3（检测到{len(segments)}段）\")\n        else:\n            # 检查第二段句子数\n            sentences = [s.strip() for s in re.split(r'[。？！]', segments[1]) if s.strip()]\n            if len(sentences) != 4:\n                all_errors.append(f\"答案{idx}第二段句子数不为4（检测到{len(sentences)}句）\")\n        \n        # 检查关键词频率\n        traffic_count = ans.count(\"交通流量\")\n        if traffic_count < 2:\n            all_errors.append(f\"答案{idx}中'交通流量'出现次数不足2次（检测到{traffic_count}次）\")\n        \n        ai_count = ans.count(\"人工智能\")\n        if ai_count > 3:\n            all_errors.append(f\"答案{idx}中'人工智能'出现超过3次（检测到{ai_count}次）\")\n        \n        # 检查优点占位符\n        if \"&优点1&\" not in ans:\n            all_errors.append(f\"答案{idx}缺少'&优点1&'占位符\")\n        if \"&优点2&\" not in ans:\n            all_errors.append(f\"答案{idx}缺少'&优点2&'占位符\")\n        if \"&优点3&\" not in ans:\n            all_errors.append(f\"答案{idx}缺少'&优点3&'占位符\")\n    \n    return {\n        \"check_code\": len(all_errors) == 0,\n        \"reason\": \"；\".join(all_errors) if all_errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于“智能家居设备在日常生活中的影响”的文章，字数至少120字且不超过150字。请确保文章只出现2个段落（不要出现标题），每个段落之间用'～～'符号分隔。另外，文章应恰好由5个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n\n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        errors.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取答案内容\n    start_idx = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.find(\"【答案结束】\")\n    if start_idx > end_idx:\n        errors.append(\"答案结束标记出现在开始标记之前\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    content = response[start_idx:end_idx].strip()\n\n    # 检查段落分隔符\n    segments = re.split(r'～～', content)\n    if len(segments) != 2:\n        errors.append(f\"需要恰好2个段落，找到{len(segments)-1}个分隔符\")\n    else:\n        para1 = segments[0].strip()\n        para2 = segments[1].strip()\n        \n        # 检查段落非空\n        if not para1 or re.sub(r'\\s', '', para1) == \"\":\n            errors.append(\"第一段落为空\")\n        if not para2 or re.sub(r'\\s', '', para2) == \"\":\n            errors.append(\"第二段落为空\")\n        \n        if not errors:\n            # 检查句子数量\n            sentences = re.findall(r'[^。？！]*[。？！]', para1 + para2)\n            valid_end = sum(1 for s in sentences if s.strip())  # 有效句子计数\n            if valid_end != 5:\n                errors.append(f\"需要恰好5个句子，找到{valid_end}个\")\n            \n            # 检查字数\n            clean_text = re.sub(r'\\s', '', para1 + para2)\n            char_count = len(clean_text)\n            if char_count < 120:\n                errors.append(f\"字数不足120字（当前{char_count}字）\")\n            elif char_count > 150:\n                errors.append(f\"字数超过150字（当前{char_count}字）\")\n\n    # 汇总检查结果\n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在现代社会，城市交通一直是一个备受关注的话题。随着城市化进程的加速，交通拥堵成为了大城市居民日常生活中的一大难题。不同城市采用了各种创新的解决方案，如共享单车、地铁扩建以及智能交通系统等。这些措施在一定程度上缓解了交通压力，但也带来了新的挑战和问题，例如共享单车的管理问题、地铁高峰期的拥挤以及智能交通系统的技术瓶颈等。了解和研究这些问题的解决方案不仅对城市规划者有益，也能为普通市民提供更好的出行体验。\n\n请撰写一篇关于城市交通创新解决方案的文章，重点探讨当前大城市在交通领域面临的主要挑战，并提供可能的解决对策。请确保文章标题用$()$标记，如$(城市交通的创新解决方案：挑战与对策)$。文章应涵盖以下方面：1) 当前交通拥堵的主要原因；2) 已实施的创新解决方案及其效果；3) 未来可能的技术或政策发展方向。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    if not errors:\n        content = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n        if not content:\n            errors.append(\"无法提取答案内容\")\n        else:\n            content = content.group(1).strip()\n            \n            # 检查标题格式\n            title_match = re.search(r\"\\$\\((.+?)\\)\\$\", content)\n            if not title_match:\n                errors.append(\"标题未使用$()$标记\")\n            \n            # 检查内容覆盖度\n            aspects = [\n                (\"当前交通拥堵的主要原因\", [\"原因\", \"因素\", \"导致\", \"拥堵根源\", \"问题根源\"]),\n                (\"已实施的创新解决方案及其效果\", [\"共享单车\", \"地铁\", \"智能交通\", \"解决方案\", \"效果\", \"成效\"]),\n                (\"未来技术或政策发展方向\", [\"未来\", \"发展\", \"方向\", \"技术\", \"政策\", \"趋势\", \"规划\"])\n            ]\n            \n            for aspect_name, keywords in aspects:\n                found = any(keyword in content for keyword in keywords)\n                if not found:\n                    errors.append(f\"缺少{aspect_name}相关内容\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \";\".join(errors) if errors else \"\"\n    }"}
{"prompt": "请写一篇关于如何在都市生活中保持身心健康的文章，文章应只出现16个句子（用中文句号或问号或感叹号分隔)，要求文章不少于700字，不超过800字，并且第七个句子以‘首先’开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    result = {\"check_code\": True, \"reason\": \"\"}\n    err_infos = []\n\n    # 检查标记完整性\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response:\n        err_infos.append(\"缺少开始标记\")\n    if end_marker not in response:\n        err_infos.append(\"缺少结束标记\")\n    if err_infos:\n        result[\"check_code\"] = False\n        result[\"reason\"] = \";\".join(err_infos)\n        return result\n\n    # 提取内容\n    try:\n        content = response.split(start_marker)[1].split(end_marker)[0].strip()\n    except IndexError:\n        result[\"check_code\"] = False\n        result[\"reason\"] = \"标记提取失败\"\n        return result\n\n    # 检查字数\n    content_no_space = re.sub(r'\\s', '', content)\n    char_count = len(content_no_space)\n    if char_count < 700:\n        err_infos.append(f\"字数不足700字（实际{char_count}字）\")\n    if char_count > 800:\n        err_infos.append(f\"字数超过800字（实际{char_count}字）\")\n\n    # 分割句子\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) != 16:\n        err_infos.append(f\"句子数量应为16句（实际{len(sentences)}句）\")\n    \n    # 检查第七句\n    if len(sentences) >= 7:\n        if not sentences[6].startswith('首先'):\n            err_infos.append(\"第七句未以'首先'开头\")\n    else:\n        err_infos.append(\"不足7个句子，无法验证第七句\")\n\n    # 汇总结果\n    if err_infos:\n        result[\"check_code\"] = False\n        result[\"reason\"] = \";\".join(err_infos)\n    \n    return result"}
{"prompt": "近年来，人类对太空探索的兴趣愈加浓厚，多个国家和私营公司都在研发先进的太空技术，计划探索火星、月球等星体。太空垃圾问题也随之成为一个重要议题，这些垃圾包括废弃的卫星、火箭部件和其他碎片，可能对未来的太空任务构成威胁。科学家们正尝试通过激光清除、回收技术等方法解决这一问题。此外，太空商业化也逐渐兴起，例如太空旅游和太空矿业。如何平衡太空探索与环境保护已成为一项迫切任务。  \n\n请写一篇关于太空垃圾清理技术的文章。确保内容逻辑清晰、语言流畅，并且体现出技术对解决太空垃圾问题的实际应用。要求在文章内容中需详细列出三种主要技术，并使用“&技术1&”、“&技术2&”和“&技术3&”作为主要技术的占位符。同时，文章的第3个句子（用中文句号或问号或感叹号分隔）必须以“随着太空任务的频繁开展”这几个字开头；文章的第四个句子必须以“这对太空环境的可持续发展具有重要意义。”这几个字结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 错误信息收集\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取文章内容\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[5:-5].strip()  # 去除标记获取内容\n    else:\n        content = \"\"\n    \n    # 检查占位符\n    placeholders = [\"&技术1&\", \"&技术2&\", \"&技术3&\"]\n    for ph in placeholders:\n        if ph not in content:\n            err_infos.append(f\"缺少占位符{ph}\")\n    \n    # 句子分割（保留结尾标点）\n    if content:\n        # 使用正则分割句子（保留分割符）\n        parts = re.split(r'([。？！])', content)\n        # 重新组合成完整句子列表\n        sentences = []\n        for i in range(0, len(parts)-1, 2):\n            sentence = parts[i] + parts[i+1]\n            if sentence.strip():  # 跳过空句子\n                sentences.append(sentence)\n        \n        # 检查句子数量\n        if len(sentences) < 4:\n            err_infos.append(f\"文章至少需要4个句子，实际只有{len(sentences)}个句子\")\n        else:\n            # 检查第3个句子开头\n            third_sent = sentences[2].strip()\n            if not third_sent.startswith(\"随着太空任务的频繁开展\"):\n                err_infos.append(f\"第3个句子应以'随着太空任务的频繁开展'开头，实际为：'{third_sent[:10]}...'\")\n            \n            # 检查第4个句子结尾\n            fourth_sent = sentences[3].strip()\n            if not fourth_sent.endswith(\"这对太空环境的可持续发展具有重要意义。\"):\n                err_infos.append(f\"第4个句子应以'这对太空环境的可持续发展具有重要意义。'结尾，实际为：'...{fourth_sent[-10:]}'\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "在现代城市中，公共交通系统是城市居民日常生活的重要组成部分。随着人口的增加和城市化的加速，交通拥堵和环境污染问题日益严重。为了应对这些挑战，许多城市开始探索智能公共交通系统的实施，包括使用自动驾驶公交、优化交通信号系统，以及应用实时数据分析来提高交通效率。智能公共交通系统不仅能够减少交通拥堵，还可以降低温室气体排放，改善空气质量。然而，这项技术的全面实施仍面临许多挑战，如技术成本高昂、数据隐私问题以及公众接受度等。尽管如此，智能公共交通系统被认为是未来城市发展的重要方向之一。\n\n请撰写一篇关于“智能公共交通系统的未来发展”的文章，请确保文章只能由15个句子（用中文句号或问号或感叹号分隔）组成。其中第8个句子不少于12个汉字。最后以“智能交通是未来城市发展的关键。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    stripped_response = response.strip()\n    \n    # 检查标记\n    if not stripped_response.startswith(\"【答案开始】\") or not stripped_response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少【答案开始】或【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取答案内容\n    start = stripped_response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end = stripped_response.find(\"【答案结束】\")\n    content = stripped_response[start:end].strip()\n    \n    # 检查结尾句子\n    if not content.endswith(\"智能交通是未来城市发展的关键。\"):\n        errors.append(\"未按要求以指定句子结尾\")\n    \n    # 分句处理\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    \n    # 检查句子数量\n    if len(sentences) != 15:\n        errors.append(f\"句子数量应为15，实际为{len(sentences)}\")\n    \n    # 检查第8句长度（如果存在）\n    if len(sentences) >= 8:\n        sentence_8 = sentences[7]\n        hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', sentence_8))\n        if hanzi_count < 12:\n            errors.append(f\"第8句应不少于12个汉字，实际为{hanzi_count}个\")\n    elif len(sentences) < 8:\n        errors.append(\"句子数量不足，无法检查第8句\")\n    \n    # 检查最后一句内容（如果存在）\n    if sentences and sentences[-1] != \"智能交通是未来城市发展的关键\":\n        errors.append(\"结尾句子内容不匹配\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请写一篇关于古代中国饮食文化的文章。文章应包含以下要求：\n\n1. 文章中必须包含“茶道”和“筷子”这两个词。\n2. 文章长度应在1000到1200字之间。\n3. 文章应包含4个段落，每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“筷子”这个词务必至少出现两次。在第三个段落中，必须由6个句子（用中文句号或问号或感叹号分隔）组成。\n5. 文章中第四个句子（用中文句号或问号或感叹号分隔）应以“在古代”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查是否包含答案标记\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"回答未包含答案标记\"}\n    \n    # 提取文章内容\n    try:\n        start_index = response.index(\"【答案开始】\") + 6\n        end_index = response.index(\"【答案结束】\")\n        article = response[start_index:end_index].strip()\n    except ValueError:\n        return {\"check_code\": False, \"reason\": \"答案标记格式错误\"}\n    \n    # 1. 检查关键词\n    if \"茶道\" not in article:\n        err_infos.append(\"缺少关键词'茶道'\")\n    if \"筷子\" not in article:\n        err_infos.append(\"缺少关键词'筷子'\")\n    \n    # 2. 检查文章长度\n    word_count = len(article)\n    if word_count < 1000 or word_count > 1200:\n        err_infos.append(f\"文章长度不符（当前{word_count}字）\")\n    \n    # 3. 检查段落结构\n    paragraphs = [p.strip() for p in article.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量不符（当前{len(paragraphs)}段）\")\n    else:\n        # 检查第二段筷子出现次数\n        chopstick_count = paragraphs[1].count(\"筷子\")\n        if chopstick_count < 2:\n            err_infos.append(f\"第二段'筷子'出现次数不足（当前{chopstick_count}次）\")\n        \n        # 检查第三段句子数量\n        sentences = re.split(r'[。？！]', paragraphs[2])\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            err_infos.append(f\"第三段句子数量不符（当前{len(sentences)}句）\")\n    \n    # 5. 检查第四个句子\n    all_sentences = re.findall(r'[^。？！]+[。？！]', article)\n    if len(all_sentences) >= 4:\n        fourth_sentence = all_sentences[3].strip()\n        if not fourth_sentence.startswith(\"在古代\"):\n            err_infos.append(f\"第四句开头错误：'{fourth_sentence[:10]}...'\")\n    else:\n        err_infos.append(\"文章总句子数不足4句\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \" | \".join(err_infos)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请分别描述一下机器学习算法在天气预报和股票预测中的应用。每个描述只能有11个句子(每个句子之间用786这个数字作为分隔符号)模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    # 检查标记是否存在\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"Missing start/end tags\"}\n\n    # 提取答案内容\n    start_idx = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.find(\"【答案结束】\")\n    if start_idx < 0 or end_idx < 0 or end_idx <= start_idx:\n        return {\"check_code\": False, \"reason\": \"Invalid tag positions\"}\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查多余内容\n    if response[:response.find(\"【答案开始】\")].strip():\n        return {\"check_code\": False, \"reason\": \"Extra content before start tag\"}\n    if response[end_idx+len(\"【答案结束】\"):].strip():\n        return {\"check_code\": False, \"reason\": \"Extra content after end tag\"}\n    \n    # 分割两个答案\n    parts = content.split(\"@@@@@@\")\n    if len(parts) != 2:\n        return {\"check_code\": False, \"reason\": f\"Expected 2 parts, got {len(parts)}\"}\n    \n    # 验证每个答案的句子数量和分隔符\n    results = []\n    for i, part in enumerate(parts):\n        sentences = part.split(\"786\")\n        if len(sentences) != 11:\n            results.append(f\"Part {i+1}: expected 11 sentences, got {len(sentences)}\")\n        if any(not s.strip() for s in sentences):\n            results.append(f\"Part {i+1}: contains empty sentences\")\n    \n    return {\n        \"check_code\": len(results) == 0,\n        \"reason\": \"; \".join(results) if results else \"\"\n    }"}
{"prompt": "请写一篇关于“传统节日与现代生活”的文章，文章必须包含“团圆”和“文化”两个词语。文章应分为5个段落（不要出现标题），其中第2段的第52个汉字必须是“乐”字。每个段落之间用'～～'符号分隔。请确保第3段至少包含90个汉字。文章的每个句子（用中文句号或问号或感叹号分隔）的最后一个字使用“乎”字作为结尾。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"缺少答案标记\"}\n    \n    # 提取答案内容\n    try:\n        content = response.split(\"【答案开始】\")[1].split(\"【答案结束】\")[0].strip()\n    except:\n        return {\"check_code\": False, \"reason\": \"答案提取失败\"}\n    \n    # 分割两个答案\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案数量错误，应为2个，实际{len(answers)}个\"}\n    \n    # 验证每个答案\n    for ans_idx, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        \n        # 检查必要词语\n        if \"团圆\" not in ans:\n            err_infos.append(f\"答案{ans_idx}缺少'团圆'\")\n        if \"文化\" not in ans:\n            err_infos.append(f\"答案{ans_idx}缺少'文化'\")\n        \n        # 分割段落\n        paragraphs = re.split(r'～～+', ans)\n        if len(paragraphs) != 5:\n            err_infos.append(f\"答案{ans_idx}段落数量错误，应为5，实际{len(paragraphs)}\")\n            continue  # 段落数错误时跳过后续检查\n        \n        # 检查第二段第52个汉字\n        if len(paragraphs[1]) < 52:\n            err_infos.append(f\"答案{ans_idx}第2段不足52个字符\")\n        else:\n            char_count = 0\n            for char in paragraphs[1]:\n                if '\\u4e00' <= char <= '\\u9fff':  # 只统计汉字\n                    char_count += 1\n                    if char_count == 52:\n                        if char != \"乐\":\n                            err_infos.append(f\"答案{ans_idx}第2段第52个汉字应为'乐'，实际是'{char}'\")\n                        break\n            if char_count < 52:\n                err_infos.append(f\"答案{ans_idx}第2段不足52个汉字\")\n        \n        # 检查第三段长度\n        chinese_count = sum(1 for char in paragraphs[2] if '\\u4e00' <= char <= '\\u9fff')\n        if chinese_count < 90:\n            err_infos.append(f\"答案{ans_idx}第3段汉字不足90个，实际{chinese_count}个\")\n        \n        # 检查句子结尾\n        sentences = re.findall(r'[^。？！]+[。？！]', ans)  # 获取所有完整句子\n        for i, sent in enumerate(sentences):\n            if sent.strip() and sent[-1] in \"。？！\":  # 确保是有效句子\n                if len(sent) < 2 or sent[-2] != \"乎\":  # 检查结尾前一字\n                    err_infos.append(f\"答案{ans_idx}第{i+1}句'{sent[:10]}...'结尾字不是'乎'\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "首先，将下列文本的标点符号全部删除；然后，再将上一步修改过的文本中的文字按照每6个汉字组成一个部分，每个部分之间用“##”分隔，如果分隔到最后汉字数量不够，将剩下的汉字组成一个部分即可；最后，将上一步修改过的文本中的开头3个汉字和最后3个汉字互换位置，保持原来的汉字先后顺序不变。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n音乐教育是培养学生音乐素养和技能的重要途径，涉及音乐理论、乐器演奏、声乐训练和音乐欣赏等多个方面。音乐教育的目标是通过系统的教学和实践活动，提高学生的音乐理解力和表现力。音乐教育不仅有助于提高学生的艺术修养，还能够增强学生的创造力、团队合作能力和情感表达能力。音乐教育的成功依赖于教师的专业素养和教育理念，以及教学资源和环境的支持。音乐教育不仅关乎学生的个体发展，也与社会的文化传承和创新密切相关。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义原始文本\n    original_text = \"音乐教育是培养学生音乐素养和技能的重要途径，涉及音乐理论、乐器演奏、声乐训练和音乐欣赏等多个方面。音乐教育的目标是通过系统的教学和实践活动，提高学生的音乐理解力和表现力。音乐教育不仅有助于提高学生的艺术修养，还能够增强学生的创造力、团队合作能力和情感表达能力。音乐教育的成功依赖于教师的专业素养和教育理念，以及教学资源和环境的支持。音乐教育不仅关乎学生的个体发展，也与社会的文化传承和创新密切相关。\"\n    \n    # 验证回答格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案格式错误：缺少开始/结束标记\"}\n    \n    # 提取答案内容\n    answer = response[len(\"【答案开始】\"):-len(\"【答案开始】\")].strip()\n    \n    # 处理原始文本得到预期结果\n    # 1. 删除标点符号\n    cleaned = re.sub(r'[^一-龥]', '', original_text)\n    # 2. 每6个汉字分组\n    groups = [cleaned[i:i+6] for i in range(0, len(cleaned), 6)]\n    processed = \"##\".join(groups)\n    # 3. 交换首尾3个汉字\n    if len(processed) >= 6:\n        swapped = processed[-3:] + processed[3:-3] + processed[:3]\n    else:\n        swapped = processed\n    \n    # 验证答案内容\n    if answer != swapped:\n        return {\"check_code\": False, \"reason\": \"答案内容错误：不符合处理要求\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于“宠物对人类生活的影响”的文章，要求每个句子（用中文句号或问号或感叹号分隔）至少10个字，并且第五个句子以“这是一个挑战”结尾。文章应包含4个段落，每个段落用两个换行符“\n\n”分隔开来。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from typing import List\n\n    err_infos = []\n\n    # 检查首尾标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取内容\n    content = response[6:-6].strip()  # 去除首尾标记\n    \n    # 检查答案分隔符\n    if \"******\" not in content:\n        err_infos.append(\"缺少答案分隔符******\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    answers = content.split(\"******\")\n    if len(answers) != 2:\n        err_infos.append(f\"需要2个答案，实际找到{len(answers)}个\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        # 检查段落分隔\n        paragraphs = [p.strip() for p in ans.split(\"\\n\\n\") if p.strip()]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{idx}: 需要4个段落，实际{len(paragraphs)}段\")\n        \n        # 合并文本并分割句子\n        full_text = \"\".join(paragraphs)\n        sentences = re.split(r'[。？！]', full_text)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        # 检查句子数量\n        if len(sentences) < 5:\n            err_infos.append(f\"答案{idx}: 至少需要5个句子，实际{len(sentences)}句\")\n        \n        # 检查第五个句子结尾\n        if len(sentences) >= 5:\n            if not sentences[4].endswith(\"这是一个挑战\"):\n                err_infos.append(f\"答案{idx}: 第五句需以'这是一个挑战'结尾，实际为'{sentences[4][-10:]}...'\")\n        \n        # 检查所有句子长度\n        for i, s in enumerate(sentences, 1):\n            if len(s) < 10:\n                err_infos.append(f\"答案{idx}第{i}句: 长度不足10字 (实际:{len(s)}字)\")\n\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos if err_infos else [\"所有验证通过\"]\n    }"}
{"prompt": "请撰写一篇介绍城市公园的文章，文章应只出现三个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。同时，文章中必须包含“自然景观”和“休闲娱乐”这两个词语。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或以'【答案结束】'结尾\"\n        }\n    content = response[6:-6].strip()\n    paragraphs = content.split('\\n\\n')\n    if len(paragraphs) != 3:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章段落数不等于三个\"\n        }\n    if '自然景观' not in content or '休闲娱乐' not in content:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章中缺少'自然景观'或'休闲娱乐'词语\"\n        }\n\n    # 正则表达式模式：匹配中文句号、问号、感叹号中的任意一个\n    pattern = r'[。？！]'\n\n    # 使用正则表达式分割文本\n    raw_sentences = re.split(pattern, paragraphs[2])\n\n    # 过滤分割结果中的空字符串（处理文本开头/结尾有标点或连续标点的情况）\n    third_paragraph_sentences = [sentence.strip() for sentence in raw_sentences if sentence.strip()]\n\n    if len(third_paragraph_sentences) != 6:\n        return {\n            \"check_code\": False,\n            \"reason\": \"第三段句子数不等于六个\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请描述一个充满活力的社区市场的场景，着重描绘人们的互动和摊位的多样性，但要避免使用“商业”、“现代化”、“电子”这几个词。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 检查基本格式要求\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案格式错误，未以【答案开始】开头或【答案结束】结尾\"}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    if not content.strip():\n        return {\"check_code\": False, \"reason\": \"答案内容为空\"}\n    \n    # 检查禁止词\n    forbidden_words = [\"商业\", \"现代化\", \"电子\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        return {\"check_code\": False, \"reason\": f\"答案中包含禁止词：{','.join(found_words)}\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "首先，将下列文本的标点符号全部删除；然后，再将上一步修改过的文本中的文字按照每5个汉字组成一个部分，每个部分之间用“%%”分隔，如果分隔到最后汉字数量不够，将剩下的汉字组成一个部分即可；最后，在上一步修改过的文本中的第48个汉字和第49个汉字之间插入汉字“偶”。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n湿度是指空气中水汽的含量，是影响气候、生态和人类生活的重要因素。湿度的高低会影响人体的舒适感、健康状况以及物质的存储和生产。一般来说，相对湿度是最常用的湿度指标，它表示空气中实际水汽含量与该温度下饱和水汽含量的百分比。湿度过高容易滋生细菌和霉菌，影响人体健康和物品保存；而湿度过低则可能导致皮肤干燥、呼吸道不适等问题。控制室内湿度通常采用加湿器或除湿机等设备，同时保持良好的通风也是调节湿度的重要手段。在工业生产中，湿度的控制对于产品质量和生产效率也至关重要。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 原始文本\n    text = \"湿度是指空气中水汽的含量，是影响气候、生态和人类生活的重要因素。湿度的高低会影响人体的舒适感、健康状况以及物质的存储和生产。一般来说，相对湿度是最常用的湿度指标，它表示空气中实际水汽含量与该温度下饱和水汽含量的百分比。湿度过高容易滋生细菌和霉菌，影响人体健康和物品保存；而湿度过低则可能导致皮肤干燥、呼吸道不适等问题。控制室内湿度通常采用加湿器或除湿机等设备，同时保持良好的通风也是调节湿度的重要手段。在工业生产中，湿度的控制对于产品质量和生产效率也至关重要。\"\n    \n    # 步骤1: 删除所有标点符号\n    text_clean = re.sub(r'[^\\w\\s]', '', text)\n    # 步骤2: 按每5个汉字分组并用\"%%\"连接\n    segments = [text_clean[i:i+5] for i in range(0, len(text_clean), 5)]\n    text_grouped = \"%%\".join(segments)\n    # 步骤3: 在第48和第49个汉字之间插入\"偶\"\n    char_count = 0\n    for i, char in enumerate(text_grouped):\n        if '一' <= char <= '鿿':  # 判断是否为汉字\n            char_count += 1\n            if char_count == 48:\n                position = i + 1\n                break\n    result_expected = text_grouped[:position] + \"偶\" + text_grouped[position:]\n    \n    # 验证响应格式\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker) or not response.endswith(end_marker):\n        return {\"check_code\": False, \"reason\": \"缺少答案标记\"}\n    \n    # 提取实际答案\n    actual_answer = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 验证答案内容\n    if actual_answer == result_expected:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": \"结果不正确\"}"}
{"prompt": "请写一篇关于“户外运动中如何提高安全性”的文章，内容需体现出具体的实用建议，并举例说明。请确保文章只出现4个段落（不要出现标题），每个段落之间用“～～”符号分隔。文章以“掌握这些技巧，您的户外探险会更加安全和愉快。”这句话结尾。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    # 检查开始结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"未找到答案开始或结束标记\"}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    if not content:\n        return {\"check_code\": False, \"reason\": \"答案内容为空\"}\n    \n    # 分割两个答案\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案数量应为2个，实际为{len(answers)}个\"}\n    \n    err_infos = []\n    for i, ans in enumerate(answers):\n        ans = ans.strip()\n        if not ans:\n            err_infos.append(f\"答案{i+1}为空\")\n            continue\n        \n        # 检查结尾句\n        if not ans.endswith(\"掌握这些技巧，您的户外探险会更加安全和愉快。\"):\n            err_infos.append(f\"答案{i+1}结尾句不正确\")\n        \n        # 检查段落数和分隔符\n        parts = ans.split(\"～～\")\n        if len(parts) != 4:\n            err_infos.append(f\"答案{i+1}段落数量应为4段，实际为{len(parts)}段\")\n        else:\n            # 检查最后一段是否包含结尾句\n            if \"掌握这些技巧，您的户外探险会更加安全和愉快。\" not in parts[-1]:\n                err_infos.append(f\"答案{i+1}最后一段缺失结尾句\")\n    \n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"；\".join(err_infos)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于“如何高效整理个人物品”的文章。要求文章必须恰好由11个句子（用中文句号或问号或感叹号分隔）组成，其中第6个句子必须至少15个汉字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答必须以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答必须以【答案结束】结尾\")\n    \n    # 提取答案内容\n    content = response[5:-5].strip()  # 去掉首尾标记\n    parts = content.split(\"@@@@@@\")\n    \n    # 检查答案数量\n    if len(parts) != 2:\n        errors.append(f\"需要两个答案，实际找到{len(parts)}个\")\n    \n    # 验证每个答案\n    for i, part in enumerate(parts, 1):\n        part = part.strip()\n        if not part:\n            errors.append(f\"答案{i}内容为空\")\n            continue\n            \n        # 拆分句子\n        sentences = re.split(r'[。？！]', part)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        # 检查句子数量\n        if len(sentences) != 11:\n            errors.append(f\"答案{i}包含{len(sentences)}个句子，应为11个\")\n            continue\n            \n        # 检查第6句长度\n        if len(sentences) >= 6:\n            sixth = re.sub(r'[^\\u4e00-\\u9fa5]', '', sentences[5])  # 仅保留汉字\n            if len(sixth) < 15:\n                errors.append(f\"答案{i}的第6句只有{len(sixth)}个汉字，需要至少15个\")\n        else:\n            errors.append(f\"答案{i}没有第6个句子\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"验证通过\"\n    }"}
{"prompt": "请撰写一篇关于“传统节日中的文化传承”的文章，文章需要体现传统节日的历史意义及其对现代生活的影响。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第3段至多200个汉字。请确保文章恰好由14个句子（用中文句号或问号或感叹号分隔）组成。其中第9个句子的第4个汉字必须是“和”字。要求文章必须出现“灯笼”、“亲情”两个词语。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义原始指令文本\n    original_instruction = (\n        \"请撰写一篇关于“传统节日中的文化传承”的文章，文章需要体现传统节日的历史意义及其对现代生活的影响。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第3段至多200个汉字。请确保文章恰好由14个句子（用中文句号或问号或感叹号分隔）组成。其中第9个句子的第4个汉字必须是“和”字。要求文章必须出现“灯笼”、“亲情”两个词语。\"\n    )\n    \n    # 检查基本结构标记\n    if not response.startswith(\"【答案开始】\"):\n        return {\"check_code\": False, \"reason\": \"缺少【答案开始】标记\"}\n    if \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"缺少【答案结束】标记\"}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"): -len(\"【答案结束】\")].strip()\n    \n    # 检查指令重复部分\n    if not content.startswith(original_instruction):\n        return {\"check_code\": False, \"reason\": \"未一字不差重复指令要求\"}\n    \n    # 提取文章部分\n    article = content.replace(original_instruction, \"\", 1).strip()\n    \n    # 检查段落结构\n    paragraphs = [k for k in article.split(\"～～\") if k.strip()]\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量错误（实际：{len(paragraphs)}段）\"}\n    \n    # 检查第三段长度（200汉字内）\n    hanzi_count = len(re.findall(r'[一-龥]', paragraphs[2]))\n    if hanzi_count > 200:\n        return {\"check_code\": False, \"reason\": f\"第三段超过200汉字（实际：{hanzi_count}字）\"}\n    \n    # 检查总句子数\n    sentences = re.split(r'[。？！]', article)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 14:\n        return {\"check_code\": False, \"reason\": f\"句子数量错误（实际：{len(sentences)}句）\"}\n    \n    # 检查第9句第4汉字\n    if len(sentences) < 9:\n        return {\"check_code\": False, \"reason\": \"句子数量不足9句\"}\n    hanzi_list = re.findall(r'[一-龥]', sentences[8])\n    if len(hanzi_list) < 4:\n        return {\"check_code\": False, \"reason\": f\"第9句不足4个汉字（实际：{len(hanzi_list)}字）\"}\n    if hanzi_list[3] != \"和\":\n        return {\"check_code\": False, \"reason\": f\"第9句第4汉字应为'和'（实际：'{hanzi_list[3]}'）\"}\n    \n    # 检查关键词\n    if \"灯笼\" not in article:\n        return {\"check_code\": False, \"reason\": \"缺少关键词'灯笼'\"}\n    if \"亲情\" not in article:\n        return {\"check_code\": False, \"reason\": \"缺少关键词'亲情'\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在现代社会，随着社交媒体和数字化的快速发展，信息传播的速度和广度达到了前所未有的水平。然而，这也带来了信息过载和真假难辨的问题。人们在日常生活中接触到的信息量巨大，其中包含了大量未经证实或误导的信息。为了提高社会的媒体素养，理解如何有效地进行信息甄别显得尤为重要。媒体素养不仅仅是对信息真实性的判断，还包括对信息来源的评估、信息的背景分析以及对信息传播意图的理解等多方面的能力。加强媒体素养有助于人们在信息时代中保持清晰的思维，做出更为理智的决策，并能有效地避免被误导或操控。通过提升对信息的鉴别和理解能力，个人和社会都能更加健康地应对信息化时代的挑战。\n\n请详细说明提高个人媒体素养的重要性和具体方法，并以‘在当今社会’这几个字开头。文章每个句子（用中文句号或问号或感叹号分隔）的最后一个字需用“乎”字作为结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查标记完整性\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response:\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if end_marker not in response:\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content = \"\"\n    if start_marker in response and end_marker in response:\n        content = response.split(start_marker)[1].split(end_marker)[0].strip()\n    \n    # 检查开头格式\n    if content and not content.startswith(\"在当今社会\"):\n        err_infos.append(\"回答未以'在当今社会'开头\")\n    \n    # 检查句子结尾\n    if content:\n        sentences = re.split(r'[。？！]', content)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        for i, s in enumerate(sentences):\n            if s and s[-1] != '乎':\n                err_infos.append(f\"第{i+1}句结尾非'乎'字: '{s}'\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "在现代社会中,环保已经成为了一个重要的话题。随着工业化的发展和城市化进程的推进,环境污染问题日益严重。为了保护我们的地球,许多国家和地区都在努力采取各种措施来减少污染,改善环境质量。环保不仅仅是政府的责任,更是每个公民应尽的义务。我们可以通过一些简单的日常行为来为环保做出贡献,比如减少使用一次性塑料制品,节约用水,选择低碳出行等。通过这些小小的行动,我们可以共同创造一个更美好的未来。\n\n请写一篇关于如何在日常生活中践行环保理念的文章。文章只有三个段落，并在每个段落用两个换行符“\n\n”分隔开来，文中避免出现\"科技\",\"机器人\",\"虚拟\"这三个词。请详细解释三种在日常生活中可以践行环保理念的方法，并使用“【方法1】”、“【方法2】”和“【方法3】”作为主要方法的占位符。在第三段中“可持续”这个词务必至少出现两次。文章的内容不能出现中文逗号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    # 导入必要的库\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答未正确使用【答案开始】和【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查段落分隔符\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 3:\n        err_infos.append(f\"段落数量错误：应为3个段落，实际为{len(paragraphs)}个\")\n    \n    # 检查方法占位符\n    required_placeholders = {\"【方法1】\", \"【方法2】\", \"【方法3】\"}\n    found_placeholders = set()\n    for i, para in enumerate(paragraphs):\n        if \"【方法\" in para:\n            matches = re.findall(r\"【方法[123]】\", para)\n            found_placeholders.update(matches)\n    \n    missing_ph = required_placeholders - found_placeholders\n    if missing_ph:\n        err_infos.append(f\"缺少方法占位符：{', '.join(missing_ph)}\")\n    \n    # 检查第三段中的\"可持续\"\n    if len(paragraphs) >= 3:\n        sustainable_count = paragraphs[2].count(\"可持续\")\n        if sustainable_count < 2:\n            err_infos.append(f\"第三段中'可持续'出现次数不足：应为至少2次，实际{sustainable_count}次\")\n    \n    # 检查禁止词\n    banned_words = [\"科技\", \"机器人\", \"虚拟\"]\n    for word in banned_words:\n        if word in content:\n            err_infos.append(f\"包含禁止词：'{word}'\")\n    \n    # 检查中文逗号\n    if \"，\" in content:\n        err_infos.append(\"内容包含中文逗号\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos if err_infos else []\n    }"}
{"prompt": "在现代社会中，交通堵塞和空气污染已经成为城市居民面临的主要问题之一。许多城市正在寻找解决这些问题的方法，例如推广公共交通、建设步行和自行车道等。另一个新兴的解决方案是共享电动车。共享电动车不仅可以减少个人车辆的使用频率，还可以在短距离出行时提供便利。尽管共享电动车在许多城市中已经得到了推广，但仍存在一些问题，例如安全性、维护和市民接受度等。\n\n请你写一篇关于共享电动车发展的文章，具体描述共享电动车在你所在城市的现状，指出其优势和存在的问题，并提出改进措施。在文章中，避免使用“污染”、“能源”和“环保”这三个词语。文章需要只出现12个句子（用中文句号或问号或感叹号分隔），并且第六个句子要求以“需要进一步完善”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证响应格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"未正确使用答案标记\"}\n    \n    # 提取文章内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查禁用词\n    forbidden_words = [\"污染\", \"能源\", \"环保\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        return {\"check_code\": False, \"reason\": f\"包含禁用词: {', '.join(found_words)}\"}\n    \n    # 分割句子并验证数量\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) != 12:\n        return {\"check_code\": False, \"reason\": f\"句子数量错误(要求12句，实际{len(sentences)}句)\"}\n    \n    # 验证第六句结尾\n    if not sentences[5].endswith(\"需要进一步完善\"):\n        return {\"check_code\": False, \"reason\": \"第六句未以'需要进一步完善'结尾\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请描述一下家庭自动化系统的优点和潜在的缺点。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    \n    # 检查开头标记\n    if not response.startswith(start_tag):\n        return {\"check_code\": False, \"reason\": \"missing start tag\"}\n    \n    # 检查结尾标记\n    if not response.endswith(end_tag):\n        return {\"check_code\": False, \"reason\": \"missing end tag\"}\n    \n    # 提取中间内容\n    content = response[len(start_tag):-len(end_tag)]\n    \n    # 检查分隔符\n    if \"******\" not in content:\n        return {\"check_code\": False, \"reason\": \"separator not found\"}\n    \n    # 分割答案并检查数量\n    parts = content.split(\"******\")\n    if len(parts) != 2:\n        return {\"check_code\": False, \"reason\": f\"expected 2 answers but found {len(parts)-1} separators\"}\n    \n    # 检查答案非空\n    if not parts[0].strip():\n        return {\"check_code\": False, \"reason\": \"first answer is empty\"}\n    if not parts[1].strip():\n        return {\"check_code\": False, \"reason\": \"second answer is empty\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "随着现代城市化进程的加快，许多人开始关注城市中的绿色空间及其对生活质量的影响。公园、绿地和植被不仅能够美化环境，还能提供休闲娱乐的场所，帮助缓解压力，同时对城市气候调节、空气净化等方面有重要作用。然而，在很多城市中，绿色空间的规划与维护面临诸多挑战，包括土地资源紧张、管理不善以及公众参与度不足等问题。不同地区的城市对绿色空间的需求和功能优先级可能也有所不同，例如，在湿热地区，绿色空间更多用于降温和改善空气质量，而在干旱地区，则可能更注重水资源管理与植被耐旱性。\n\n请你设计一份关于“如何优化城市绿色空间功能与管理”的策略报告提纲。在文章中，需要满足以下内容：  \n1. 文章需要详细列出三个主要优化方向，并使用“&原因1&”、“&原因2&”和“&原因3&”作为每个优化方向的占位符。  \n2. 针对每个优化方向，补充2-3个具体实施步骤或建议。  \n3. 在结尾处简要说明优化城市绿色空间的重要意义，并结合实际案例（可以虚构），说明这些优化措施可能带来的潜在效果。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证回答格式\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"回答格式错误：缺少【答案开始】/【答案结束】标记\"}\n    \n    # 提取答案内容\n    try:\n        content = response.split(\"【答案开始】\", 1)[1].split(\"【答案结束】\", 1)[0].strip()\n    except Exception:\n        return {\"check_code\": False, \"reason\": \"内容提取失败\"}\n\n    # 检查三个主要优化方向\n    direction_pattern = r\"&原因1&\\s*&原因2&\\s*&原因3&\"\n    if \"&原因1&\" not in response or \"&原因2&\" not in response or \"&原因3&\" not in response:\n        return {\"check_code\": False, \"reason\": \"优化方向数量错误：需要3个\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于“城市公园对社区健康的影响”的文章。文章应至少包含150个汉字，且不超过200个汉字。在文中详细解释并列出三种主要原因，使用“&原因1&”、“&原因2&”和“&原因3&”作为主要原因的占位符。文章应恰好为8个句子（每个句子之间用^作为分隔符号）。请确保文章只出现3个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第2段的第8个汉字必须是“绿”字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 1. 检查全局标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答开头缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答结尾缺少【答案结束】标记\")\n    \n    # 提取内容部分（去除首尾标记）\n    content = response[5:-5]  # 去除【答案开始】和【答案结束】\n    \n    # 2. 检查要求重复部分\n    required_text = (\n        \"请写一篇关于“城市公园对社区健康的影响”的文章。文章应至少包含150个汉字，且不超过200个汉字。在文中详细解释并列出三种主要原因，使用“&原因1&”、“&原因2&”和“&原因3&”作为主要原因的占位符。文章应恰好为8个句子（每个句子之间用^作为分隔符号）。请确保文章只出现3个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第2段的第8个汉字必须是“绿”字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\"\n    )\n    if required_text not in content:\n        err_infos.append(\"未正确重复指令要求\")\n    \n    # 3. 提取文章内容（要求重复后的部分）\n    article_start = content.find(required_text) + len(required_text)\n    article = content[article_start:].strip()\n    \n    # 4. 检查段落结构\n    paragraphs = article.split(\"～～\")\n    if len(paragraphs) != 3:\n        err_infos.append(f\"段落数量应为3，实际为{len(paragraphs)}\")\n    \n    # 5. 检查句子数量\n    sentences = []\n    for para in paragraphs:\n        sentences.extend(para.split(\"^\"))\n    if len(sentences) != 8:\n        err_infos.append(f\"句子数量应为8，实际为{len(sentences)}\")\n    \n    # 6. 检查字数限制\n    chinese_chars = re.findall(r'[一-鿿]', article)\n    char_count = len(chinese_chars)\n    if char_count < 150:\n        err_infos.append(f\"汉字数量不足150字（实际{char_count}字）\")\n    if char_count > 200:\n        err_infos.append(f\"汉字数量超过200字（实际{char_count}字）\")\n    \n    # 7. 检查占位符\n    placeholders = [\"&原因1&\", \"&原因2&\", \"&原因3&\"]\n    for ph in placeholders:\n        if ph not in article:\n            err_infos.append(f\"缺少占位符{ph}\")\n    \n    # 8. 检查第2段第8个汉字\n    if len(paragraphs) >= 2:\n        para2_chars = re.findall(r'[一-鿿]', paragraphs[1])\n        if len(para2_chars) >= 8:\n            if para2_chars[7] != \"绿\":\n                err_infos.append(f\"第2段第8个汉字应为'绿'，实际为'{para2_chars[7]}'\")\n        else:\n            err_infos.append(f\"第2段汉字不足8个（实际{len(para2_chars)}字）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于不同文化中的节日庆祝方式对全球化的影响的文章，分析其社会意义和潜在挑战。请确保文章标题用$()$标记，如$(xxx)$。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证结果数据结构\n    result = {\n        \"check_code\": False,\n        \"reason\": []\n    }\n    \n    # 检查是否包含答案标记\n    if not re.search(r\"【答案开始】\", response):\n        result[\"reason\"].append(\"缺少【答案开始】标记\")\n    if not re.search(r\"【答案结束】\", response):\n        result[\"reason\"].append(\"缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    match = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n    if not match:\n        result[\"reason\"].append(\"未找到有效的答案内容区间\")\n        return result\n    \n    answer_content = match.group(1).strip()\n    \n    # 检查标题格式\n    title_match = re.search(r\"\\$\\(.*?\\)\\$\", answer_content)\n    if not title_match:\n        result[\"reason\"].append(\"缺少$()$格式的标题\")\n    else:\n        # 验证标题位置是否为内容开头\n        if not answer_content.startswith(title_match.group(0)):\n            result[\"reason\"].append(\"标题未出现在内容开头位置\")\n        \n        # 验证标题唯一性\n        if len(re.findall(r\"\\$\\(.*?\\)\\$\", answer_content)) > 1:\n            result[\"reason\"].append(\"检测到多个$()$格式标记\")\n    \n    # 判断最终验证结果\n    if not result[\"reason\"]:\n        result[\"check_code\"] = True\n        result[\"reason\"] = \"\"\n    else:\n        result[\"reason\"] = \"; \".join(result[\"reason\"])\n    \n    return result"}
{"prompt": "请撰写一个关于“城市公共交通”的文章，要求在文章中至少出现5次“效率”，必须只出现2次“环保”，并且不多于3次“便捷”。文章应由15个句子组成，其中第8个句子必须刚好只有12个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答开头缺少'【答案开始】'标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答结尾缺少'【答案结束】'标记\")\n    \n    # 提取答案内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 关键词计数验证\n    efficiency_count = content.count(\"效率\")\n    if efficiency_count < 5:\n        errors.append(f\"'效率'出现次数不足5次（实际{efficiency_count}次）\")\n    \n    environmental_count = content.count(\"环保\")\n    if environmental_count != 2:\n        errors.append(f\"'环保'出现次数不为2次（实际{environmental_count}次）\")\n    \n    convenient_count = content.count(\"便捷\")\n    if convenient_count > 3:\n        errors.append(f\"'便捷'出现次数超过3次（实际{convenient_count}次）\")\n    \n    # 句子数量和结构验证\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) != 15:\n        errors.append(f\"文章句子数量不为15句（实际{len(sentences)}句）\")\n    else:\n        # 验证第8句长度\n        eighth_sentence = sentences[7]\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', eighth_sentence)\n        if len(chinese_chars) != 12:\n            errors.append(f\"第8句汉字数量不为12个（实际{len(chinese_chars)}个）\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请描述一个繁忙的城市早晨场景，要求在描述中“公交车”至少出现三次，“行人”必须出现两次，“车流”最多出现四次。每句话最少10个字，最多20个字。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    import json\n    \n    # 定义错误信息列表\n    err_infos = []\n    \n    # 检查【答案开始】和【答案结束】标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        err_infos.append(\"缺少必要的答案标记\")\n        return json.dumps({\"check_code\": False, \"reason\": \";\".join(err_infos)})\n    \n    # 提取答案内容\n    answer_content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 检查指令重复部分\n    required_instruction = (\n        \"请描述一个繁忙的城市早晨场景，要求在描述中“公交车”至少出现三次，“行人”必须出现两次，“车流”最多出现四次。每句话最少10个字，最多20个字。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\"\n    )\n    \n    if not answer_content.startswith(required_instruction):\n        err_infos.append(\"未正确重复指令要求\")\n    \n    # 提取两个答案\n    answers_part = answer_content[len(required_instruction):].strip()\n    answers = re.split(r\"\\*{6}\", answers_part)\n    \n    if len(answers) != 2:\n        err_infos.append(\"答案分隔符不符合要求\")\n        return json.dumps({\"check_code\": False, \"reason\": \";\".join(err_infos)})\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        \n        # 检查句子长度\n        sentences = re.split(r'[。！？…]', ans)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        for i, sent in enumerate(sentences, 1):\n            if len(sent) < 10:\n                err_infos.append(f\"答案{idx}第{i}句少于10字: '{sent}'\")\n            if len(sent) > 20:\n                err_infos.append(f\"答案{idx}第{i}句超过20字: '{sent}'\")\n        \n        # 检查关键词次数\n        bus_count = ans.count(\"公交车\")\n        if bus_count < 3:\n            err_infos.append(f\"答案{idx}公交车出现{bus_count}次<3\")\n        \n        ped_count = ans.count(\"行人\")\n        if ped_count != 2:\n            err_infos.append(f\"答案{idx}行人出现{ped_count}次≠2\")\n        \n        traffic_count = ans.count(\"车流\")\n        if traffic_count > 4:\n            err_infos.append(f\"答案{idx}车流出现{traffic_count}次>4\")\n    \n    check_code = len(err_infos) == 0\n    return {\"check_code\": check_code, \"reason\": \";\".join(err_infos)}\n"}
{"prompt": "在现代社会，随着生活水平的提高，人们对健康的关注也在不断增加。近年来，越来越多的人开始重视健康饮食，追求更科学的饮食习惯。健康饮食不仅能够帮助人们维持理想的体重，还可以预防多种慢性疾病，如心脏病、糖尿病和高血压等。研究表明，均衡的饮食结构和适当的运动是保持身体健康的重要因素。\n\n请写一篇关于健康饮食习惯的文章，文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。此外，只全文的第13个句子要以“为了更好地保持身体健康”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 错误信息收集\n    err_infos = []\n    \n    # 1. 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少开始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 2. 检查段落结构\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误（需要4段，实际{len(paragraphs)}段）\")\n    \n    # 3. 检查第三段句子数量\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2].strip()\n        # 使用中文标点分割句子\n        sentences = re.split(r'[。？！]', third_para)\n        # 过滤空字符串\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        if len(sentences) != 6:\n            err_infos.append(f\"第三段句子数量错误（需要6句，实际{len(sentences)}句）\")\n    \n    # 4. 检查第13个句子\n    all_text = \"\".join(paragraphs)\n    all_sentences = re.split(r'[。？！]', all_text)\n    all_sentences = [s.strip() for s in all_sentences if s.strip()]\n    \n    if len(all_sentences) < 13:\n        err_infos.append(f\"总句子数量不足（需要至少13句，实际{len(all_sentences)}句）\")\n    elif not all_sentences[12].startswith(\"为了更好地保持身体健康\"):\n        err_infos.append(f\"第13句开头错误：{all_sentences[12][:20]}...\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“自然灾害对农业的影响”的文章，文章中避免出现“气候变化”、“全球变暖”和“生态系统”这三个短语。文章内容需详细分析自然灾害对农业生产的具体影响，并列举三个主要案例，使用“&案例1&”、“&案例2&”和“&案例3&”作为案例的占位符。文章只能有5个段落（不要出现标题），每个段落之间用“～～”符号分隔，其中第3段必须至少150个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 1. 检查开始结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取核心内容\n    content = response[5:-5].strip()  # 移除【答案开始/结束】标记\n    \n    # 2. 检查禁用短语\n    banned_phrases = [\"气候变化\", \"全球变暖\", \"生态系统\"]\n    for phrase in banned_phrases:\n        if phrase in content:\n            err_infos.append(f\"包含禁用短语'{phrase}'\")\n    \n    # 3. 检查段落结构和分隔符\n    segments = content.split(\"～～\")\n    if len(segments) != 5:\n        err_infos.append(f\"段落数量错误({len(segments)}非5段)\")\n    \n    # 4. 检查第三段长度（>=150汉字）\n    if len(segments) >= 3:\n        # 提取汉字（\\u4e00-\\u9fa5）\n        hanzi_only = re.findall(r'[\\u4e00-\\u9fa5]', segments[2])\n        if len(hanzi_only) < 150:\n            err_infos.append(f\"第三段仅{len(hanzi_only)}汉字\")\n    else:\n        err_infos.append(\"缺少第三段内容\")\n    \n    # 5. 检查案例占位符\n    required_placeholders = [\"&案例1&\", \"&案例2&\", \"&案例3&\"]\n    for ph in required_placeholders:\n        if content.count(ph) != 1:\n            err_infos.append(f\"占位符'{ph}'缺失或重复\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "在当今快节奏的生活中，科技的快速发展对人们的日常生活产生了深远的影响。智能家居设备已逐渐成为现代家庭的一部分，从智能灯泡、恒温器到语音助手，这些设备旨在提高生活的便利性和舒适性。然而，这些技术的普及也引发了对隐私和安全的担忧，尤其是在个人数据的收集和使用方面。此外，随着老龄化社会的加剧，如何利用科技手段帮助老年人更好地生活成为一个重要议题。智能家居技术不仅可以提供便利，还可以通过健康监测和紧急呼叫功能为老年人提供安全保障。这种双刃剑的性质要求我们在享受科技带来的便利时，必须警惕潜在的风险，以确保我们的生活不仅便利，而且安全。  \n\n请撰写一篇关于“智能家居对老年人生活影响”的文章，要求文章长度至少为120个汉字且不超过180个汉字。文章应包括12个句子，其中第5个句子的第3个汉字必须是“安”字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查标记格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"格式错误\")\n        return {\"check_code\": False, \"reason\": \",\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查字数\n    ch_chars = re.findall(r'[\\u4e00-\\u9fa5]', content)\n    if len(ch_chars) < 120:\n        err_infos.append(\"字数不足\")\n    elif len(ch_chars) > 180:\n        err_infos.append(\"字数超过\")\n    \n    # 分割句子\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    \n    # 检查句子数量\n    if len(sentences) != 12:\n        err_infos.append(\"句子数量错误\")\n    \n    # 检查第五句第三个汉字\n    if len(sentences) >= 5:\n        fifth_sentence = sentences[4]\n        hanzi_in_fifth = re.findall(r'[\\u4e00-\\u9fa5]', fifth_sentence)\n        if len(hanzi_in_fifth) < 3 or hanzi_in_fifth[2] != '安':\n            err_infos.append(\"第五句第三个汉字错误\")\n    else:\n        err_infos.append(\"第五句不存在\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \",\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“城市交通变化”的文章。请确保文章仅由4个段落（不要出现标题）组成，每个段落之间用'～～'符号分隔。其中第2段的第8个汉字必须是“流”字。同时，文章句子总数为11个句子（用中文句号或问号或感叹号分隔），其中第6个句子的第3个汉字必须是“道”字。最后，请确保第9个句子刚好只有9个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    # 检查答案标记\n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        return {\"check_code\": False, \"reason\": \"答案标记缺失或位置错误\"}\n    \n    content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 检查段落分隔符和段落数量\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量错误: 需要4段, 实际{len(paragraphs)}段\"}\n    \n    # 检查第二段第八个汉字\n    chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', paragraphs[1])\n    if len(chinese_chars) < 8 or chinese_chars[7] != '流':\n        return {\"check_code\": False, \"reason\": \"第二段第八个汉字不是'流'\"}\n    \n    # 分割句子并检查数量\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 11:\n        return {\"check_code\": False, \"reason\": f\"句子数量错误: 需要11句, 实际{len(sentences)}句\"}\n    \n    # 检查第六句第三个汉字\n    sixth_chars = re.findall(r'[\\u4e00-\\u9fa5]', sentences[5])\n    if len(sixth_chars) < 3 or sixth_chars[2] != '道':\n        return {\"check_code\": False, \"reason\": \"第六句第三个汉字不是'道'\"}\n    \n    # 检查第九句汉字数量\n    ninth_chars = re.findall(r'[\\u4e00-\\u9fa5]', sentences[8])\n    if len(ninth_chars) != 9:\n        return {\"check_code\": False, \"reason\": f\"第九句汉字数量错误: 需要9个, 实际{len(ninth_chars)}个\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于城市公共交通系统改进建议的文章。文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。整篇文章的内容不能出现中文逗号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或以'【答案结束】'结尾\"\n        }\n    response = response.strip(\"【答案开始】\").strip(\"【答案结束】\").strip()\n    paragraphs = response.split('\\n\\n')\n    paragraphs = [k for k in paragraphs if k]\n    if len(paragraphs) != 4:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章段落数不等于四\"\n        }\n\n    # 正则表达式模式：匹配中文句号、问号、感叹号中的任意一个\n    pattern = r'[。？！]'\n\n    # 使用正则表达式分割文本\n    raw_sentences = re.split(pattern, paragraphs[2])\n\n    # 过滤分割结果中的空字符串（处理文本开头/结尾有标点或连续标点的情况）\n    third_paragraph_sentences = [sentence.strip() for sentence in raw_sentences if sentence.strip()]\n    \n    if len(third_paragraph_sentences) != 6:\n        return {\n            \"check_code\": False,\n            \"reason\": \"第三段句子数不等于六\"\n        }\n    if '，' in content:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章中出现了中文逗号\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请写一篇关于烹饪技巧的文章，其中包含对不同烹饪方法的介绍。文章应仅包含4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“调味”这个词必须至少出现两次。请确保文章的第四个句子（用中文句号或问号或感叹号分隔）以“在厨房中”开头。同时，不能使用“食谱”、“美味”、“餐厅”这几个词，必须出现“佳肴”、“鲜美”这两个词。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查回答格式是否包含【答案开始】和【答案结束】\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"答案格式错误\"}\n    \n    # 提取答案部分\n    start_idx = response.find(\"【答案开始】\") + 6\n    end_idx = response.find(\"【答案结束】\")\n    answer = response[start_idx:end_idx].strip()\n    \n    # 检查重复指令部分是否完整\n    required_text = \"请写一篇关于烹饪技巧的文章，其中包含对不同烹饪方法的介绍。文章应仅包含4个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。在第二个段落中，“调味”这个词必须至少出现两次。请确保文章的第四个句子（用中文句号或问号或感叹号分隔）以“在厨房中”开头。同时，不能使用“食谱”、“美味”、“餐厅”这几个词，必须出现“佳肴”、“鲜美”这两个词。\"\n    if not response.startswith(required_text):\n        return {\"check_code\": False, \"reason\": \"未按要求重复指令\"}\n    \n    # 验证段落数量\n    paragraphs = [p.strip() for p in answer.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量错误（实际{len(paragraphs)}段）\"}\n    \n    # 验证第二段\"调味\"出现次数\n    if len(paragraphs) < 2 or paragraphs[1].count(\"调味\") < 2:\n        return {\"check_code\": False, \"reason\": \"第二段'调味'出现次数不足\"}\n    \n    # 验证第四个句子\n    sentences = re.split(r'[。？！]', answer)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) < 4 or not sentences[3].startswith(\"在厨房中\"):\n        return {\"check_code\": False, \"reason\": \"第四个句子未以'在厨房中'开头\"}\n    \n    # 验证禁用词\n    forbidden_words = [\"食谱\", \"美味\", \"餐厅\"]\n    for word in forbidden_words:\n        if word in answer:\n            return {\"check_code\": False, \"reason\": f\"使用了禁用词'{word}'\"}\n    \n    # 验证必现词\n    required_words = [\"佳肴\", \"鲜美\"]\n    for word in required_words:\n        if word not in answer:\n            return {\"check_code\": False, \"reason\": f\"缺少必现词'{word}'\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}\n"}
{"prompt": "撰写一篇关于城市夜景的文章，文章内容最少250字，最多450字。文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“灯光”这个词务必恰好只出现两次。在第四个段落中，必须刚好由四个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    content = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 验证字数要求\n    char_count = len(re.sub(r'\\s', '', content))\n    if char_count < 250:\n        err_infos.append(f\"字数不足250字（当前{char_count}字）\")\n    if char_count > 450:\n        err_infos.append(f\"字数超过450字（当前{char_count}字）\")\n    \n    # 验证段落结构\n    paragraphs = [p.strip() for p in content.split('\\n\\n') if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误（要求4段，实际{len(paragraphs)}段）\")\n    \n    # 验证第二段灯光出现次数\n    if len(paragraphs) > 1:\n        light_count = paragraphs[1].count(\"灯光\")\n        if light_count != 2:\n            err_infos.append(f\"第二段灯光出现{light_count}次（要求恰好2次）\")\n    \n    # 验证第四段句子数量\n    if len(paragraphs) > 3:\n        sentences = [s.strip() for s in re.split(r'[。？！]', paragraphs[3]) if s.strip()]\n        if len(sentences) != 4:\n            err_infos.append(f\"第四段句子数量错误（要求4句，实际{len(sentences)}句）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“城市夜生活”的短文，要求在描述中至少出现4次“霓虹灯”，必须正好出现3次“街角小摊”，至多出现2次“喧嚣”。文章应包含4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。并确保第二个段落不含任何标点符号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    import string\n    \n    # 定义错误信息列表\n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容\n    content = response.split(\"【答案开始】\", 1)[1].split(\"【答案结束】\", 1)[0].strip()\n    \n    # 验证段落结构\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误: 应为4段, 实际{len(paragraphs)}段\")\n    \n    # 验证第二段无标点\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1]\n        # 定义中英文标点集合\n        punctuation_set = set(string.punctuation + \"，。！？；：“”‘’（）【】《》、\")\n        if any(char in punctuation_set for char in second_para):\n            err_infos.append(\"第二段落包含标点符号\")\n    \n    # 关键词计数\n    neon_count = content.count(\"霓虹灯\")\n    stall_count = content.count(\"街角小摊\")\n    noise_count = content.count(\"喧嚣\")\n    \n    # 验证关键词要求\n    if neon_count < 4:\n        err_infos.append(f\"'霓虹灯'出现不足4次: 实际{neon_count}次\")\n    if stall_count != 3:\n        err_infos.append(f\"'街角小摊'出现次数错误: 应正好3次, 实际{stall_count}次\")\n    if noise_count > 2:\n        err_infos.append(f\"'喧嚣'出现超过2次: 实际{noise_count}次\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"所有验证通过\"\n    }"}
{"prompt": "请撰写一篇关于城市绿化对居民生活质量的影响的文章，请确保文章标题用《》标记。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义指令要求字符串\n    instruction = \"请撰写一篇关于城市绿化对居民生活质量的影响的文章，请确保文章标题用《》标记。\"\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        return {\"check_code\": False, \"reason\": \"回答缺少起始标记【答案开始】\"}\n    if not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"回答缺少结束标记【答案结束】\"}\n    \n    # 提取内容部分\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    # 检查是否完整重复指令\n    if not content.startswith(instruction):\n        return {\"check_code\": False, \"reason\": \"回答未一字不差重复指令要求\"}\n    \n    # 检查重复指令后的内容结构\n    article_part = content[len(instruction):].strip()\n    if not article_part:\n        return {\"check_code\": False, \"reason\": \"重复指令后未提供文章内容\"}\n    \n    # 检查标题格式\n    title_match = re.search(r\"^《.+?》\", article_part)\n    if not title_match:\n        return {\"check_code\": False, \"reason\": \"文章标题未用《》标记或格式错误\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于“城市交通拥堵解决方案”的文章。文章应包含4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“公共交通”这个词务必至少出现两次。第三个句子（用中文句号或问号或感叹号分隔）必须以“通过合理规划”开头。请确保回答内容至少200字，最多350字。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    try:\n        content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n        answers = [ans.strip() for ans in content.split(\"******\") if ans.strip()]\n    except Exception as e:\n        return {\"check_code\": False, \"reason\": f\"内容解析失败: {str(e)}\"}\n    \n    # 检查答案数量\n    if len(answers) != 2:\n        err_infos.append(f\"需要2个答案，实际检测到{len(answers)}个\")\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers):\n        # 检查段落分隔\n        paragraphs = [p.strip() for p in ans.split(\"\\n\\n\") if p.strip()]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{i+1}段落数错误({len(paragraphs)}段)\")\n            continue\n        \n        # 检查第二段\"公共交通\"出现次数\n        public_transit_count = paragraphs[1].count(\"公共交通\")\n        if public_transit_count < 2:\n            err_infos.append(f\"答案{i+1}第二段'公共交通'出现次数不足(需≥2,实际{public_transit_count})\")\n        \n        # 检查第三句开头\n        sentences = []\n        for char in paragraphs:  # 合并所有段落分句\n            sentences.extend([s.strip() for s in re.split(r'[。？！]', char) if s.strip()])\n        \n        if len(sentences) < 3:\n            err_infos.append(f\"答案{i+1}有效句子数不足3句\")\n        elif not sentences[2].startswith(\"通过合理规划\"):\n            err_infos.append(f\"答案{i+1}第三句开头错误:'{sentences[2][:10]}...'\")\n        \n        # 检查字数\n        word_count = len(ans)\n        if word_count < 200 or word_count > 350:\n            err_infos.append(f\"答案{i+1}字数不符(需200-350字,实际{word_count}字)\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一段关于“城市夜生活”的文章，文章中必须至少出现3次“灯光”，必须只出现2次“喧闹”，且最多出现1次“宁静”。要求文章的最后一句话以“城市的夜晚总是充满魅力。”结尾。文章应恰好由10个句子（用中文句号或问号或感叹号分隔）组成，其中第5个句子的第3个汉字必须是“夜”字。同时，确保第7个句子不多于12个汉字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    required_repetition = \"请撰写一段关于“城市夜生活”的文章，文章中必须至少出现3次“灯光”，必须只出现2次“喧闹”，且最多出现1次“宁静”。要求文章的最后一句话以“城市的夜晚总是充满魅力。”结尾。文章应恰好由10个句子（用中文句号或问号或感叹号分隔）组成，其中第5个句子的第3个汉字必须是“夜”字。同时，确保第7个句子不多于12个汉字。\"\n    errors = []\n    \n    # 检查是否一字不差重复要求\n    if not response.startswith(required_repetition):\n        errors.append(\"未正确重复指令要求\")\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        errors.append(\"答案标记缺失或位置错误\")\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 检查关键词次数\n    if content.count(\"灯光\") < 3:\n        errors.append(f\"灯光出现次数不足3次（实际：{content.count('灯光')}次）\")\n    if content.count(\"喧闹\") != 2:\n        errors.append(f\"喧闹出现次数不是2次（实际：{content.count('喧闹')}次）\")\n    if content.count(\"宁静\") > 1:\n        errors.append(f\"宁静出现次数超过1次（实际：{content.count('宁静')}次）\")\n    \n    # 检查结尾句子\n    if not content.endswith(\"城市的夜晚总是充满魅力。\"):\n        errors.append(\"结尾句不符合要求\")\n    \n    # 分割句子并检查数量\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) != 10:\n        errors.append(f\"句子数量不是10句（实际：{len(sentences)}句）\")\n    else:\n        # 检查第5句第3个汉字\n        if len(sentences[4]) < 3 or sentences[4][2] != \"夜\":\n            errors.append(f\"第5句第3字不是'夜'（实际：'{sentences[4][2:3]}'）\")\n        \n        # 检查第7句长度（仅统计汉字）\n        hanzi_count = len(re.findall(r'[一-龥]', sentences[6]))\n        if hanzi_count > 12:\n            errors.append(f\"第7句超过12个汉字（实际：{hanzi_count}字）\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \";\".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于“古代建筑与现代设计融合的可能性”的文章，在文章中必须使用“不朽”和“革新”这两个词语。请确保文章标题用$()$标记，如$(古今交融：建筑设计新视角)$。文章必须恰好由8个句子（用中文句号或问号或感叹号分隔）组成，其中第3个句子必须至少15个汉字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义原始指令要求\n    original_instruction = (\n        \"请撰写一篇关于“古代建筑与现代设计融合的可能性”的文章，在文章中必须使用“不朽”和“革新”这两个词语。\"\n        \"请确保文章标题用$()$标记，如$(古今交融：建筑设计新视角)$。文章必须恰好由8个句子（用中文句号或问号或感叹号分隔）组成，\"\n        \"其中第3个句子必须至少15个汉字。\"\n    )\n    \n    errors = []\n    \n    # 1. 检查【答案开始】和【答案结束】标记\n    if \"【答案开始】\" not in response:\n        errors.append(\"缺少【答案开始】标记\")\n    if \"【答案结束】\" not in response:\n        errors.append(\"缺少【答案结束】标记\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取答案部分\n    start_index = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_index = response.find(\"【答案结束】\")\n    answer_section = response[start_index:end_index].strip()\n    \n    # 2. 检查是否重复指令要求\n    if not answer_section.startswith(original_instruction):\n        errors.append(\"未正确重复指令要求\")\n    \n    # 提取实际答案内容（去除重复的指令部分）\n    content_start = len(original_instruction)\n    actual_content = answer_section[content_start:].strip()\n    \n    # 3. 检查标题格式\n    title_match = re.search(r\"\\$\\(.*?\\)\\$\", actual_content)\n    if not title_match:\n        errors.append(\"缺少$()$格式的标题\")\n    \n    # 4. 检查句子数量\n    sentences = re.split(r'[。？！]', actual_content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 8:\n        errors.append(f\"句子数量为{len(sentences)}而非8个\")\n    \n    # 5. 检查第三句长度（至少15个汉字）\n    if len(sentences) >= 3:\n        third_sentence = sentences[2]\n        hanzi_count = len(re.findall(r'[一-龥]', third_sentence))\n        if hanzi_count < 15:\n            errors.append(f\"第三句仅含{hanzi_count}个汉字（需≥15）\")\n    elif len(sentences) < 3 and len(sentences) != 0:  # 避免句子数量错误时重复报错\n        errors.append(\"无法检查第三句（句子不足）\")\n    \n    # 6. 检查关键词\n    if \"不朽\" not in actual_content:\n        errors.append(\"缺少词语'不朽'\")\n    if \"革新\" not in actual_content:\n        errors.append(\"缺少词语'革新'\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请写一篇关于如何高效管理日常时间的文章。文章内容不得少于300个汉字，但不得超过600个汉字。文章中必须“规划”、“效率”和“目标”这三个词语。文章中必须列出三种主要的方法，并使用“&方法1&”、“&方法2&”和“&方法3&”作为主要方法的占位符。同时，文章的第二个句子（用中文句号或问号或感叹号分隔）必须以“在现代快节奏的生活中”这几个字开头，并且文章的第四个句子必须以“这对个人成长至关重要。”这几个字结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n\n    # 初始化验证结果\n    check_code = True\n    err_infos = []\n\n    # 验证标记完整性\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        check_code = False\n        err_infos.append(\"缺少【答案开始】或【答案结束】标记\")\n        return {\"check_code\": check_code, \"reason\": err_infos}\n\n    # 提取答案内容\n    start_index = response.index(\"【答案开始】\") + 6\n    end_index = response.index(\"【答案结束】\")\n    content = response[len(\"【答案开始】\"):-len(\"【答案开始】\")].strip()\n\n    # 验证字数限制\n    hanzi_count = len(re.findall(r'[一-龥]', content))\n    if hanzi_count < 300:\n        check_code = False\n        err_infos.append(f\"字数不足300字（实际{hanzi_count}字）\")\n    if hanzi_count > 600:\n        check_code = False\n        err_infos.append(f\"字数超过600字（实际{hanzi_count}字）\")\n\n    # 验证关键词存在性\n    required_words = [\"规划\", \"效率\", \"目标\"]\n    for word in required_words:\n        if word not in content:\n            check_code = False\n            err_infos.append(f\"缺少关键词'{word}'\")\n\n    # 验证方法占位符\n    method_placeholders = [\"&方法1&\", \"&方法2&\", \"&方法3&\"]\n    for placeholder in method_placeholders:\n        if placeholder not in content:\n            check_code = False\n            err_infos.append(f\"缺少方法占位符'{placeholder}'\")\n\n    # 分割句子\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    \n    # 验证第二句开头\n    if len(sentences) >= 2:\n        if not sentences[1].startswith(\"在现代快节奏的生活中\"):\n            check_code = False\n            err_infos.append(\"第二句开头不符合要求\")\n    else:\n        check_code = False\n        err_infos.append(\"文章不足2个句子\")\n\n    # 验证第四句结尾\n    if len(sentences) >= 4:\n        if not sentences[3].endswith(\"这对个人成长至关重要\"):\n            check_code = False\n            err_infos.append(\"第四句结尾不符合要求\")\n    else:\n        check_code = False\n        err_infos.append(\"文章不足4个句子\")\n\n    return {\"check_code\": check_code, \"reason\": err_infos}\n"}
{"prompt": "请描述一个关于“如何在家庭环境中培养孩子的时间管理技能”的任务。文本只能恰好由4个段落（不要出现标题）组成，每个段落之间用“～～”符号分隔。其中第二个段落中，“习惯”一词务必至少出现2次。第四个段落中不得包含任何标点符号。文章避免使用“规划”、“效率”和“压力”这三个词语。文章内容不得少于300个汉字，但不得超过500个汉字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from string import punctuation as en_punctuation\n    \n    err_infos = []\n    \n    # 检查响应结构\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"响应缺少答案标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取实际回答内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查指令重复部分\n    required_text = '请描述一个关于“如何在家庭环境中培养孩子的时间管理技能”的任务。文本只能恰好由4个段落（不要出现标题）组成，每个段落之间用“～～”符号分隔。其中第二个段落中，“习惯”一词务必至少出现2次。第四个段落中不得包含任何标点符号。文章避免使用“规划”、“效率”和“压力”这三个词语。文章内容不得少于300个汉字，但不得超过500个汉字。'\n    if not content.startswith(required_text):\n        err_infos.append(\"指令未完整重复\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取实际回答文本\n    answer_text = content[len(required_text):].strip()\n    \n    # 检查段落分隔\n    paragraphs = [k for k in answer_text.split(\"～～\") if k.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误: {len(paragraphs)}\")\n    \n    # 检查第二段\"习惯\"出现次数\n    if len(paragraphs) > 1:\n        habit_count = paragraphs[1].count(\"习惯\")\n        if habit_count < 2:\n            err_infos.append(f\"第二段'习惯'出现次数不足: {habit_count}\")\n    \n    # 检查第四段标点符号\n    if len(paragraphs) > 3:\n        fourth_para = paragraphs[3]\n        if \"，\" in fourth_para or \"。\" in fourth_para or \"；\" in fourth_para or \"？\" in fourth_para:\n            err_infos.append(\"第四段包含标点符号\")\n    \n    # 检查禁用词\n    forbidden_words = [\"规划\", \"效率\", \"压力\"]\n    for word in forbidden_words:\n        if word in answer_text:\n            err_infos.append(f\"包含禁用词: {word}\")\n    \n    # 检查汉字数量\n    hanzi_count = len(re.findall(r'[一-龥]', answer_text))\n    if hanzi_count < 300:\n        err_infos.append(f\"汉字数量不足: {hanzi_count}\")\n    elif hanzi_count > 500:\n        err_infos.append(f\"汉字数量超过: {hanzi_count}\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请写一篇关于科技在现代教育中的应用的文章。文章只包含20个句子（用中文句号或问号或感叹号分隔），应只出现4个段落，每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“学生”这个词至少出现两次。文章以“科技改变了我们的学习方式。”这句话结尾。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    if \"******\" not in content:\n        err_infos.append(\"缺少答案分隔符******\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    answers = [ans.strip() for ans in content.split(\"******\") if ans.strip()]\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量错误: 需要2个，实际{len(answers)}个\")\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers, 1):\n        # 段落结构验证\n        paragraphs = [p.strip() for p in ans.split(\"\\n\\n\") if p.strip()]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{i}: 段落数量错误(需要4段，实际{len(paragraphs)}段)\")\n        \n        # 句子数量验证\n        sentences = [s.strip() for s in re.split(r'[。？！]', ans) if s.strip()]\n        if len(sentences) != 20:\n            err_infos.append(f\"答案{i}: 句子数量错误(需要20句，实际{len(sentences)}句)\")\n        \n        # 第二段学生词频验证\n        if len(paragraphs) >= 2:\n            student_count = paragraphs[1].count(\"学生\")\n            if student_count < 2:\n                err_infos.append(f\"答案{i}: 第二段'学生'出现次数不足(需要≥2次，实际{student_count}次)\")\n        elif len(paragraphs) < 2:\n            err_infos.append(f\"答案{i}: 缺少第二段落\")\n        \n        # 结尾验证\n        if not ans.endswith(\"科技改变了我们的学习方式。\"):\n            err_infos.append(f\"答案{i}: 未以指定句子结尾\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "近年来，随着城市化进程的加快和人们生活节奏的加快，快餐文化在全球范围内得到了迅速发展。快餐不仅方便快捷，还符合现代人追求高效生活的需求。然而，快餐的流行也引发了一系列问题，如饮食健康、环境污染等。快餐食品通常含有高盐、高糖、高脂肪等成分，长期食用可能会导致肥胖、心血管疾病等健康问题。此外，快餐包装材料的大量使用也对环境造成了巨大压力。比如，塑料包装难以降解，往往成为环境污染的主要来源之一。\n\n请你写一篇关于快餐文化对现代社会影响的文章，要求文章以“因此，我们需要重新审视快餐文化的利与弊。”这句话结尾。文章应只出现5个段落，每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“健康”这个词务必至少出现两次。“环境”这个词务必至少出现三次。文章的每个句子（用中文句号或问号或感叹号分隔）至少15个字，最多20个字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    # 检查首尾标记\n    if not response.startswith(start_marker):\n        errors.append(\"开头缺少【答案开始】标记\")\n    if not response.endswith(end_marker):\n        errors.append(\"结尾缺少【答案结束】标记\")\n    \n    # 提取实际内容\n    content = \"\"\n    if response.startswith(start_marker) and response.endswith(end_marker):\n        content = response[len(start_marker):-len(end_marker)].strip()\n    elif response.startswith(start_marker):\n        content = response[len(start_marker):].strip()\n    elif response.endswith(end_marker):\n        content = response[:-len(end_marker)].strip()\n    else:\n        content = response.strip()\n        if content:  # 如果非空内容但没有标记\n            errors.append(\"完全缺少首尾标记\")\n    \n    # 检查结尾句\n    if not content.endswith(\"因此，我们需要重新审视快餐文化的利与弊。\"):\n        errors.append(\"结尾句不符合要求\")\n    \n    # 分段检查\n    paragraphs = [p.strip() for p in content.split('\\n\\n') if p.strip()]\n    if len(paragraphs) != 5:\n        errors.append(f\"段落数量错误：需要5段，实际{len(paragraphs)}段\")\n    else:\n        # 检查第二段关键词\n        second_para = paragraphs[1]\n        health_count = second_para.count(\"健康\")\n        if health_count < 2:\n            errors.append(f\"第二段'健康'出现{health_count}次，要求至少2次\")\n        \n        env_count = second_para.count(\"环境\")\n        if env_count < 3:\n            errors.append(f\"第二段'环境'出现{env_count}次，要求至少3次\")\n        \n        # 检查所有句子长度\n        for p_idx, para in enumerate(paragraphs):\n            sentences = re.split(r'(?<=[。？！])', para)  # 按标点分割\n            sentences = [s.strip() for s in sentences if s.strip()]\n            \n            for s_idx, sent in enumerate(sentences):\n                if not sent.endswith(('。', '？', '！')):\n                    continue  # 跳过非完整句子\n                \n                length = len(sent)\n                if length < 15 or length > 20:\n                    errors.append(\n                        f\"第{p_idx+1}段第{s_idx+1}句长度{length}字：'{sent}'\"\n                    )\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于现代厨房设计趋势的简短文章，文章只能有4个段落（不要出现标题），每个段落之间用“～～”符号分隔，并且第3段必须恰好由6个句子（用中文句号或问号或感叹号分隔）组成。整篇文章只能有15个句子。文章内容必须至少60个汉字，但不超过120个汉字，并且必须以“这使得现代厨房更加实用且富有美感。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 初始化验证结果\n    err_infos = []\n    result = {\"check_code\": True, \"reason\": \"\"}\n    \n    # 检查答案标记\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    if start_tag not in response or end_tag not in response:\n        err_infos.append(\"缺少答案标记\")\n        result[\"check_code\"] = False\n        result[\"reason\"] = \";\".join(err_infos)\n        return result\n    \n    # 提取答案内容\n    content = response.split(start_tag)[1].split(end_tag)[0].strip()\n    print(content)\n    \n    # 检查段落结构\n    paragraphs = [k for k in content.split(\"～～\") if k.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误({len(paragraphs)}段)\")\n    \n    # 检查第三段句子数量\n    if len(paragraphs) >= 3:\n        sentences = re.split(r'[。？！]', paragraphs[2])\n        # 移除空字符串（末尾可能产生空字符串）\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            err_infos.append(f\"第三段句子数错误({len(sentences)}句)\")\n    \n    # 检查总句子数\n    all_text = content.replace(\"～～\", \"\")\n    total_sentences = re.findall(r'[^。？！]*[。？！]', all_text)\n    if len(total_sentences) != 15:\n        err_infos.append(f\"总句子数错误({len(total_sentences)}句)\")\n    \n    # 检查汉字数量\n    chinese_chars = re.findall(r'[一-龥]', content)\n    char_count = len(chinese_chars)\n    if char_count < 60 or char_count > 120:\n        err_infos.append(f\"汉字数量超限({char_count}字)\")\n    \n    # 检查结尾句\n    if not content.endswith(\"这使得现代厨房更加实用且富有美感。\"):\n        err_infos.append(\"结尾句不符合要求\")\n    \n    # 生成最终结果\n    if err_infos:\n        result[\"check_code\"] = False\n        result[\"reason\"] = \";\".join(err_infos)\n    \n    return result"}
{"prompt": "在世界各地，传统手工艺品一直是文化遗产的重要组成部分。它们不仅展现了各个民族的历史和文化，还反映了工匠们的智慧与技艺。然而，随着工业化和现代化的快速发展，许多传统手工艺面临着消失的风险。为了保护这些珍贵的文化遗产，许多国家和地区都采取了各种措施，如举办手工艺展览、开设手工艺培训课程、以及通过互联网平台扩大手工艺品的市场影响力。这些措施在一定程度上缓解了手工艺的衰退，但依然存在许多挑战，比如缺乏年轻人的参与、市场竞争激烈等。为了更好地保护和传承传统手工艺，有必要探讨更加创新和有效的策略，吸引更多人关注和参与。\n\n请撰写一篇关于传统手工艺保护策略的文章。文章应只有四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须只由六个句子（用中文句号或问号或感叹号分隔）组成。每个句子至少25个字，至多30个字。文章中需包含“传承”、“创新”和“文化”这三个词。请在文章中详细解释并列出其中两种主要挑战，使用“【挑战1】”和“【挑战2】”作为主要挑战的占位符。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 验证答案标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"答案缺少开始/结束标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取文章内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 验证段落结构\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误（应为4段，实际{len(paragraphs)}段）\")\n    \n    # 验证第三段落\n    if len(paragraphs) >= 3:\n        para3 = paragraphs[2].replace(\"\\n\", \"\")\n        sentences = [s.strip() for s in re.split(r'[。？！]', para3) if s.strip()]\n        \n        # 验证句子数量\n        if len(sentences) != 6:\n            err_infos.append(f\"第三段应为6个句子（实际{len(sentences)}句）\")\n        \n        # 验证句子长度\n        for i, s in enumerate(sentences):\n            char_count = len(s)\n            if char_count < 25 or char_count > 30:\n                err_infos.append(f\"第三段第{i+1}句长度异常（{char_count}字，应为25-30字）\")\n    else:\n        err_infos.append(\"缺少第三段落\")\n    \n    # 验证关键词\n    keywords = [\"传承\", \"创新\", \"文化\"]\n    for kw in keywords:\n        if kw not in content:\n            err_infos.append(f\"缺少关键词'{kw}'\")\n    \n    # 验证挑战占位符\n    challenge_placeholders = [\"【挑战1】\", \"【挑战2】\"]\n    for cp in challenge_placeholders:\n        if content.count(cp) != 1:\n            err_infos.append(f\"挑战占位符{cp}数量异常（应为1次）\")\n    \n    return {\"check_code\": len(err_infos) == 0, \"reason\": \";\".join(err_infos) if err_infos else \"\"}"}
{"prompt": "请写一篇主题为“不同类型的茶叶制作过程的比较”的文章。在其中详细解释并列出三种主要影响因素，使用“&因素A&”、“&因素B&”和“&因素C&”作为主要影响因素的占位符。全文只能有9个句子（用中文句号或问号或感叹号分隔）。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"missing start tag\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"missing end tag\")\n    \n    # 如果有标记错误直接返回，不继续检查内容\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \", \".join(err_infos)}\n    \n    # 提取核心内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案开始】\")]  # 去除首尾标记\n    \n    # 检查主题相关性\n    if \"茶叶\" not in content or (\"制作\" not in content and \"制茶\" not in content):\n        err_infos.append(\"topic deviation\")\n    \n    # 检查占位符存在性\n    required_placeholders = [\"&因素A&\", \"&因素B&\", \"&因素C&\"]\n    for ph in required_placeholders:\n        if ph not in content:\n            err_infos.append(f\"missing {ph}\")\n    \n    # 检查句子数量\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) != 9:\n        err_infos.append(f\"sentence count {len(sentences)}\")\n\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \", \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于城市交通变化的文章，文章需包含“共享单车”和“环保”这两个词。文章必须包含5个段落，每个段落用两个换行符“\n\n”分隔开。在第二个段落中，\"交通\"这个词务必至少出现两次，并且文章字数不少于300字，不超过500字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义验证所需的标准指令文本\n    instruction_str = '请写一篇关于城市交通变化的文章，文章需包含“共享单车”和“环保”这两个词。文章必须包含5个段落，每个段落用两个换行符“\\n\\n”分隔开。在第二个段落中，\"交通\"这个词务必至少出现两次，并且文章字数不少于300字，不超过500字。'\n    \n    # 初始化错误信息列表\n    errors = []\n    \n    # 检查标记完整性\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1:\n        errors.append(\"缺少【答案开始】标记\")\n    if end_idx == -1:\n        errors.append(\"缺少【答案结束】标记\")\n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        return {\n            \"check_code\": False,\n            \"reason\": \"; \".join(errors) if errors else \"标记顺序错误\"\n        }\n    \n    # 提取指令重复部分和答案内容\n    repeated_instruction = response[:start_idx].strip()\n    answer_content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 检查指令重复是否正确\n    if repeated_instruction != instruction_str:\n        errors.append(\"指令重复部分不完整或不准确\")\n    \n    # 检查关键词\n    if \"共享单车\" not in answer_content:\n        errors.append(\"文章缺少关键词'共享单车'\")\n    if \"环保\" not in answer_content:\n        errors.append(\"文章缺少关键词'环保'\")\n    \n    # 检查段落结构\n    paragraphs = [p.strip() for p in answer_content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 5:\n        errors.append(f\"段落数量不符要求(要求5段，实际{len(paragraphs)}段)\")\n    \n    # 检查第二段交通词频\n    if len(paragraphs) >= 2:\n        traffic_count = paragraphs[1].count(\"交通\")\n        if traffic_count < 2:\n            errors.append(f\"第二段'交通'出现次数不足(要求≥2次，实际{traffic_count}次)\")\n    else:\n        errors.append(\"缺少第二段落\")\n    \n    # 检查字数范围\n    clean_text = re.sub(r'\\s', '', answer_content)  # 移除所有空白字符\n    char_count = len(clean_text)\n    if char_count < 300:\n        errors.append(f\"文章字数不足(要求≥300字，实际{char_count}字)\")\n    if char_count > 500:\n        errors.append(f\"文章字数超标(要求≤500字，实际{char_count}字)\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"所有验证条件均满足\"\n    }\n"}
{"prompt": "请写一篇关于食品浪费对城市环境影响的文章。文章最后一句必须是“减少浪费是我们的共同责任。”\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查是否包含指定的开始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    if start_marker not in response:\n        err_infos.append(\"缺少【答案开始】标记\")\n    if end_marker not in response:\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取标记之间的内容\n    content_match = re.search(rf\"\\{start_marker}(.*?)\\{end_marker}\", response, re.DOTALL)\n    if not content_match:\n        return {\"check_code\": False, \"reason\": \"|\".join(err_infos)} if err_infos else {\"check_code\": False, \"reason\": \"未找到有效内容\"}\n    \n    content = content_match.group(1).strip()\n    \n    # 检查是否包含多余解析内容\n    if re.search(r\"(解析|总结|要点|分析)：\", content):\n        err_infos.append(\"包含多余解析内容\")\n    \n    # 检查最后一句是否符合要求\n    last_sentence = re.split(r'[.!?。！？]', content.strip())[-2] if re.search(r'[.!?。！？]', content) else content\n    if \"减少浪费是我们的共同责任\" not in last_sentence:\n        err_infos.append(\"最后一句不符合要求\")\n    \n    # 检查主题相关性\n    if not re.search(r\"食品浪费|食物浪费|厨余垃圾|城市环境|环境影响\", content):\n        err_infos.append(\"内容主题不相关\")\n    \n    return {\"check_code\": len(err_infos) == 0, \"reason\": \"|\".join(err_infos) if err_infos else \"\"}"}
{"prompt": "在全球气候变化和能源危机的背景下，可持续农业逐渐成为全球关注的焦点。可持续农业不仅涉及减少化肥和农药的使用，还包括合理利用土地、节约水资源、保护生物多样性等多个方面。随着人口的不断增长和资源的紧张，传统农业面临着巨大的挑战，而可持续农业则被认为是解决这些问题的重要途径。\n\n请撰写一篇关于可持续农业在未来发展的文章，并重点讨论如何在不使用化肥和农药的情况下，利用生物防治、生态农法等手段提高农作物产量和质量。文章中请描述具体的实施方法和可能面临的挑战，并提出相应的解决方案。\n\n要求在文章中避免使用“化肥”、“农药”这两份个词语。请确保文章标题用《》标记。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化检查结果\n    check_code = True\n    err_infos = []\n    \n    # 检查起始/结束标记\n    if not response.startswith(\"【答案开始】\"):\n        check_code = False\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if \"【答案结束】\" not in response:\n        check_code = False\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取实际回答内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and \"【答案结束】\" in response:\n        content = response.split(\"【答案开始】\")[1].split(\"【答案结束】\")[0].strip()\n    \n    # 检查标题格式\n    title_match = re.search(r\"《(.+?)》\", content)\n    if not title_match:\n        check_code = False\n        err_infos.append(\"标题未使用《》标记\")\n    \n    # 检查禁用词汇\n    forbidden_words = [\"化肥\", \"农药\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        check_code = False\n        err_infos.append(f\"包含禁用词汇：{', '.join(found_words)}\")\n    \n    # 检查核心内容关键词\n    required_keywords = [\"生物防治\", \"生态农法\", \"产量\", \"质量\", \"挑战\", \"解决方案\"]\n    missing_keywords = [kw for kw in required_keywords if kw not in content]\n    if missing_keywords:\n        check_code = False\n        err_infos.append(f\"缺少必要内容关键词：{', '.join(missing_keywords)}\")\n    \n    return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos) if err_infos else \"验证通过\"}"}
{"prompt": "在现代社会中，健康饮食成为越来越多人的关注重点。随着生活节奏的加快和工作压力的增加，许多人发现自己难以保持均衡的饮食习惯。健康饮食不仅仅是选择低热量和低脂肪的食物，更重要的是要摄入足够的维生素、矿物质和其他营养元素。比如，水果和蔬菜是维生素的重要来源，而全谷物食品则能提供丰富的纤维和矿物质。此外，适当的蛋白质摄入对于保持身体健康和肌肉力量也非常重要。人们常常忽视饮食的多样性，这可能会导致营养不良或肥胖等健康问题。\n\n请你撰写一篇关于如何在忙碌的日常生活中保持健康饮食习惯的文章。要求在文章中避免使用“减肥”、“卡路里”、“脂肪”这三个词语。文章应详细解释并列出三种主要原因，使用“【原因1】”、“【原因2】”和“【原因3】”作为主要原因的占位符。请提供具体的建议和措施，以帮助读者在繁忙的生活中实现健康饮食。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查开始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答没有以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答没有以【答案结束】结尾\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取正文内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    # 检查禁用词\n    forbidden_words = [\"减肥\", \"卡路里\", \"脂肪\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        errors.append(f\"包含禁用词: {', '.join(found_words)}\")\n    \n    # 检查原因占位符\n    required_placeholders = [\"【原因1】\", \"【原因2】\", \"【原因3】\"]\n    missing_placeholders = [ph for ph in required_placeholders if ph not in content]\n    \n    if missing_placeholders:\n        errors.append(f\"缺少原因占位符: {', '.join(missing_placeholders)}\")\n    \n    # 检查建议措施\n    if \"建议\" not in content and \"措施\" not in content and \"方法\" not in content:\n        errors.append(\"缺少具体的建议措施\")\n    \n    # 检查原因数量\n    placeholder_count = sum(1 for ph in required_placeholders if ph in content)\n    if placeholder_count < 3:\n        errors.append(f\"只找到{placeholder_count}个原因占位符，需要3个\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请做一个杭州的旅游攻略，内容不能出现中文逗号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误原因列表\n    errors = []\n    \n    # 检查是否包含起始和结束标记\n    if \"【答案开始】\" not in response:\n        errors.append(\"缺少起始标记【答案开始】\")\n    if \"【答案结束】\" not in response:\n        errors.append(\"缺少结束标记【答案结束】\")\n    \n    # 如果缺少标记则直接返回\n    if errors:\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 提取标记间的内容\n    pattern = r'【答案开始】(.*?)【答案结束】'\n    match = re.search(pattern, response, re.DOTALL)\n    \n    if not match:\n        errors.append(\"标记格式不正确\")\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    content = match.group(1).strip()\n    \n    # 检查是否包含中文逗号\n    if \"，\" in content:\n        errors.append(\"内容包含中文逗号\")\n    \n    # 检查杭州旅游攻略关键词（非穷尽列表）\n    keywords = [\"杭州\", \"西湖\", \"灵隐寺\", \"雷峰塔\", \"断桥\", \"苏堤\", \"白堤\", \n               \"龙井\", \"宋城\", \"河坊街\", \"千岛湖\", \"西溪湿地\", \"太子湾\"]\n    if not any(keyword in content for keyword in keywords):\n        errors.append(\"内容未包含杭州旅游攻略要素\")\n    \n    # 检查是否有额外内容\n    if response.replace(match.group(0), \"\") != \"\":\n        errors.append(\"存在多余内容\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \";\".join(errors) if errors else \"\"\n    }"}
{"prompt": "请写一个关于城市生活中独特声音的短文，文章中必须包含“街角”这个词。整篇文章刚好由14个句子（用中文句号或问号或感叹号分隔）组成。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n    if not content:\n        err_infos.append(\"未找到答案内容区域\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    content = content.group(1).strip()\n    \n    # 检查答案分隔符\n    parts = content.split(\"******\")\n    if len(parts) != 2:\n        err_infos.append(\"答案分隔符数量错误\")\n    elif not all(parts):\n        err_infos.append(\"存在空答案内容\")\n    \n    # 检查每个答案\n    for i, part in enumerate(parts):\n        if not part.strip():\n            continue\n            \n        # 检查\"街角\"关键词\n        if \"街角\" not in part:\n            err_infos.append(f\"答案{i+1}缺少'街角'关键词\")\n        \n        # 检查句子数量\n        sentences = re.split(r'[。？！]', part.strip())\n        sentences = [s for s in sentences if s.strip()]\n        if len(sentences) != 14:\n            err_infos.append(f\"答案{i+1}句子数量错误({len(sentences)}句)\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "将下面文本中的三个句子以倒序排列，然后将排序后的第三个句子中的每个字符以倒序排列，句子之间不要换行，直接返回修改后的文本，不要出现其他多余的内容。\n\n杉树是常见的针叶树种，属于松科植物，广泛分布于亚洲尤其是中国的山地和丘陵地带。杉树以其挺拔的树干和四季常绿的特性而闻名，常被用于园林绿化、建筑和木材加工等领域。杉树具有适应性强的特征，能够在多种土壤条件下生长，但最适宜的生长环境是湿润、排水良好的酸性土壤。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义原始文本的三个句子\n    s1 = \"杉树是常见的针叶树种，属于松科植物，广泛分布于亚洲尤其是中国的山地和丘陵地带。\"\n    s2 = \"杉树以其挺拔的树干和四季常绿的特性而闻名，常被用于园林绿化、建筑和木材加工等领域。\"\n    s3 = \"杉树具有适应性强的特征，能够在多种土壤条件下生长，但最适宜的生长环境是湿润、排水良好的酸性土壤。\"\n    \n    # 计算期望结果\n    reversed_s1 = s1[::-1]  # 反转第一个句子的字符\n    expected = s3 + s2 + reversed_s1  # 倒序排列句子并拼接\n    \n    # 检查响应格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案缺少必要的开始/结束标记\"}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    # 验证内容\n    err_infos = []\n    if content != expected:\n        err_infos.append(\"内容与预期结果不匹配\")\n    if \"\\n\" in content:\n        err_infos.append(\"答案包含换行符\")\n    if re.search(r'[a-zA-Z]', content):\n        err_infos.append(\"答案包含英文字符\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "现代科技的快速发展正在深刻地改变我们的日常生活和工作方式。特别是在教育领域，在线教育平台和数字化教学工具的普及使得教育资源更加开放和多样化。无论是学生、教师还是家长，都在不同程度上感受到科技带来的便利和挑战。然而，随着在线教育的普及，也出现了一些问题，例如学生的学习效果如何评估、教师的教学质量如何保证等。因此，探讨在线教育的利与弊，以及未来可能的发展方向，显得尤为重要。\n\n请写一篇关于在线教育的利与弊的文章，要求如下：\n1. 文章中至少出现3次“学生”这个词语。\n2. 文章中必须出现5次“教师”这个词语。\n3. 文章中最多出现2次“资源”这个词语。\n4. 文章要以“因此，我们必须找到平衡点，充分利用科技带来的便利，同时克服其带来的挑战。”这句话结尾。\n5. 文章每个句子的字数至少30个字，最多35个字。\n模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    def validate_article(text):\n        # 检查学生词频\n        if text.count(\"学生\") < 3:\n            return False, \"学生出现次数少于3次\"\n        \n        # 检查教师词频\n        if text.count(\"教师\") != 5:\n            return False, f\"教师出现次数不等于5次（实际:{text.count('教师')}）\"\n        \n        # 检查资源词频\n        if text.count(\"资源\") > 2:\n            return False, f\"资源出现超过2次（实际:{text.count('资源')}）\"\n        \n        # 检查结尾\n        if not text.endswith(\"因此，我们必须找到平衡点，充分利用科技带来的便利，同时克服其带来的挑战。\"):\n            return False, \"未以指定句子结尾\"\n        \n        # 检查句子长度\n        sentences = re.split(r'[。？！]', text)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        for i, sent in enumerate(sentences):\n            if not (30 <= len(sent) <= 35):\n                return False, f\"第{i+1}句字数不符（实际:{len(sent)}字）\"\n        return True, \"\"\n    \n    # 提取答案内容\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    if not response.startswith(start_tag) or not response.endswith(end_tag):\n        return {\"check_code\": False, \"reason\": \"缺少答案标记\"}\n\n    content = response[len(start_tag):-len(end_tag)].strip()\n    articles = re.split(r'\\*{6}', content)\n    \n    if len(articles) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案数量错误（实际:{len(articles)}）\"}\n\n    # 验证两个答案\n    err_info = []\n    for i, article in enumerate(articles):\n        valid, reason = validate_article(article.strip())\n        if not valid:\n            err_info.append(f\"答案{i+1}:{reason}\")\n    \n    if err_info:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_info)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于如何在家庭中培养节水习惯的文章，要求文章以“节约用水是我们每个人应尽的责任。”这句话结尾。请在回复中详细解释并列出三种主要方法，使用“【方法1】”、“【方法2】”和“【方法3】”作为主要方法的占位符。文章应只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“水资源”这个词务必至少出现两次。请确保文章的每个句子（用中文句号或问号或感叹号分隔）恰好15个字。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n\n    # 验证整体结构\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答缺少结束标记【答案结束】\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    answers = content.split(\"******\")\n    \n    if len(answers) != 2:\n        errors.append(f\"答案数量应为2个，实际找到{len(answers)}个\")\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        if not ans:\n            errors.append(f\"答案{idx}为空\")\n            continue\n            \n        # 验证结尾\n        if not ans.endswith(\"节约用水是我们每个人应尽的责任。\"):\n            errors.append(f\"答案{idx}结尾不符合要求\")\n            \n        # 验证段落结构\n        paragraphs = [p.strip() for p in ans.split(\"\\n\\n\") if p.strip()]\n        if len(paragraphs) != 4:\n            errors.append(f\"答案{idx}应为4个段落，实际为{len(paragraphs)}段\")\n            \n        # 验证第二段落的水资源出现次数\n        if len(paragraphs) >= 2:\n            if paragraphs[1].count(\"水资源\") < 2:\n                errors.append(f\"答案{idx}第二段落'水资源'出现少于2次\")\n        \n        # 验证句子长度\n        for p_idx, para in enumerate(paragraphs):\n            sentences = re.split(r'[。？！]', para)\n            sentences = [s.strip() for s in sentences if s.strip()]\n            \n            for s in sentences:\n                if len(s) != 15:\n                    errors.append(f\"答案{idx}第{p_idx+1}段句子长度不符: '{s}'\")\n        \n        # 验证方法占位符\n        if not all(marker in ans for marker in [\"【方法1】\", \"【方法2】\", \"【方法3】\"]):\n            errors.append(f\"答案{idx}缺少方法占位符\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \";\".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于快速城市化对交通拥堵的影响的文章。文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。要求文章不少于150字，不超过200字。请以“因此，我们需要更好的城市规划来缓解交通问题。”这句话结尾。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案缺少开始/结束标记\"}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    answers = content.split(\"******\")\n    \n    # 检查答案数量\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案数量错误，应为2个，实际{len(answers)}个\"}\n    \n    errors = []\n    for i, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        \n        # 检查段落结构\n        paragraphs = re.split(r'\\n{2,}', ans)\n        if len(paragraphs) != 4:\n            errors.append(f\"答案{i}段落数错误（应为4段，实际{len(paragraphs)}段）\")\n            continue\n        \n        # 检查第三段句子数\n        sentences = re.split(r'[。？！]', paragraphs[2])\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            errors.append(f\"答案{i}第三段句子数错误（应为6句，实际{len(sentences)}句）\")\n        \n        # 检查字数限制\n        full_text = ''.join(paragraphs)\n        char_count = len(full_text)\n        if char_count < 150 or char_count > 200:\n            errors.append(f\"答案{i}字数错误（{char_count}字，应为150-200字）\")\n        \n        # 检查结尾句\n        if not paragraphs[3].endswith(\"因此，我们需要更好的城市规划来缓解交通问题。\"):\n            errors.append(f\"答案{i}结尾句错误或缺失\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"；\".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于城市公共交通系统在减少碳排放方面的作用的文章，字数不得少于450个汉字，但不多于700个汉字。请确保文章标题用$()$标记，如$(xxx)$。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证答案标记\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"未找到【答案开始】或【答案结束】标记\"}\n    \n    # 提取答案内容\n    start_idx = response.find(\"【答案开始】\") + 6\n    end_idx = response.find(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n    \n    # 验证标题格式\n    title_pattern = r'\\$\\(.*?\\)\\$'\n    titles = re.findall(title_pattern, content)\n    \n    if len(titles) != 1:\n        return {\"check_code\": False, \"reason\": f\"标题标记数量错误（找到{len(titles)}个）\"}\n    \n    # 统计汉字字数（只统计Unicode汉字字符）\n    hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', content))\n    \n    if hanzi_count < 450:\n        return {\"check_code\": False, \"reason\": f\"字数不足450字（实际{hanzi_count}字）\"}\n    \n    if hanzi_count > 700:\n        return {\"check_code\": False, \"reason\": f\"字数超过700字（实际{hanzi_count}字）\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "首先，将下列文本中的第2个句子替换为“你们喜欢艺术？”；然后，再将上一步修改过的文本中的第6个句子及其标点符号删除；然后，再将上一步修改过的文本中的标点符号全部删除；然后，再将上一步修改过的文本中的“分”字全部替换为“底”字；最后，在上一步修改过的文本中的第16个汉字和第17个汉字之间插入汉字“我”。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n化学分析技术在现代科学研究和工业生产中具有广泛应用。它用于检测物质的化学成分和含量，帮助研究人员和工程师了解材料的性质和行为。根据分析目的的不同，化学分析可以分为定性和定量分析。定性分析用于识别样品中的化学成分，而定量分析则测定这些成分的具体含量。常用的化学分析方法有光谱分析、色谱分析和质谱分析等。近年来，随着科技的进步，化学分析技术不断创新，仪器的灵敏度和精度显著提高。这些技术的发展为材料科学、环境监测和生物医药等领域提供了重要的技术支持。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义原始文本\n    original_text = \"化学分析技术在现代科学研究和工业生产中具有广泛应用。它用于检测物质的化学成分和含量，帮助研究人员和工程师了解材料的性质和行为。根据分析目的的不同，化学分析可以分为定性和定量分析。定性分析用于识别样品中的化学成分，而定量分析则测定这些成分的具体含量。常用的化学分析方法有光谱分析、色谱分析和质谱分析等。近年来，随着科技的进步，化学分析技术不断创新，仪器的灵敏度和精度显著提高。这些技术的发展为材料科学、环境监测和生物医药等领域提供了重要的技术支持。\"\n    \n    # 处理步骤1: 替换第2个句子\n    sentences = re.split(r'(?<=[。])', original_text)\n    sentences = [s for s in sentences if s.strip() != '']\n    if len(sentences) < 2:\n        return {\"check_code\": False, \"reason\": \"句子数量不足，无法替换第2个句子\"}\n    sentences[1] = \"你们喜欢艺术？\"\n    step1_text = ''.join(sentences)\n    \n    # 处理步骤2: 删除第6个句子及其标点\n    sentences = re.split(r'(?<=[。？])', step1_text)\n    sentences = [s for s in sentences if s.strip() != '']\n    if len(sentences) < 6:\n        return {\"check_code\": False, \"reason\": \"句子数量不足，无法删除第6个句子\"}\n    del sentences[5]\n    step2_text = ''.join(sentences)\n    \n    # 处理步骤3: 删除所有标点符号\n    step3_text = re.sub(r'[^\\w\\s]', '', step2_text)\n    \n    # 处理步骤4: \"分\"替换为\"底\"\n    step4_text = step3_text.replace('分', '底')\n    \n    # 处理步骤5: 在第16和第17个汉字间插入\"我\"\n    chinese_chars = re.findall(r'[\\u4e00-\\u9fff]', step4_text)\n    if len(chinese_chars) < 17:\n        return {\"check_code\": False, \"reason\": f\"汉字数量不足（仅{len(chinese_chars)}），无法在第16-17字间插入\"}\n    chars_list = list(step4_text)\n    insert_pos = 0\n    count = 0\n    for i, char in enumerate(chars_list):\n        if '\\u4e00' <= char <= '\\u9fff':\n            count += 1\n            if count == 16:\n                insert_pos = i + 1\n                break\n    step5_text = ''.join(chars_list[:insert_pos]) + '我' + ''.join(chars_list[insert_pos:])\n    \n    # 预期结果\n    expected_result = step5_text\n    \n    # 检查响应格式\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or end_idx <= start_idx:\n        return {\"check_code\": False, \"reason\": \"响应中缺少必要的标记\"}\n    \n    # 提取实际答案\n    actual_result = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 验证结果\n    if actual_result == expected_result:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        # 生成详细错误信息\n        diff_info = []\n        min_len = min(len(actual_result), len(expected_result))\n        for i in range(min_len):\n            if actual_result[i] != expected_result[i]:\n                diff_info.append(f\"位置{i}: 实际'{actual_result[i]}' vs 预期'{expected_result[i]}'\")\n                break\n        if len(actual_result) != len(expected_result):\n            diff_info.append(f\"长度不匹配: 实际{len(actual_result)}字符 vs 预期{len(expected_result)}字符\")\n        \n        return {\"check_code\": False, \"reason\": \"结果不匹配: \" + \"; \".join(diff_info)}"}
{"prompt": "写一篇关于“街头艺术”的文章，文章恰好为9个句子（每个句子之间用16635这个数字作为分隔符号）。文章中不能出现“展览”和“博物馆”这两个词。请在文章中包含“创意”和“文化”这两个词。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # Define the exact instruction string\n    instruction_str = \"写一篇关于“街头艺术”的文章，文章恰好为9个句子（每个句子之间用16635这个数字作为分隔符号）。文章中不能出现“展览”和“博物馆”这两个词。请在文章中包含“创意”和“文化”这两个词。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\"\n    \n    # Initialize error list\n    err_infos = []\n    \n    # Check if response starts and ends correctly\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"Response does not start with 【答案开始】.\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"Response does not end with 【答案结束】.\")\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # Extract inner content\n    inner_content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    # Check if inner content starts with the exact instruction string\n    if not inner_content.startswith(instruction_str):\n        err_infos.append(\"The response does not start with the exact repetition of the instructions.\")\n    \n    # Extract content after instructions\n    after_instruction = inner_content[len(instruction_str):].strip()\n    \n    # Split into two answers using six @ symbols\n    answers = after_instruction.split(\"@@@@@@\")\n    if len(answers) != 2:\n        err_infos.append(f\"Expected two answers separated by six '@' symbols, found {len(answers)} parts after splitting.\")\n    else:\n        # Validate each answer\n        for idx, ans in enumerate(answers):\n            sentences = ans.split('16635')\n            if len(sentences) != 9:\n                err_infos.append(f\"Answer {idx+1} does not have exactly 9 sentences (found {len(sentences)}).\")\n            else:\n                for i, sentence in enumerate(sentences):\n                    if \"展览\" in sentence:\n                        err_infos.append(f\"Answer {idx+1}, sentence {i+1} contains '展览'.\")\n                    if \"博物馆\" in sentence:\n                        err_infos.append(f\"Answer {idx+1}, sentence {i+1} contains '博物馆'.\")\n                if \"创意\" not in ans:\n                    err_infos.append(f\"Answer {idx+1} does not contain the word '创意'.\")\n                if \"文化\" not in ans:\n                    err_infos.append(f\"Answer {idx+1} does not contain the word '文化'.\")\n    \n    # Return result\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请描述两种不同类型的常见室内植物的生长习性和适宜的养护方法。每个答案以“选择适合的植物会让生活更加美好。”这句话结尾，要求答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        return {\"check_code\": False, \"reason\": \"缺少起始标记【答案开始】\"}\n    if not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"缺少结束标记【答案结束】\"}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案开始】\")].strip()  # 移除【答案开始】和【答案结束】标记    \n    # 检查分隔符是否存在\n    if \"@@@@@@\" not in content:\n        return {\"check_code\": False, \"reason\": \"答案缺少六个@分隔符\"}\n    \n    # 检查结尾句是否完整\n    parts = [k for k in content.split(\"@@@@@@\") if k.strip()]\n    errs = []\n    for i, part in enumerate(parts):\n        if not part.strip().endswith(\"选择适合的植物会让生活更加美好。\"):\n            errs.append(f\"第{i+1}部分缺少或格式错误的结尾句\")\n    \n    if errs:\n        return {\"check_code\": False, \"reason\": \"；\".join(errs)}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于“智能家居技术在日常生活中的应用”的文章，文章需只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。同时，要求文章的第五个句子（用中文句号或问号或感叹号分隔）以“通过这些技术”开头。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证响应是否包含正确的标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": [\"响应缺少【答案开始】/【答案结束】标记\"]}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    answers = content.split(\"******\")\n    \n    # 验证答案数量\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": [f\"答案数量错误，应为2个，实际为{len(answers)}个\"]}\n    \n    err_infos = []\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        # 验证段落数量\n        paragraphs = [p.strip() for p in ans.split(\"\\n\\n\") if p.strip()]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{idx}段落数量错误，应为4段，实际为{len(paragraphs)}段\")\n            continue\n        \n        # 合并所有文本用于句子分割\n        full_text = \"\".join(paragraphs)\n        sentences = re.split(r'[。？！]', full_text)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        # 验证第五个句子\n        if len(sentences) < 5:\n            err_infos.append(f\"答案{idx}句子数量不足5句\")\n        else:\n            if not sentences[4].startswith(\"通过这些技术\"):\n                err_infos.append(f\"答案{idx}第五个句子不以'通过这些技术'开头：'{sentences[4]}'\")\n    \n    return {\"check_code\": len(err_infos) == 0, \"reason\": err_infos}"}
{"prompt": "请描绘一个喧嚣城市中的绿洲场景，要求在描述中至少出现三次“繁忙”，必须刚好出现两次“宁静”，并且至多出现一次“逃离”。请以“在这个快节奏的城市中”开头，并在描述中包含“&喧嚣的对比&”、“&生活的节奏&”和“&心灵的避风港&”三个占位符作为描述的要点。请撰写一篇由10个句子（用中文句号或问号或感叹号分隔）组成的文章，其中第5个句子的第13个汉字必须是“绿”字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 初始化错误信息列表\n    errors = []\n    \n    # 检查标记完整性\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker) or end_marker not in response:\n        errors.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \",\".join(errors)}\n    \n    # 提取答案内容\n    content = response.split(start_marker)[1].split(end_marker)[0].strip()\n    \n    # 检查开头格式\n    if not content.startswith(\"在这个快节奏的城市中\"):\n        errors.append(\"开头格式错误\")\n    \n    # 分句检查\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    # 检查句子数量\n    if len(sentences) != 10:\n        errors.append(f\"句子数量错误(需10句,实际{len(sentences)}句)\")\n    \n    # 检查第5句第13字\n    if len(sentences) >= 5:\n        fifth_sentence = sentences[4]\n        if len(fifth_sentence) < 13 or fifth_sentence[12] != \"绿\":\n            errors.append(\"第5句第13字非'绿'字\")\n    \n    # 关键词计数\n    word_counts = Counter(re.findall(r'繁忙|宁静|逃离', content))\n    if word_counts['繁忙'] < 3:\n        errors.append(f\"'繁忙'出现次数不足(需≥3,实际{word_counts['繁忙']})\")\n    if word_counts['宁静'] != 2:\n        errors.append(f\"'宁静'出现次数错误(需=2,实际{word_counts['宁静']})\")\n    if word_counts['逃离'] > 1:\n        errors.append(f\"'逃离'出现次数超限(需≤1,实际{word_counts['逃离']})\")\n    \n    # 占位符检查\n    placeholders = [\"&喧嚣的对比&\", \"&生活的节奏&\", \"&心灵的避风港&\"]\n    for ph in placeholders:\n        if ph not in content:\n            errors.append(f\"缺失占位符{ph}\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \",\".join(errors) if errors else \"验证通过\"\n    }"}
{"prompt": "请写一篇描述书店的未来发展趋势的文章，要求在描述中避免使用“现代”、“数字化”、“网络”这几个词。要求在文章中至少出现3次“书香”，必须出现2次“纸质书籍”，最多出现1次“阅读体验”。文章只能由35个句子（用中文句号或问号或感叹号分隔）组成，第四个句子（用中文句号或问号或感叹号分隔）必须以“充满希望的未来”结尾。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    err_infos = []\n    check_code = True\n    \n    # 定义重复要求字符串\n    required_text = \"请写一篇描述书店的未来发展趋势的文章，要求在描述中避免使用“现代”、“数字化”、“网络”这几个词。要求在文章中至少出现3次“书香”，必须出现2次“纸质书籍”，最多出现1次“阅读体验”。文章只能由35个句子（用中文句号或问号或感叹号分隔）组成，第四个句子（用中文句号或问号或感叹号分隔）必须以“充满希望的未来”结尾。\"\n    \n    # 检查开头是否重复要求\n    if not response.startswith(required_text):\n        err_infos.append(\"未正确重复要求文本\")\n        check_code = False\n    \n    # 提取答案内容\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    start_idx = response.find(start_tag)\n    end_idx = response.find(end_tag)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    answer = response[start_idx+len(start_tag):end_idx].strip()\n    \n    # 检查禁用词\n    forbidden_words = [\"现代\", \"数字化\", \"网络\"]\n    for word in forbidden_words:\n        if word in answer:\n            err_infos.append(f\"包含禁用词'{word}'\")\n            check_code = False\n    \n    # 统计关键词\n    keyword_counts = Counter(re.findall(r'书香|纸质书籍|阅读体验', answer))\n    \n    # 检查书香次数\n    if keyword_counts['书香'] < 3:\n        err_infos.append(f\"书香出现次数不足(需≥3,实际={keyword_counts['书香']})\")\n        check_code = False\n    \n    # 检查纸质书籍次数\n    if keyword_counts['纸质书籍'] != 2:\n        err_infos.append(f\"纸质书籍次数错误(需=2,实际={keyword_counts['纸质书籍']})\")\n        check_code = False\n    \n    # 检查阅读体验次数\n    if keyword_counts['阅读体验'] > 1:\n        err_infos.append(f\"阅读体验超过限制(需≤1,实际={keyword_counts['阅读体验']})\")\n        check_code = False\n    \n    # 分句检查\n    sentences = [s.strip() for s in re.split(r'[。？！]', answer) if s.strip()]\n    \n    # 检查句子数量\n    if len(sentences) != 35:\n        err_infos.append(f\"句子数量错误(需=35,实际={len(sentences)})\")\n        check_code = False\n    \n    # 检查第四句结尾\n    if len(sentences) >= 4:\n        if not sentences[3].endswith(\"充满希望的未来\"):\n            err_infos.append(\"第四句未以'充满希望的未来'结尾\")\n            check_code = False\n    else:\n        err_infos.append(\"句子数量不足4句\")\n        check_code = False\n    \n    return {\n        \"check_code\": check_code,\n        \"reason\": \";\".join(err_infos) if err_infos else \"所有验证通过\"\n    }\n"}
{"prompt": "请写一篇关于如何规划一个小型社区花园的文章。在文章中，“绿色”一词至少出现2次，“社区”一词必须恰好出现2次，“环境”一词出现的次数不得超过3次。文章必须以“让我们一起行动起来，共同建设美丽社区！”这句话作为结尾。文章必须恰好由四个段落（不要出现标题）组成，每个段落之间用“～～”符号分隔。其中第三个段落必须恰好由六个句子（用中文句号或问号或感叹号分隔）组成。文章的每个句必须恰好16个汉字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 提取答案部分\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    answer = response[start_idx + len(start_marker):end_idx].strip()\n\n    s = \"请写一篇关于如何规划一个小型社区花园的文章。在文章中，“绿色”一词至少出现2次，“社区”一词必须恰好出现2次，“环境”一词出现的次数不得超过3次。文章必须以“让我们一起行动起来，共同建设美丽社区！”这句话作为结尾。文章必须恰好由四个段落（不要出现标题）组成，每个段落之间用“～～”符号分隔。其中第三个段落必须恰好由六个句子（用中文句号或问号或感叹号分隔）组成。文章的每个句必须恰好16个汉字。\"\n    if not answer.startswith(s):\n        return {\"check_code\": False, \"reason\": \"; \".join([\"指令未重复\"])}\n    answer = answer.replace(s, \"\").strip()\n    \n    # 验证段落结构\n    paragraphs = [k for k in answer.split(\"～～\") if k.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误: {len(paragraphs)}\")\n    \n    # 验证第三段落句子数量\n    if len(paragraphs) >= 3:\n        para3 = paragraphs[2]\n        sentences = re.split(r'[。？！]', para3)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            err_infos.append(f\"第三段落句子数错误: {len(sentences)}\")\n    else:\n        err_infos.append(\"缺少第三段落\")\n    \n    # 验证所有句子长度和词汇\n    green_count = 0\n    community_count = 0\n    env_count = 0\n    valid_sentence_length = True\n    \n    for i, para in enumerate(paragraphs):\n        sentences = re.split(r'[。？！]', para)\n        sentences = [s for s in sentences if s.strip()]\n        \n        for s in sentences:\n            # 统计词汇\n            green_count += len(re.findall(r'绿色', s))\n            community_count += len(re.findall(r'社区', s))\n            env_count += len(re.findall(r'环境', s))\n            \n            # 验证句子长度\n            hanzi = re.findall(r'[一-龥]', s)\n            if len(hanzi) != 16:\n                valid_sentence_length = False\n    \n    # 词汇验证\n    if green_count < 2:\n        err_infos.append(f\"绿色出现次数不足: {green_count}\")\n    if community_count != 2:\n        err_infos.append(f\"社区出现次数错误: {community_count}\")\n    if env_count > 3:\n        err_infos.append(f\"环境出现次数超限: {env_count}\")\n    if not valid_sentence_length:\n        err_infos.append(\"存在句子长度非16汉字\")\n    \n    # 验证结尾\n    if not paragraphs[-1].endswith(\"让我们一起行动起来，共同建设美丽社区！\"):\n        err_infos.append(\"未以指定结尾句结束\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“人工智能在教育领域的应用”的文章，请确保文章只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。要求全文的第三个句子（用中文句号或问号或感叹号分隔）以‘这是未来的趋势’结尾。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    expected_instruct = \"请撰写一篇关于“人工智能在教育领域的应用”的文章，请确保文章只出现4个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。要求全文的第三个句子（用中文句号或问号或感叹号分隔）以‘这是未来的趋势’结尾。\"\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或没有以'【答案结束】'结尾\"\n        }\n    content = response[6:-6].strip()\n    if not content.startswith(expected_instruct):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有一字不差地重复指令要求\"\n        }\n    content = content[len(expected_instruct):].strip()\n    paragraphs = content.split(\"\\n\\n\")\n    paragraphs = [k for k in paragraphs if k]\n    if len(paragraphs) != 4:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章段落数不等于4\"\n        }\n\n    # 正则表达式模式：匹配中文句号、问号、感叹号中的任意一个\n    pattern = r'[。？！]'\n\n    # 使用正则表达式分割文本\n    raw_sentences = re.split(pattern, content)\n\n    # 过滤分割结果中的空字符串（处理文本开头/结尾有标点或连续标点的情况）\n    sentences = [sentence.strip() for sentence in raw_sentences if sentence.strip()]\n    \n    third_sentence = sentences[2]\n    if not third_sentence.endswith('这是未来的趋势'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"第三个句子没有以‘这是未来的趋势’结尾\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "撰写一篇关于城市夜生活的描述性文章。文章需包含“霓虹”这个词。文章应只出现4个段落，每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“霓虹”这个词务必至少出现两次。同时，在第三个段落中，必须刚好由六个句子组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少【答案开始】或【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查段落数量\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 4:\n        err_infos.append(f\"需要4个段落，实际{len(paragraphs)}个段落\")\n    \n    # 检查\"霓虹\"词频\n    if \"霓虹\" not in content:\n        err_infos.append(\"全文未出现'霓虹'\")\n    \n    # 检查第二段落\"霓虹\"出现次数\n    if len(paragraphs) >= 2:\n        count = paragraphs[1].count(\"霓虹\")\n        if count < 2:\n            err_infos.append(f\"第二段落'霓虹'出现{count}次，需至少2次\")\n    \n    # 检查第三段落句子数量\n    if len(paragraphs) >= 3:\n        sentences = re.split(r'[。！？…]+', paragraphs[2])\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            err_infos.append(f\"第三段落需6个句子，实际{len(sentences)}个句子\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请你详细阐述一下一个成功的项目管理计划应该包括哪些关键要素，并举例说明如何在一个科技公司中实施这些要素。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    required_instruction = \"请你详细阐述一下一个成功的项目管理计划应该包括哪些关键要素，并举例说明如何在一个科技公司中实施这些要素。\"\n    \n    err_infos = []\n    stripped_response = response.strip()\n    \n    # 检查起始和结束标记\n    if not stripped_response.startswith(start_marker):\n        err_infos.append(f\"开头缺少'{start_marker}'标记\")\n    if not stripped_response.endswith(end_marker):\n        err_infos.append(f\"结尾缺少'{end_marker}'标记\")\n    \n    # 提取标记间内容\n    content = re.search(f\"{re.escape(start_marker)}(.*?){re.escape(end_marker)}\", \n                        stripped_response, re.DOTALL)\n    if not content:\n        err_infos.append(\"未找到完整的【答案开始】...【答案结束】结构\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    content = content.group(1).strip()\n    \n    # 检查指令重复\n    if not content.startswith(required_instruction):\n        err_infos.append(f\"未一字不差重复指令要求\")\n    \n    # 检查多余内容\n    if stripped_response[:stripped_response.find(start_marker)]:\n        err_infos.append(\"【答案开始】前存在额外内容\")\n    if stripped_response[stripped_response.rfind(end_marker)+len(end_marker):]:\n        err_infos.append(\"【答案结束】后存在额外内容\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“图书馆中的阅读体验”的文章。请确保文章只出现2个段落（不要出现标题），每个段落之间用'～～'符号分隔。要求文章中不允许出现“数字化”、“现代化”、“便捷”三个词语。要求文章以“走进”开头。要求文章的每个句子（用中文句号或问号或感叹号分隔）的最后一个字使用“也”字作为结尾。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    instruction_str = \"请撰写一篇关于“图书馆中的阅读体验”的文章。请确保文章只出现2个段落（不要出现标题），每个段落之间用'～～'符号分隔。要求文章中不允许出现“数字化”、“现代化”、“便捷”三个词语。要求文章以“走进”开头。要求文章的每个句子（用中文句号或问号或感叹号分隔）的最后一个字使用“也”字作为结尾。\"\n\n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        errors.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n\n    start_idx = response.find(\"【答案开始】\")\n    end_idx = response.find(\"【答案结束】\")\n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        errors.append(\"答案标记位置错误\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n\n    # 检查指令重复部分\n    response = response[7:-7].strip()\n    if not response.startswith(instruction_str):\n        errors.append(\"指令未正确重复\")\n    answer = response.replace(instruction_str, \"\").strip()\n\n    # 检查段落结构\n    if \"～～\" not in answer:\n        errors.append(\"缺少段落分隔符'～～'\")\n    else:\n        parts = answer.split(\"～～\")\n        if len(parts) != 2:\n            errors.append(f\"段落数量错误（需要2段，实际{len(parts)}段）\")\n        else:\n            if any(len(p.strip()) == 0 for p in parts):\n                errors.append(\"存在空段落\")\n\n    # 检查开头\n    if not answer.startswith(\"走进\"):\n        errors.append(\"文章未以'走进'开头\")\n\n    # 检查禁用词\n    forbidden_words = [\"数字化\", \"现代化\", \"便捷\"]\n    for word in forbidden_words:\n        if word in answer:\n            errors.append(f\"包含禁用词'{word}'\")\n\n    # 检查句子结尾\n    sentences = re.split(r'[。？！]', answer)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    for i, sent in enumerate(sentences):\n        if not sent: continue\n        if not sent.endswith(\"也\"):\n            errors.append(f\"第{i+1}个句子未以'也'结尾（{sent[-5:]}...）\")\n\n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请写一篇关于智能家居技术在日常生活中应用的简短文章。要求文章以“智能家居技术将彻底改变我们的生活方式。”这句话结尾。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开始或以'【答案结束】'结束。\"\n        }\n    content = response[6:-6].strip()\n    answers = content.split('******')\n    if len(answers) != 2:\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答的答案数量不正确。\"\n        }\n    for answer in answers:\n        if not answer.strip().endswith('智能家居技术将彻底改变我们的生活方式。'):\n            return {\n                \"check_code\": False,\n                \"reason\": \"答案没有以指定句子结尾。\"\n            }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }\n}"}
{"prompt": "请写一篇关于“城市公共交通与环保”的文章。请以‘随着’这两个字开头。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第2段的第8个汉字必须是“车”字。同时，请确保文章恰好由10个句子（用中文句号或问号或感叹号分隔）组成。其中第5个句子的第3个汉字必须是“道”字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义完整的指令要求字符串\n    instruction_str = (\n        \"请写一篇关于“城市公共交通与环保”的文章。请以‘随着’这两个字开头。请确保文章只出现4个段落（不要出现标题），\"\n        \"每个段落之间用'～～'符号分隔。其中第2段的第8个汉字必须是“车”字。同时，请确保文章恰好由10个句子（用中文句号或问号或感叹号分隔）组成。\"\n        \"其中第5个句子的第3个汉字必须是“道”字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\"\n    )\n    \n    # 存储所有错误信息\n    err_infos = []\n    \n    # 检查整体结构\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答未以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答未以【答案结束】结尾\")\n    \n    # 提取中间内容\n    content = response[6:-6]  # 去除首尾标记\n    \n    # 检查指令重复部分\n    if not content.startswith(instruction_str):\n        err_infos.append(\"指令重复部分不一致\")\n    \n    # 提取答案部分（去除指令重复部分）\n    answers_part = content[len(instruction_str):].strip()\n    \n    # 检查并分割两个答案\n    if \"@@@@@@\" not in answers_part:\n        err_infos.append(\"答案分隔符@@@@@@缺失\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    articles = answers_part.split(\"@@@@@@\")\n    if len(articles) != 2:\n        err_infos.append(f\"答案数量错误: {len(articles)}个\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 验证每个答案\n    for art_idx, article in enumerate(articles, 1):\n        art_errors = []\n        \n        # 检查开头\n        if not article.strip().startswith(\"随着\"):\n            art_errors.append(f\"答案{art_idx}未以'随着'开头\")\n        \n        # 分割段落\n        paragraphs = article.split(\"～～\")\n        if len(paragraphs) != 4:\n            art_errors.append(f\"答案{art_idx}段落数量错误: {len(paragraphs)}段\")\n        else:\n            # 检查第二段第8个汉字\n            second_para = \"\".join(filter(str.isalpha, paragraphs[1]))  # 只保留汉字\n            if len(second_para) < 8 or second_para[7] != \"车\":\n                art_errors.append(f\"答案{art_idx}第2段第8个汉字错误\")\n        \n        # 分句处理\n        sentences = re.split(r'[。？！]', article)\n        sentences = [s.strip() for s in sentences if s.strip()]  # 清理空句子\n        \n        if len(sentences) != 10:\n            art_errors.append(f\"答案{art_idx}句子数量错误: {len(sentences)}句\")\n        elif len(sentences) >= 5:\n            # 检查第五句第3个汉字\n            fifth_sentence = \"\".join(filter(str.isalpha, sentences[4]))  # 只保留汉字\n            if len(fifth_sentence) < 3 or fifth_sentence[2] != \"道\":\n                art_errors.append(f\"答案{art_idx}第5句第3个汉字错误\")\n        \n        if art_errors:\n            err_infos.extend(art_errors)\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "在全球范围内，地震是一种常见的自然灾害，地震的发生可能导致建筑物倒塌、人员伤亡以及其他严重的后果。地震发生时，地面震动的强度由震级（如里氏震级）来衡量，而震源深度则决定了地震对地表的影响程度。尽管科学家们已经可以通过仪器监测地震活动，但预测地震的精确时间和地点仍然是一个尚未解决的难题。然而，了解地震的基本知识以及应对措施，可以帮助人们在灾害发生时减少损失。  \n\n请撰写一篇关于“地震应急措施与逃生技巧”的文章。请确保文章只出现4个段落（不要出现标题），每个段落之间用“～～”符号分隔。文章中的内容长度需至少为450个汉字，但不超过600个汉字。请在每个段落内恰好出现7个句子，并且每个句子之间用“^”符号作为分隔符号。在回答中避免使用“灾难”、“绝望”、“无法”这三个词语。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 1. 检查起始标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取核心内容\n    content = re.search(r\"【答案开始】(.*)【答案结束】\", response, re.DOTALL)\n    if not content:\n        return {\"check_code\": False, \"reason\": \"未找到有效答案内容\"}\n    content = response[len(\"【答案开始】\"):-len(\"【答案开始】\")].strip()\n    \n    # 2. 检查答案分隔符\n    answers = [k for k in content.split(\"@@@@@@\") if k.strip()]\n    if len(answers) != 2:\n        err_infos.append(f\"答案分隔符错误：需要2个答案，实际{len(answers)}个\")\n    \n    # 3. 遍历每个答案\n    for ans_idx, ans in enumerate(answers):\n        ans = ans.strip()\n        if not ans:\n            continue\n            \n        # 3.1 检查段落分隔符\n        paragraphs = [k for k in ans.split(\"～～\") if k.strip()]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{ans_idx+1}段落数错误：需要4段，实际{len(paragraphs)}段\")\n        \n        # 3.2 检查总字数\n        chinese_chars = re.findall(r'[一-龥]', ans)\n        char_count = len(chinese_chars)\n        if char_count < 450 or char_count > 600:\n            err_infos.append(f\"答案{ans_idx+1}字数错误：{char_count}字（要求450-600字）\")\n        \n        # 3.3 检查禁用词\n        for word in [\"灾难\", \"绝望\", \"无法\"]:\n            if word in ans:\n                err_infos.append(f\"答案{ans_idx+1}包含禁用词：{word}\")\n        \n        # 3.4 检查段落结构\n        for p_idx, para in enumerate(paragraphs):\n            sentences = [s.strip() for s in para.split(\"^\") if s.strip()]\n            if len(sentences) != 7:\n                err_infos.append(\n                    f\"答案{ans_idx+1}第{p_idx+1}段句子数错误：需要7句，实际{len(sentences)}句\"\n                )\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }\n"}
{"prompt": "在历史的长河中，书法作为一种艺术形式，承载了文化与情感的表达。中国书法讲究笔墨之间的气韵、线条的流畅以及章法的布局。不同的书法风格，如楷书、隶书、草书等展现了不同的美感和文化内涵。书法不仅是一种艺术创作，更是一种修身养性的方式。随着科技的发展，许多年轻人对书法的兴趣逐渐减少，但书法仍然是传统文化的重要部分。通过观察不同的书法作品，你可以发现书法家的个性与情感表达，也可以通过书写提升自己的专注力与创造力。\n\n请撰写一篇关于书法魅力的文章，描述书法对个人修养的影响及其作为文化载体的意义。文章只能出现四个段落（不要出现标题），每个段落之间用“～～”符号分隔。在第三个段落中，“艺术”这个词务必恰好只出现两次。此外，第二段必须由六个句子（用中文句号或问号或感叹号分隔）组成。最后，第五个句子必须以“通过书法”开头。请避免使用以下词语：“科技”、“现代化”、“数字化”。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 初始化验证结果\n    check_code = True\n    err_infos = []\n\n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        check_code = False\n        err_infos.append(\"答案缺少起始/结束标记\")\n        return {\"check_code\": check_code, \"reason\": \"；\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response.split(\"【答案开始】\")[1].split(\"【答案结束】\")[0].strip()\n    \n    # 检查禁止词\n    forbidden_words = [\"科技\", \"现代化\", \"数字化\"]\n    for word in forbidden_words:\n        if word in content:\n            check_code = False\n            err_infos.append(f\"包含禁止词'{word}'\")\n    \n    # 检查段落分隔符\n    paragraphs = [p.strip() for p in content.split(\"～～\")]\n    if len(paragraphs) != 4:\n        check_code = False\n        err_infos.append(f\"段落数量错误（应为4段，实际{len(paragraphs)}段）\")\n    \n    # 检查第二段句子结构（当存在至少4段时）\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1]\n        # 分句处理（按中文句号、问号、感叹号分割）\n        sentences = re.split(r'(?<=[。？！])', second_para)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        if len(sentences) != 6:\n            check_code = False\n            err_infos.append(f\"第二段句子数量错误（应为6句，实际{len(sentences)}句）\")\n        elif len(sentences) >= 5:  # 确保有第五个句子\n            fifth_sentence = sentences[4]\n            if not fifth_sentence.startswith(\"通过书法\"):\n                check_code = False\n                err_infos.append(\"第二段第五句未以'通过书法'开头\")\n    \n    # 检查第三段\"艺术\"词频（当存在至少3段时）\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2]\n        art_count = third_para.count(\"艺术\")\n        if art_count != 2:\n            check_code = False\n            err_infos.append(f\"第三段'艺术'出现次数错误（应为2次，实际{art_count}次）\")\n    \n    return {\"check_code\": check_code, \"reason\": \"；\".join(err_infos) if err_infos else \"\"}"}
{"prompt": "请写一篇关于“家庭自动化技术如何改变现代住宅设计”的文章。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。请确保文章恰好由12个句子（用中文句号或问号或感叹号分隔）组成。其中第6个句子至少15个汉字。要求文章以“这表明技术革新不仅改变了人们的居住方式，也重塑了家的定义。”结尾。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 定义指令要求中需要重复的部分\n    repeat_part = \"请写一篇关于“家庭自动化技术如何改变现代住宅设计”的文章。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。请确保文章恰好由12个句子（用中文句号或问号或感叹号分隔）组成。其中第6个句子至少15个汉字。要求文章以“这表明技术革新不仅改变了人们的居住方式，也重塑了家的定义。”结尾。\"\n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查【答案开始】和【答案结束】标记\n    if \"【答案开始】\" not in response:\n        err_infos.append(\"缺少【答案开始】标记\")\n    if \"【答案结束】\" not in response:\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    start_idx = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.find(\"【答案结束】\")\n    answer_content = response[start_idx:end_idx].strip() if start_idx < end_idx else \"\"\n    \n    # 验证是否重复指令要求\n    if not answer_content.startswith(repeat_part):\n        err_infos.append(\"未正确重复指令要求\")\n    else:\n        # 提取文章内容（移除重复的指令部分）\n        article_content = answer_content[len(repeat_part):].strip()\n        \n        # 验证段落结构\n        paragraphs = [p.strip() for p in article_content.split('～～')]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"段落数量应为4，实际为{len(paragraphs)}\")\n        elif any(not p for p in paragraphs):\n            err_infos.append(\"存在空段落\")\n        \n        # 验证句子数量\n        sentences = re.split(r'[。？！]', article_content)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 12:\n            err_infos.append(f\"句子数量应为12，实际为{len(sentences)}\")\n        else:\n            # 验证第6个句子长度\n            sixth_sentence = sentences[5]\n            hanzi_count = len(re.findall(r'[一-龥]', sixth_sentence))\n            if hanzi_count < 15:\n                err_infos.append(f\"第6句汉字数应≥15，实际为{hanzi_count}\")\n            \n            # 验证结尾句子\n            last_sentence = sentences[-1].strip()\n            if last_sentence != \"这表明技术革新不仅改变了人们的居住方式，也重塑了家的定义\":\n                err_infos.append(f\"结尾句子不匹配，实际为：{last_sentence}\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }\n"}
{"prompt": "写一个关于“街头小吃的多样性”的短文，要求包含“烟火气”这个词，但不能使用“传统”、“现代”、“流行”这几个词。文章只应分为四个段落，每个段落用两个换行符“\n\n”分隔开来。确保第二个段落不含任何标点符号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证标记完整性\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案缺少开始/结束标记\"}\n    \n    # 提取答案主体内容\n    answer_body = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 提取文章内容\n    article = answer_body.strip()\n    \n    # 验证关键词\n    if \"烟火气\" not in article:\n        return {\"check_code\": False, \"reason\": \"缺少'烟火气'关键词\"}\n    \n    # 验证禁止词\n    forbidden_words = [\"传统\", \"现代\", \"流行\"]\n    for word in forbidden_words:\n        if word in article:\n            return {\"check_code\": False, \"reason\": f\"包含禁止词'{word}'\"}\n    \n    # 验证段落数量\n    paragraphs = [p.strip() for p in article.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量应为4，实际为{len(paragraphs)}\"}\n    \n    # 验证第二段无标点符号\n    if re.search(r'[。？！，、；：“”‘’（）—《》【】…]', paragraphs[1]):\n        return {\"check_code\": False, \"reason\": \"第二段落包含标点符号\"}\n    \n    return {\"check_code\": True, \"reason\": \"所有验证通过\"}"}
{"prompt": "请写一篇只有26个句子的文章（用中文句号或问号或感叹号分隔），主题为“城市中的绿化”，并以“在现代城市中”开头。文章中必须包含“生态平衡”这个词，并在回复中详细解释并列出其中三种主要好处，使用“【好处1】”、“【好处2】”和“【好处3】”作为主要好处的占位符。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义指令要求字符串\n    instruction_str = \"请写一篇只有26个句子的文章（用中文句号或问号或感叹号分隔），主题为“城市中的绿化”，并以“在现代城市中”开头。文章中必须包含“生态平衡”这个词，并在回复中详细解释并列出其中三种主要好处，使用“【好处1】”、“【好处2】”和“【好处3】”作为主要好处的占位符。\"\n    \n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"答案标记缺失\"}\n    \n    # 提取答案内容\n    pattern = r'【答案开始】([\\s\\S]*?)【答案结束】'\n    match = re.search(pattern, response)\n    if not match:\n        return {\"check_code\": False, \"reason\": \"答案内容提取失败\"}\n    content = match.group(1).strip()\n    \n    # 检查是否重复指令要求\n    if not content.startswith(instruction_str):\n        return {\"check_code\": False, \"reason\": \"指令要求重复不准确\"}\n    \n    # 提取实际回答部分\n    answer_part = content[len(instruction_str):].strip()\n    \n    # 检查文章开头\n    if not answer_part.startswith(\"在现代城市中\"):\n        return {\"check_code\": False, \"reason\": \"文章未以'在现代城市中'开头\"}\n    \n    # 分割文章句子\n    sentences = re.split(r'[。？！]', answer_part)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    # 检查句子数量\n    if len(sentences) < 26:\n        return {\"check_code\": False, \"reason\": f\"文章只有{len(sentences)}句，不足26句\"}\n    \n    # 检查生态平衡关键词\n    article_text = \"\".join(sentences[:26])\n    if \"生态平衡\" not in article_text:\n        return {\"check_code\": False, \"reason\": \"文章未包含'生态平衡'关键词\"}\n    \n    # 检查好处标记\n    benefit_part = answer_part\n    benefit_markers = [\"【好处1】\", \"【好处2】\", \"【好处3】\"]\n    for marker in benefit_markers:\n        if marker not in benefit_part:\n            return {\"check_code\": False, \"reason\": f\"缺失{marker}标记\"}\n    \n    # 检查好处内容是否为空\n    benefit_pattern = r'【好处1】([\\s\\S]*?)【好处2】([\\s\\S]*?)【好处3】([\\s\\S]*)'\n    benefit_match = re.search(benefit_pattern, benefit_part)\n    if not benefit_match:\n        return {\"check_code\": False, \"reason\": \"好处内容结构错误\"}\n    \n    for i in range(1, 4):\n        if not benefit_match.group(i).strip():\n            return {\"check_code\": False, \"reason\": f\"【好处{i}】内容为空\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于如何在家中布置一个具有实用性和舒适性的工作空间的文章。文章内容不得少于300个汉字，但不得超过600个汉字。文章必须以“在现代家庭中”这几个字开头，且文章必须以“这是一个值得尝试的设计理念。”这几个字结尾。文章只能由4个段落组成（不要出现标题），每个段落之间用“～～”符号分隔。其中，第二个段落中“灯光”一词词至少出现2次，“收纳”一词必须恰好出现3次。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n\n    # 提取答案内容\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    start_idx = response.find(start_tag)\n    end_idx = response.find(end_tag)\n    \n    if start_idx == -1 or end_idx == -1 or end_idx <= start_idx:\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    content = response[start_idx + len(start_tag):end_idx].strip()\n    \n    # 验证开头结尾\n    if not content.startswith(\"在现代家庭中\"):\n        err_infos.append(\"开头不符合要求\")\n    if not content.endswith(\"这是一个值得尝试的设计理念。\"):\n        err_infos.append(\"结尾不符合要求\")\n    \n    # 验证段落结构\n    paragraphs = [p.strip() for p in content.split(\"～～\")]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误（要求4段，实际{len(paragraphs)}段）\")\n    \n    # 验证字数（只统计汉字）\n    chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', content)\n    char_count = len(chinese_chars)\n    if char_count < 300:\n        err_infos.append(f\"字数不足300字（当前{char_count}字）\")\n    if char_count > 600:\n        err_infos.append(f\"字数超过600字（当前{char_count}字）\")\n    \n    # 验证第二段关键词\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1]\n        light_count = second_para.count(\"灯光\")\n        storage_count = second_para.count(\"收纳\")\n        \n        if light_count < 2:\n            err_infos.append(f\"第二段'灯光'出现次数不足（要求≥2，实际{light_count}次）\")\n        if storage_count != 3:\n            err_infos.append(f\"第二段'收纳'出现次数错误（要求=3，实际{storage_count}次）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos if err_infos else []\n    }"}
{"prompt": "请描述一个繁忙的城市早晨，要求在描述中至少出现三次“喧闹”，必须出现两次“行人”，最多出现一次“阳光”。文章长度至少800字，不超过1000字。整篇文章内容不能出现中文逗号。撰写一篇文章，文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。第三个段落必须刚好由四个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    content = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 检查字数\n    word_count = len(content)\n    if word_count < 800:\n        err_infos.append(f\"字数不足800字（当前{word_count}字）\")\n    if word_count > 1000:\n        err_infos.append(f\"字数超过1000字（当前{word_count}字）\")\n    \n    # 检查中文逗号\n    if \"，\" in content:\n        err_infos.append(\"内容包含中文逗号\")\n    \n    # 检查段落结构\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量不为4（当前{len(paragraphs)}段）\")\n    \n    # 检查第三段句子数量\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2]\n        sentences = re.split(r'[。？！]', third_para)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 4:\n            err_infos.append(f\"第三段句子数量不为4（当前{len(sentences)}句）\")\n    \n    # 检查关键词频率\n    xuannao_count = content.count(\"喧闹\")\n    if xuannao_count < 3:\n        err_infos.append(f\"'喧闹'出现次数不足3次（当前{xuannao_count}次）\")\n    \n    xingren_count = content.count(\"行人\")\n    if xingren_count != 2:\n        err_infos.append(f\"'行人'出现次数不为2次（当前{xingren_count}次）\")\n    \n    yangguang_count = content.count(\"阳光\")\n    if yangguang_count > 1:\n        err_infos.append(f\"'阳光'出现超过1次（当前{yangguang_count}次）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "随着全球化和国际贸易的发展，世界各地的美食文化逐渐融合。在这个背景下，不同国家的饮食习惯和美食文化也成为人们关注的焦点。日本料理以其精细、健康和美味闻名于世，而印度菜则以其丰富的香料和独特的风味著称。这两种截然不同的美食文化在全球范围内都拥有大量的追随者。\n\n撰写一篇关于这两种美食文化的文章，请分别描述日本料理和印度菜的主要特点。要求文章以“日本料理的主要特点是”这句话开头，且以“美妙的食物，美妙的人生。”这句话结尾。文章由50个句子（用中文句号或问号或感叹号分隔）组成。文章应只出现6个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第4个段落中，必须刚好由10个句子（用中文句号或问号或感叹号分隔）组成。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查响应是否包含答案标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"缺少答案标记【答案开始】或【答案结束】\"}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查答案分隔符\n    if \"******\" not in content:\n        return {\"check_code\": False, \"reason\": \"答案之间缺少分隔符******\"}\n    \n    # 分割两个答案\n    answers = content.split(\"******\")\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": \"答案数量不正确\"}\n    \n    # 验证每个答案\n    for idx, answer in enumerate(answers, 1):\n        ans = answer.strip()\n        # 检查开头\n        if not ans.startswith(\"日本料理的主要特点是\"):\n            return {\"check_code\": False, \"reason\": f\"答案{idx}开头不符合要求\"}\n        \n        # 检查结尾\n        if not ans.endswith(\"美妙的食物，美妙的人生。\"):\n            return {\"check_code\": False, \"reason\": f\"答案{idx}结尾不符合要求\"}\n        \n        # 分割段落\n        paragraphs = re.split(r'\\n{2,}', ans.strip())\n        if len(paragraphs) != 6:\n            return {\"check_code\": False, \"reason\": f\"答案{idx}段落数量不是6个\"}\n        \n        # 检查第4段落句子数\n        para4_sentences = re.split(r'[。？！]', paragraphs[3].strip())\n        para4_sentences = [s for s in para4_sentences if s.strip()]\n        if len(para4_sentences) != 10:\n            return {\"check_code\": False, \"reason\": f\"答案{idx}第4段落句子数不是10个\"}\n        \n        # 统计总句子数\n        total_sentences = 0\n        for para in paragraphs:\n            sentences = re.split(r'[。？！]', para.strip())\n            sentences = [s for s in sentences if s.strip()]\n            total_sentences += len(sentences)\n        \n        if total_sentences != 50:\n            return {\"check_code\": False, \"reason\": f\"答案{idx}总句子数不是50个\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请描述一个繁忙的城市早晨景象，要求在描述中至少出现三次“喧嚣”，必须出现四次“行人”，至多出现两次“车辆”。文章应以“清晨的第一缕阳光”开头，共有四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证标记完整性\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案缺少开始/结束标记\"}\n    \n    # 提取答案主体内容\n    answer_body = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 提取文章内容\n    article = answer_body.strip()\n    \n    # 验证文章开头\n    if not article.startswith(\"清晨的第一缕阳光\"):\n        return {\"check_code\": False, \"reason\": \"文章不以'清晨的第一缕阳光'开头\"}\n    \n    # 验证关键词出现次数\n    noisy_count = article.count(\"喧嚣\")\n    pedestrian_count = article.count(\"行人\")\n    vehicle_count = article.count(\"车辆\")\n    \n    if noisy_count < 3:\n        return {\"check_code\": False, \"reason\": f\"'喧嚣'出现次数应≥3，实际{noisy_count}次\"}\n    if pedestrian_count != 4:\n        return {\"check_code\": False, \"reason\": f\"'行人'出现次数应=4，实际{pedestrian_count}次\"}\n    if vehicle_count > 2:\n        return {\"check_code\": False, \"reason\": f\"'车辆'出现次数应≤2，实际{vehicle_count}次\"}\n    \n    # 验证段落数量\n    paragraphs = [p.strip() for p in article.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量应为4，实际为{len(paragraphs)}\"}\n    \n    # 验证第三段句子数量\n    if len(paragraphs) < 3:\n        return {\"check_code\": False, \"reason\": \"缺少第三段落\"}\n    \n    sentences_para3 = [s.strip() for s in re.split(r'[。？！]', paragraphs[2]) if s.strip()]\n    if len(sentences_para3) != 6:\n        return {\"check_code\": False, \"reason\": f\"第三段应为6个句子，实际为{len(sentences_para3)}个\"}\n    \n    return {\"check_code\": True, \"reason\": \"所有验证通过\"}"}
{"prompt": "请写一篇关于“数字化教育工具在课堂上的应用”的文章。要求文章中必须出现“互动”、“效率”和“创新”三个词语，但每个词语出现至少3次。文章应包含4个段落（不要出现标题），每个段落之间用'～～'符号分隔。请确保第3段的第18个汉字是“技”字。此外，第1段必须至少有90个汉字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    instruction = \"请写一篇关于“数字化教育工具在课堂上的应用”的文章。要求文章中必须出现“互动”、“效率”和“创新”三个词语，但每个词语出现至少3次。文章应包含4个段落（不要出现标题），每个段落之间用'～～'符号分隔。请确保第3段的第18个汉字是“技”字。此外，第1段必须至少有90个汉字。\"\n    \n    err_infos = []\n    \n    # 检查是否以完整指令开头\n    if not response.startswith(instruction):\n        err_infos.append(\"回答开头未完整重复指令要求\")\n    \n    # 检查答案标记\n    if \"【答案开始】\" not in response:\n        err_infos.append(\"缺少【答案开始】标记\")\n    if \"【答案结束】\" not in response:\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    start_idx = response.find(\"【答案开始】\") + 5\n    end_idx = response.find(\"【答案结束】\")\n    if start_idx < 5 or end_idx == -1 or end_idx <= start_idx:\n        return {\"check_code\": False, \"reason\": err_infos}\n    answer_content = response[start_idx:end_idx].strip()\n    \n    # 检查段落分隔符\n    if answer_content.count(\"～～\") != 3:\n        err_infos.append(\"段落分隔符数量错误，应为3个\")\n    \n    # 分割段落\n    paragraphs = [p.strip() for p in answer_content.split(\"～～\")]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误，应为4段，实际{len(paragraphs)}段\")\n    \n    # 检查第一段长度\n    if len(paragraphs) > 0:\n        hanzi_count = len(re.findall(r'[一-龥]', paragraphs[0]))\n        if hanzi_count < 90:\n            err_infos.append(f\"第一段汉字数不足90字（实际：{hanzi_count}字）\")\n    \n    # 检查第三段第18个汉字\n    if len(paragraphs) > 2:\n        hanzi_list = re.findall(r'[一-龥]', paragraphs[2])\n        if len(hanzi_list) < 18:\n            err_infos.append(\"第三段汉字数量不足18个\")\n        elif hanzi_list[17] != \"技\":\n            err_infos.append(f\"第三段第18个汉字应为'技'（实际：'{hanzi_list[17]}'）\")\n    \n    # 检查关键词出现次数\n    keywords = {\"互动\": 0, \"效率\": 0, \"创新\": 0}\n    for kw in keywords:\n        count = answer_content.count(kw)\n        if count < 3:\n            err_infos.append(f\"关键词'{kw}'出现次数不足3次（实际：{count}次）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"；\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“如何提升工作效率”的文章，请确保文章只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。内容不能出现中文逗号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查标记完整性\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"Missing start marker\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"Missing end marker\")\n    \n    # 提取内容区域\n    content = re.search(r\"【答案开始】(.*)【答案结束】\", response, re.DOTALL)\n    if not content:\n        err_infos.append(\"Content extraction failed\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    content = content.group(1).strip()\n    \n    # 检查段落分隔符\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"Found {len(paragraphs)} paragraphs (expected 4)\")\n    \n    # 检查中文逗号\n    if \"，\" in content:\n        err_infos.append(\"Contains Chinese comma\")\n    \n    # 检查多余内容\n    if re.search(r\"[^\\w\\s,.!?\\\"'\\-:;()\\n]\", content):\n        err_infos.append(\"Contains extra characters\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“家庭组织与文化传承”的文章。文章只能有6个段落（不要出现标题），每个段落之间用“～～”符号分隔，其中第3段的第8个汉字必须是“乐”字。文章必须以“在许多家庭中”这几个字开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 提取答案部分\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        return {\"check_code\": False, \"reason\": \"答案未按照要求标记【答案开始】和【答案结束】\"}\n    \n    answer = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 验证开头\n    if not answer.startswith(\"在许多家庭中\"):\n        return {\"check_code\": False, \"reason\": \"文章开头不是'在许多家庭中'\"}\n    \n    # 分割段落\n    paragraphs = [p.strip() for p in answer.split(\"～～\")]\n    if len(paragraphs) != 6:\n        return {\"check_code\": False, \"reason\": f\"段落数量为{len(paragraphs)}，不是6个段落\"}\n    \n    # 验证第三段第8个汉字\n    if len(paragraphs) < 3:\n        return {\"check_code\": False, \"reason\": \"缺少第三段内容\"}\n    \n    third_para = paragraphs[2]\n    # 提取所有汉字字符\n    hanzi_chars = [char for char in third_para if '\\u4e00' <= char <= '\\u9fff']\n    \n    if len(hanzi_chars) < 8:\n        return {\"check_code\": False, \"reason\": f\"第三段只有{len(hanzi_chars)}个汉字，不足8个\"}\n    \n    if hanzi_chars[7] != \"乐\":\n        return {\"check_code\": False, \"reason\": f\"第三段第8个汉字是'{hanzi_chars[7]}'，不是'乐'\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在过去的几年中，全球各地的城市都在努力减少交通拥堵问题。许多城市已经开始实施不同的策略来改善交通流量，如引入智能交通灯、推广公共交通、鼓励骑行和步行等。这些策略的目标是提高城市的通勤效率，并减少因交通拥堵而引发的环境污染问题。尽管如此，仍有许多城市面临严重的交通拥堵，特别是在高峰时段。为了解决这些问题，城市规划者和交通工程师一直在研究新技术和创新方法。随着智能城市技术的进步，许多城市也在探索通过数据分析来优化交通流量管理。  \n\n请描述一个创新的交通解决方案，该方案不允许出现“汽车”、“道路”、“智能”这几个词。以“交通问题”这几个字开头。该方案的每个句子（用中文句号或问号或感叹号分隔）的最后一个字使用“也”字作为结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查是否包含答案标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response or end_marker not in response:\n        err_infos.append(\"答案缺少开始/结束标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response.split(start_marker)[1].split(end_marker)[0].strip()\n    \n    # 检查开头是否为\"交通问题\"\n    if not content.startswith(\"交通问题\"):\n        err_infos.append(\"开头未使用'交通问题'\")\n    \n    # 检查禁用词（汽车、道路、智能）\n    forbidden_words = [\"汽车\", \"道路\", \"智能\"]\n    for word in forbidden_words:\n        if word in content:\n            err_infos.append(f\"包含禁用词'{word}'\")\n            break  # 发现一个即记录\n    \n    # 检查每个句子的结尾是否为\"也\"\n    sentences = re.split(r'[。？！]', content)\n    valid_sentences = [s.strip() for s in sentences if s.strip()]  # 去除空白并过滤空句\n    \n    for sent in valid_sentences:\n        if not sent.endswith(\"也\"):\n            err_infos.append(f\"句子'{sent}'不以'也'结尾\")\n            break  # 发现一个错误即停止检查\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于“城市绿化与居住环境”的文章，内容不少于120个汉字且不超过200个汉字。文章中需包含“&挑战1&”、“&挑战2&”和“&挑战3&”作为城市绿化的主要挑战。文章应只出现四个段落（不要出现标题），每个段落之间用'～～'符号分隔。确保第二个段落不含任何标点符号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n\n    # 检查响应格式标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取实际内容\n    content = response[5:-5].strip()\n    \n    # 检查字数要求\n    hanzi_count = len(re.findall(r'[\\u4e00-\\u9fff]', content))\n    if hanzi_count < 120:\n        err_infos.append(f\"字数不足(需≥120字，实际{hanzi_count}字)\")\n    if hanzi_count > 200:\n        err_infos.append(f\"字数超过(需≤200字，实际{hanzi_count}字)\")\n    \n    # 检查挑战标记\n    for marker in [\"&挑战1&\", \"&挑战2&\", \"&挑战3&\"]:\n        if marker not in content:\n            err_infos.append(f\"缺少挑战标记:{marker}\")\n    \n    # 检查段落分隔\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误(需4段，实际{len(paragraphs)}段)\")\n    else:\n        # 检查第二段落标点\n        if re.search(r'[，。！？；：“”‘’—…]', paragraphs[1]):\n            err_infos.append(\"第二段落包含标点符号\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "在城市化进程中，许多城市面临着如何有效管理废弃物的问题。尤其是大城市，随着人口的迅速增长，垃圾处理已成为一个重大挑战。废弃物管理不仅关系到城市的卫生与环境，也影响着居民的生活质量和城市的可持续发展。现代技术的进步为废弃物管理提供了一些新的解决方案，如智能垃圾分类系统、废弃物回收技术以及垃圾填埋场的气体收集与利用技术。然而，技术的应用需要与城市的管理政策相结合，并得到市民的广泛参与。\n\n请撰写一篇关于“现代城市废弃物管理”的文章。文章需以“在当前”三个字开头，并在内容中详细解释并列出现代城市废弃物管理的三种主要策略，使用“&策略1&”、“&策略2&”和“&策略3&”作为主要策略的占位符。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第2段的第33个汉字必须是“绿”字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1:\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    content = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 检查开头\n    if not content.startswith(\"在当前\"):\n        err_infos.append(\"开头非'在当前'\")\n    \n    # 检查段落分隔符\n    segments = content.split('～～')\n    if len(segments) != 4:\n        err_infos.append(f\"段落数量错误，应为4段实际{len(segments)}段\")\n    \n    # 检查策略占位符\n    required_placeholders = {\"&策略1&\", \"&策略2&\", \"&策略3&\"}\n    missing_ph = [ph for ph in required_placeholders if ph not in content]\n    if missing_ph:\n        err_infos.append(f\"缺少占位符：{','.join(missing_ph)}\")\n    \n    # 检查第二段第33个汉字\n    if len(segments) >= 2:\n        second_para = segments[1]\n        hanzi_count = 0\n        target_char = None\n        for char in second_para:\n            if '一' <= char <= '鿿':  # 汉字Unicode范围\n                hanzi_count += 1\n                if hanzi_count == 33:\n                    target_char = char\n                    break\n        \n        if hanzi_count < 33:\n            err_infos.append(f\"第二段不足33个汉字（仅{hanzi_count}个）\")\n        elif target_char != \"绿\":\n            err_infos.append(f\"第二段第33个汉字应为'绿'，实际为'{target_char}'\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于城市夜晚生活的文章，要求文章必须包含以下词语：“霓虹灯”、“夜市”和“音乐”，其中“霓虹灯”至少出现三次，“夜市”必须只出现两次，“音乐”至多出现一次。文章需要以“夜幕降临”开头，并分为四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息列表\n    err_infos = []\n    \n    # 检查答案标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1:\n        err_infos.append(\"缺少【答案开始】标记\")\n    if end_idx == -1:\n        err_infos.append(\"缺少【答案结束】标记\")\n    if start_idx != -1 and end_idx != -1 and end_idx <= start_idx:\n        err_infos.append(\"【答案结束】标记位置不正确\")\n    \n    # 如果有标记错误，直接返回\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 检查开头\n    if not content.startswith(\"夜幕降临\"):\n        err_infos.append(\"未以'夜幕降临'开头\")\n    \n    # 检查段落结构\n    paragraphs = [p.strip() for p in re.split(r'\\n{2,}', content) if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量应为4，实际为{len(paragraphs)}\")\n    \n    # 检查第三段落句子数\n    if len(paragraphs) >= 3:\n        sentences = [s.strip() for s in re.split(r'[。？！]', paragraphs[2]) if s.strip()]\n        if len(sentences) != 6:\n            err_infos.append(f\"第三段落应为6个句子，实际为{len(sentences)}个\")\n    else:\n        err_infos.append(\"缺少第三段落\")\n    \n    # 检查关键词数量\n    neon_count = content.count(\"霓虹灯\")\n    if neon_count < 3:\n        err_infos.append(f\"'霓虹灯'出现次数不足3次，实际为{neon_count}次\")\n    \n    market_count = content.count(\"夜市\")\n    if market_count != 2:\n        err_infos.append(f\"'夜市'出现次数应为2次，实际为{market_count}次\")\n    \n    music_count = content.count(\"音乐\")\n    if music_count > 1:\n        err_infos.append(f\"'音乐'出现次数超过1次，实际为{music_count}次\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "首先，将下列文本中的第1个句子替换为“他优化音乐？”然后，再将上一步修改过的文本中的第2个句子的第23个汉字删除；然后，再将上一步修改过的文本中第4个句子和第3个句子的顺序调换；最后，将上一步修改过的文本中的后三个汉字按相同的先后顺序放到文本最前面。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n分配律是数学中一个基本的运算规律，帮助人们简化和解决复杂的运算问题。分配律的应用贯穿于数学学习的各个阶段，从小学的简单计算到中学的代数运算，再到高等数学的复杂问题。在代数运算中，分配律是因式分解和多项式运算的重要工具。掌握分配律能够提高数学运算能力，是逻辑思维和问题解决能力的重要体现。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    response = response.strip()\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    standard_answer = \"要工具他优化音乐？分配律的应用贯穿于数学学习的各个阶段，从小学的单计算到中学的代数运算，再到高等数学的复杂问题。掌握分配律能够提高数学运算能力，是逻辑思维和问题解决能力的重要体现。在代数运算中，分配律是因式分解和多项式运算的重要工具。\"\n    \n    # 检查响应格式\n    if not response.startswith(start_marker) or end_marker not in response:\n        return {\"check_code\": False, \"reason\": \"响应格式错误：缺少开始/结束标记\"}\n    \n    # 提取实际答案\n    start_idx = response.find(start_marker) + len(start_marker)\n    end_idx = response.find(end_marker)\n    user_answer = response[start_idx:end_idx].strip()\n    \n    # 验证答案内容\n    if user_answer == standard_answer:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": f\"答案不匹配。预期：'{standard_answer}'，实际：'{user_answer}'\"}"}
{"prompt": "请撰写一篇关于“智能家居的便利性与挑战”的文章。要求文章包含3个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第2段的第7个汉字必须是“家”字。文章中必须出现“安全”、“效率”和“隐私”三个词语，每个词语至少出现一次。文章长度不超过120个汉字，并以“未来充满可能性。”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查起始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1:\n        errors.append(\"缺少【答案开始】标记\")\n    if end_idx == -1:\n        errors.append(\"缺少【答案结束】标记\")\n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        return {\"check_code\": False, \"reason\": \",\".join(errors)}\n    \n    # 提取实际回答内容\n    content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 检查段落分隔符\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 3:\n        errors.append(f\"段落数量错误，需要3段，实际{len(paragraphs)}段\")\n    \n    # 检查第2段第7个汉字\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1].replace(' ', '').replace('\\n', '')\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fff]', second_para)\n        if len(chinese_chars) < 7:\n            errors.append(\"第2段汉字不足7个\")\n        elif chinese_chars[6] != '家':\n            errors.append(f\"第2段第7个汉字应为'家'，实际是'{chinese_chars[6]}'\")\n    \n    # 检查关键词\n    keywords = [\"安全\", \"效率\", \"隐私\"]\n    for keyword in keywords:\n        if keyword not in content:\n            errors.append(f\"缺少关键词'{keyword}'\")\n    \n    # 检查长度\n    chinese_chars = re.findall(r'[\\u4e00-\\u9fff]', content)\n    if len(chinese_chars) > 120:\n        errors.append(f\"文章长度超过120字（实际{len(chinese_chars)}字）\")\n    \n    # 检查结尾\n    if not content.endswith(\"未来充满可能性。\"):\n        errors.append(\"结尾应为'未来充满可能性。'\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \",\".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于城市农业的文章，描述它如何影响现代城市的环境和经济，但请避免使用“绿色”、“可持续”以及“有机”这些词。文章应恰好只有10个句子（每个句子之间用huhs这串英文作为分隔符号），并分为4个段落，每个段落之间用'～～'符号分隔。其中第3段必须有至少150个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    errors = []\n    \n    # 检查开始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少答案开始标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少答案结束标记\")\n    \n    # 提取答案内容\n    if errors:  # 如果已有标记错误，跳过后续检查\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查禁用词\n    forbidden_words = [\"绿色\", \"可持续\", \"有机\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        errors.append(f\"包含禁用词：{','.join(found_words)}\")\n    \n    # 检查段落分隔符\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 4:\n        errors.append(f\"段落数量错误（{len(paragraphs)}段，应为4段）\")\n    \n    # 检查句子数量和分隔符\n    all_sentences = []\n    for i, para in enumerate(paragraphs):\n        sentences = [s.strip() for s in para.split('huhs') if s.strip()]\n        all_sentences.extend(sentences)\n        \n    if len(all_sentences) != 10:\n        errors.append(f\"句子数量错误（{len(all_sentences)}句，应为10句）\")\n    \n    # 检查第三段长度（如果存在）\n    if len(paragraphs) >= 3:\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', paragraphs[2])\n        if len(chinese_chars) < 150:\n            errors.append(f\"第三段汉字不足（{len(chinese_chars)}字，至少需要150字）\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "在过去的几十年里，数字技术的飞速发展对各行各业都产生了深远的影响。在教育领域，数字技术的应用大大改变了教学模式和学习体验。随着在线教育平台的兴起，学生和教师之间的互动方式也发生了显著变化。无论是通过视频会议进行的远程学习，还是通过学习管理系统进行的课程安排，数字技术都在不断重新定义我们对传统教育的认知。然而，这些变化也带来了新的挑战，例如数字鸿沟、网络安全问题以及在线学习的有效性等。理解这些问题对于教育工作者和政策制定者来说至关重要。本文旨在探讨数字技术在现代教育中的应用现状及其带来的影响。\n\n请撰写一篇关于“数字技术对现代教育的影响”的文章。文章需包含以下要求：\n1. 文章中必须包含“互动”和“在线学习”这两个词。\n2. 请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。\n3. 文中应恰好有15个句子（用中文句号或问号或感叹号分隔）。请确保第10个句子的第8个汉字是“教”字。\n4. 第5个句子必须包含至少30个汉字。\n5. 文章最后需以“令人震撼。”作为结尾\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n\n    # 检查响应格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"格式错误：必须包含【答案开始】和【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    content = response[6:-6].strip()  # 提取实际内容\n\n    # 检查关键词\n    if \"互动\" not in content:\n        err_infos.append(\"缺少关键词'互动'\")\n    if \"在线学习\" not in content:\n        err_infos.append(\"缺少关键词'在线学习'\")\n\n    # 检查段落分隔\n    paragraphs = [p.strip() for p in content.split(\"～～\") if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误：要求4段，实际{len(paragraphs)}段\")\n\n    # 句子分割与计数\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) != 15:\n        err_infos.append(f\"句子数量错误：要求15句，实际{len(sentences)}句\")\n    \n    # 检查第10句第8字\n    if len(sentences) >= 10:\n        tenth_sent = ''.join(filter(str.isalpha, sentences[9]))  # 仅保留汉字\n        if len(tenth_sent) < 8 or tenth_sent[7] != '教':\n            err_infos.append(\"第10句第8字不是'教'\")\n    \n    # 检查第5句长度\n    if len(sentences) >= 5:\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', sentences[4])\n        if len(chinese_chars) < 30:\n            err_infos.append(f\"第5句汉字不足30个（实际{len(chinese_chars)}个）\")\n    \n    # 检查结尾\n    if not content.endswith(\"令人震撼。\"):\n        err_infos.append(\"结尾未使用'令人震撼。'\")\n\n    return {\"check_code\": len(err_infos) == 0, \"reason\": err_infos}"}
{"prompt": "在当今社会，越来越多的人关注环保问题，减少碳排放和垃圾处理是关键议题。许多家庭和企业都在探索如何通过日常行为来改善环境状况。环保行动不仅可以通过大规模的政策和技术变革来实现，同时也需要每个人在日常生活中采取小措施来做出贡献。比如，减少使用一次性塑料，选择可再生能源和节能电器，参与社区的环保活动等。家庭内部的环保措施，例如废物分类和回收，减少水电消耗，都是可以直接影响环境的简单步骤。此外，教育孩子环保知识，影响下一代的环保意识也是重要的。通过这些方式，每个人都能成为环保的参与者，为地球的未来贡献力量。\n请撰写一篇关于“家庭环保措施”的文章。文章应刚好为三个段落（不要出现标题），并用'～～'符号分隔段落。在第2段中，第13个汉字必须是“水”字。文章中必须至少出现3次“绿色”一词，并且恰好5次“环保”一词。文章总共需包含12个句子，并且每个句子以9338这个数字作为分隔符号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"Missing start tag '【答案开始】'\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"Missing end tag '【答案结束】'\")\n    \n    # 提取实际内容\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    start_idx = response.find(start_tag) + len(start_tag)\n    end_idx = response.find(end_tag)\n    if start_idx < len(start_tag) or end_idx == -1:\n        errors.append(\"Invalid tag structure\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    content = response[start_idx:end_idx].strip()\n    \n    # 检查段落分隔\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 3:\n        errors.append(f\"Should have exactly 3 paragraphs (found {len(paragraphs)})\")\n    \n    # 检查句子数量\n    sentences = []\n    for para in paragraphs:\n        # 过滤空句子（可能由连续分隔符导致）\n        para_sentences = [s.strip() for s in re.split(r'9338', para) if s.strip()]\n        sentences.extend(para_sentences)\n    \n    if len(sentences) != 12:\n        errors.append(f\"Should have exactly 12 sentences (found {len(sentences)})\")\n    \n    # 检查第二段第13个汉字\n    if len(paragraphs) >= 2:\n        para2_text = re.sub(r'\\s', '', paragraphs[1])  # 移除所有空白\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', para2_text)\n        if len(chinese_chars) < 13:\n            errors.append(\"Second paragraph has fewer than 13 Chinese characters\")\n        elif chinese_chars[12] != '水':  # 第13个字符索引为12\n            errors.append(f\"13th Chinese character in second paragraph is '{chinese_chars[12]}' (should be '水')\")\n    \n    # 检查关键词计数\n    green_count = content.count(\"绿色\")\n    if green_count < 3:\n        errors.append(f\"'绿色' appears {green_count} times (minimum 3 required)\")\n    \n    eco_count = content.count(\"环保\")\n    if eco_count != 5:\n        errors.append(f\"'环保' appears {eco_count} times (exactly 5 required)\")\n    \n    # 检查句子分隔符完整性\n    if content.count(\"9338\") != 11:  # 12个句子需要11个分隔符\n        errors.append(f\"Found {content.count('9338')} '9338' separators (exactly 11 required)\")\n    \n    # 检查分隔符位置错误\n    for i, para in enumerate(paragraphs):\n        if para.startswith(\"9338\"):\n            errors.append(f\"Paragraph {i+1} starts with '9338'\")\n        if para.endswith(\"9338\"):\n            errors.append(f\"Paragraph {i+1} ends with '9338'\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于乡村生活中传统节日庆祝的文章。在文章中，描述四个主要的活动，不能使用“现代”、“科技”、“城市”这三个词。文章必须包含“家人”、“庆典”、“美食”这三个词，每个词至少出现两次。在最后一段用“这就是我们传承的文化。”结尾，内容不能出现中文逗号。文章应有五个段落，每个段落用'～～'符号分隔。在第三个段落中，必须有四个句子。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"missing start marker\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"missing end marker\")\n    \n    # 提取文章内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 检查段落分隔符\n    paragraphs = [p.strip() for p in content.split('～～')]\n    if len(paragraphs) != 5:\n        errors.append(f\"paragraph count: {len(paragraphs)}\")\n    \n    # 检查禁用词\n    forbidden = [\"现代\", \"科技\", \"城市\"]\n    for word in forbidden:\n        if word in content:\n            errors.append(f\"forbidden word: {word}\")\n    \n    # 检查关键词频率\n    keywords = [\"家人\", \"庆典\", \"美食\"]\n    for word in keywords:\n        if content.count(word) < 2:\n            errors.append(f\"keyword frequency: {word}\")\n    \n    # 检查结尾句\n    if not paragraphs[-1].endswith(\"这就是我们传承的文化。\"):\n        errors.append(\"incorrect ending\")\n    \n    # 检查中文逗号\n    if \"，\" in content:\n        errors.append(\"contains Chinese comma\")\n    \n    # 检查第三段句子数\n    if len(paragraphs) >= 3:\n        sentences = re.split(r'[。？！]', paragraphs[2])\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 4:\n            errors.append(f\"third paragraph sentences: {len(sentences)}\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \", \".join(errors) if errors else \"\"\n    }"}
{"prompt": "近年来，随着快递行业的迅速发展，包装废弃物的数量也急剧增加。大量的纸箱、塑料泡沫和胶带被使用后丢弃，对环境造成了巨大压力。根据相关统计，2022年我国产生的快递包装废弃物总量超过百万吨，而其中仅有不到30%被有效回收。为了减少快递包装的污染，环保型包装材料和循环利用的理念逐渐进入公众视野。绿色快递不仅是企业的责任，也是每个人的义务。  \n\n请写一篇关于“绿色快递包装”的文章，探讨如何实现快递包装的环保化。文章内容不得少于600个汉字，但不得超过800个汉字。文章内容中需详细列出三种可能的解决方法，并使用“&方法1&”、“&方法2&”和“&方法3&”作为主要方法的占位符。文章只能分为5个段落（不要出现标题），每个段落之间用‘～～’符号分隔。在第二段中，“循环利用”这个词务必恰好只出现两次。此外，要求第四个句子（用中文句号或问号或感叹号分隔）必须以“在未来的物流行业”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查答案标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        err_infos.append(\"答案标记缺失或位置错误\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 1. 检查汉字数量\n    hanzi_chars = re.findall(r'[\\u4e00-\\u9fa5]', content)\n    hanzi_count = len(hanzi_chars)\n    if hanzi_count < 600:\n        err_infos.append(f\"汉字数量不足（当前：{hanzi_count}）\")\n    if hanzi_count > 800:\n        err_infos.append(f\"汉字数量超出（当前：{hanzi_count}）\")\n    \n    # 2. 检查段落数量和分隔符\n    paragraphs = [p.strip() for p in content.split('～～') if p.strip()]\n    if len(paragraphs) != 5:\n        err_infos.append(f\"段落数量错误（当前：{len(paragraphs)}段）\")\n    \n    # 3. 检查第二段的\"循环利用\"次数\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1]\n        loop_count = second_para.count(\"循环利用\")\n        if loop_count != 2:\n            err_infos.append(f\"第二段'循环利用'出现次数错误（当前：{loop_count}次）\")\n    else:\n        err_infos.append(\"无法检查第二段（段落不足）\")\n    \n    # 4. 检查三个方法占位符\n    for i in range(1, 4):\n        placeholder = f\"&方法{i}&\"\n        if placeholder not in content:\n            err_infos.append(f\"缺失占位符：{placeholder}\")\n    \n    # 5. 检查第四个句子开头\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    if len(sentences) >= 4:\n        fourth_sentence = sentences[3]\n        if not fourth_sentence.startswith(\"在未来的物流行业\"):\n            err_infos.append(\"第四句未以'在未来的物流行业'开头\")\n    else:\n        err_infos.append(\"句子数量不足无法检查第四句\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "夏天是许多人最喜欢的季节，因为天气温暖，白天时间长，人们可以享受各种户外活动。然而，夏季的高温也会带来一些健康问题，如中暑、晒伤和脱水等。因此，了解如何在夏季保持健康非常重要。根据世界卫生组织的建议，人们在夏季应避免长时间暴露在阳光下，特别是中午至下午三点期间。此外，饮用足够的水以保持身体水分，穿着轻便、透气的衣物，并使用防晒霜保护皮肤也是必不可少的措施。了解这些健康小贴士，可以帮助你在夏季愉快地享受户外活动的同时，保持身体健康。\n\n撰写一篇关于如何在夏季保持健康的文章，文章应只出现两个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第一个段落中，必须刚好由四个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有正确标记开始或结束。\"\n        }\n    content = response[6:-6].strip()\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 2:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章段落数不正确。\"\n        }\n    # 正则表达式模式：匹配中文句号、问号、感叹号中的任意一个\n    pattern = r'[。？！]'\n\n    # 使用正则表达式分割文本\n    raw_sentences = re.split(pattern, paragraphs[0])\n\n    # 过滤分割结果中的空字符串（处理文本开头/结尾有标点或连续标点的情况）\n    filtered_sentences = [sentence.strip() for sentence in raw_sentences if sentence.strip()]\n    if len(filtered_sentences) != 4:\n        return {\n            \"check_code\": False,\n            \"num\": len(first_paragraph_sentences),\n            \"reason\": \"第一个段落的句子数不正确。\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请撰写一篇关于“烹饪中使用香料的技巧”的文章，请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    errors = []\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答缺少结束标记【答案结束】\")\n    \n    # 如果标记错误直接返回\n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查段落分隔符\n    paragraphs = re.split(r'～～', content)\n    if len(paragraphs) != 4:\n        errors.append(f\"需要4个段落，实际检测到{len(paragraphs)}个段落\")\n    \n    # 检查段落内容\n    for i, para in enumerate(paragraphs):\n        para = para.strip()\n        # 检查段落是否为空\n        if not para:\n            errors.append(f\"第{i+1}段内容为空\")\n        # 检查是否包含标题特征\n        if re.search(r'^[一二三四]、', para) or re.search(r'^段落\\d+', para):\n            errors.append(f\"第{i+1}段包含标题格式\")\n        # 检查段落长度合理性\n        if len(para) < 30:\n            errors.append(f\"第{i+1}段内容过短（少于30字符）\")\n    \n    # 检查多余分隔符\n    if re.search(r'～～[^～]*(～～){2}', content):\n        errors.append(\"检测到多余的分隔符\")\n    \n    # 检查额外内容\n    if re.search(r'解析：|总结：|注意：', content):\n        errors.append(\"包含禁止的解析性内容\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于夏季旅游的文章，文章必须包含“海滩”和“阳光”这两个词。文章的长度应在200字到300字之间。文章应只由四个段落组成，每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    import sys\n\n    expected_instruction = (\n        '请撰写一篇关于夏季旅游的文章，文章必须包含“海滩”和“阳光”这两个词。文章的长度应在200字到300字之间。'\n        '文章应只由四个段落组成，每个段落用两个换行符“\\n\\n”分隔开来。在第三个段落中，必须刚好由六个句子'\n        '（用中文句号或问号或感叹号分隔）组成。'\n    )\n\n    reasons = []\n    \n    # 检查指令重复部分\n    if not response.startswith(expected_instruction):\n        reasons.append(\"指令重复不正确或缺失\")\n    else:\n        after_instruction = response[len(expected_instruction):]\n        if not after_instruction.startswith(\"【答案开始】\"):\n            reasons.append(\"【答案开始】标记缺失或位置错误\")\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker, start_idx)\n    \n    if start_idx == -1:\n        reasons.append(\"缺少【答案开始】标记\")\n    if end_idx == -1:\n        reasons.append(\"缺少【答案结束】标记\")\n    if start_idx == -1 or end_idx == -1:\n        return {\"check_code\": False, \"reason\": \"; \".join(reasons)}\n    \n    content = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 检查关键词\n    if \"海滩\" not in content:\n        reasons.append(\"缺少关键词'海滩'\")\n    if \"阳光\" not in content:\n        reasons.append(\"缺少关键词'阳光'\")\n    \n    # 检查文章长度\n    content_length = len(content)\n    if content_length < 200:\n        reasons.append(f\"文章过短({content_length}字<200字)\")\n    elif content_length > 300:\n        reasons.append(f\"文章过长({content_length}字>300字)\")\n    \n    # 检查段落结构\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 4:\n        reasons.append(f\"段落数量错误({len(paragraphs)}段≠4段)\")\n    else:\n        # 检查第三段落句子数量\n        third_para = paragraphs[2]\n        sentences = [s.strip() for s in re.split(r'[。？！]', third_para) if s.strip()]\n        if len(sentences) != 6:\n            reasons.append(f\"第三段落句子数量错误({len(sentences)}句≠6句)\")\n    return {\n        \"check_code\": len(reasons) == 0,\n        \"reason\": \"; \".join(reasons) if reasons else \"\"\n    }"}
{"prompt": "请写一个关于古代航海探险的短篇故事，要求在故事中必须包含“海浪”、“星空”这两个词，但不能使用“船长”、“宝藏”这两个词。故事应该以“在那遥远的海域”开头，并由8个句子（用中文句号或问号或感叹号分隔）组成。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"缺少【答案开始】或【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    start_idx = response.index(\"【答案开始】\") + 6\n    end_idx = response.index(\"【答案结束】\")\n    answer_content = response[7:-7].strip()\n    \n    # 检查重复指令部分\n    required_text = (\n        \"请写一个关于古代航海探险的短篇故事，要求在故事中必须包含“海浪”、“星空”这两个词，但不能使用“船长”、“宝藏”这两个词。故事应该以“在那遥远的海域”开头，并由8个句子（用中文句号或问号或感叹号分隔）组成。首先一字不差的重复上面的要求，然后直接给出答案。\"\n    )\n    if not answer_content.startswith(required_text):\n        err_infos.append(\"未正确重复指令要求\")\n    \n    # 提取故事部分（重复要求后的内容）\n    story_part = answer_content[len(required_text):].strip()\n    \n    # 检查故事开头\n    if not story_part.startswith(\"在那遥远的海域\"):\n        err_infos.append(\"故事未以'在那遥远的海域'开头\")\n    \n    # 分句检查\n    sentences = re.split(r'[。？！]', story_part)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 8:\n        err_infos.append(f\"故事句子数量不符（要求8句，实际{len(sentences)}句）\")\n    \n    # 关键词检查\n    full_story = \"\".join(sentences)\n    if \"海浪\" not in full_story:\n        err_infos.append(\"未包含关键词'海浪'\")\n    if \"星空\" not in full_story:\n        err_infos.append(\"未包含关键词'星空'\")\n    if \"船长\" in full_story:\n        err_infos.append(\"包含禁用词'船长'\")\n    if \"宝藏\" in full_story:\n        err_infos.append(\"包含禁用词'宝藏'\")\n    \n    # 返回结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“城市交通拥堵与解决方案”的文章，请确保文章只出现4个段落（不要出现标题），每个段落之间用“～～”符号分隔。其中第3段的第8个汉字必须是“策”字；第2段的内容不得超过100个汉字。文章必须以“交通问题的解决需要全社会的共同努力。”这句话结尾。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 定义原始指令\n    original_instruction = \"请撰写一篇关于“城市交通拥堵与解决方案”的文章，请确保文章只出现4个段落（不要出现标题），每个段落之间用“～～”符号分隔。其中第3段的第8个汉字必须是“策”字；第2段的内容不得超过100个汉字。文章必须以“交通问题的解决需要全社会的共同努力。”这句话结尾。\"\n\n    # 检查指令重复部分\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    # 验证标记存在性\n    if start_idx == -1:\n        err_infos.append(\"缺失【答案开始】标记\")\n    if end_idx == -1:\n        err_infos.append(\"缺失【答案结束】标记\")\n    if start_idx != -1 and end_idx != -1 and end_idx <= start_idx:\n        err_infos.append(\"【答案结束】出现在【答案开始】之前\")\n    \n    # 检查指令重复是否正确\n    response = response[7:-7].strip()\n    if not response.startswith(original_instruction):\n        err_infos.append(\"指令重复部分不完整或不准确\")\n    answer_content = response.replace(original_instruction, \"\").strip()\n    \n    # 验证答案内容结构\n    if answer_content:\n        # 检查结尾\n        if not answer_content.endswith(\"交通问题的解决需要全社会的共同努力。\"):\n            err_infos.append(\"结尾语句不符合要求\")\n        \n        # 检查段落数量\n        paragraphs = [p.strip() for p in answer_content.split(\"～～\") if p.strip()]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"段落数量应为4段，实际为{len(paragraphs)}段\")\n        else:\n            # 检查第二段长度\n            hanzi_para2 = re.findall(r'[一-龥]', paragraphs[1])\n            if len(hanzi_para2) > 100:\n                err_infos.append(f\"第二段超过100个汉字（实际{len(hanzi_para2)}字）\")\n            \n            # 检查第三段第8个汉字\n            hanzi_para3 = re.findall(r'[一-龥]', paragraphs[2])\n            if len(hanzi_para3) < 8:\n                err_infos.append(\"第三段不足8个汉字\")\n            elif hanzi_para3[7] != \"策\":\n                err_infos.append(f\"第三段第8个汉字应为'策'，实际为'{hanzi_para3[7]}'\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "将下列文本中音调为第四声的字替换为大写字母“A”，直接返回修改后的文本，不要出现其他多余的内容。\n\n土星以其独特的物理特性、复杂的大气结构和丰富的卫星系统，成为太阳系中最引人注目的天体之一。它不仅是天文学研究的重点，也是人类探索宇宙奥秘的重要对象。未来的探索任务或许能够揭开更多关于土星的秘密，进一步加深我们对太阳系乃至宇宙的理解。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from pypinyin import lazy_pinyin, Style\n    \n    original_text = \"土星以其独特的物理特性、复杂的大气结构和丰富的卫星系统，成为太阳系中最引人注目的天体之一。它不仅是天文学研究的重点，也是人类探索宇宙奥秘的重要对象。未来的探索任务或许能够揭开更多关于土星的秘密，进一步加深我们对太阳系乃至宇宙的理解。\"\n    \n    # 验证标记格式\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not (start_marker in response and end_marker in response):\n        return {\"check_code\": False, \"reason\": \"缺少答案标记\"}\n    \n    # 提取答案内容\n    pattern = re.compile(r\"【答案开始】(.*?)【答案结束】\", re.DOTALL)\n    match = pattern.search(response)\n    if not match:\n        return {\"check_code\": False, \"reason\": \"答案格式错误\"}\n    answer = match.group(1).strip()\n    \n    # 验证长度\n    if len(answer) != len(original_text):\n        return {\"check_code\": False, \"reason\": f\"长度错误(期望:{len(original_text)}, 实际:{len(answer)})\"}\n    \n    # 获取原文本第四声位置\n    pinyin_list = lazy_pinyin(original_text, style=Style.TONE3)\n    fourth_tones = []\n    for i, (char, py) in enumerate(zip(original_text, pinyin_list)):\n        if char != py and py.endswith('4'):  # 中文字符且第四声\n            fourth_tones.append(i)\n    \n    # 验证替换结果\n    errors = []\n    for idx in fourth_tones:\n        if answer[idx] != 'A':\n            errors.append(f\"位置{idx}应为'A'(原字:'{original_text[idx]}')\")\n    \n    # 验证非替换部分\n    for i, (orig_char, ans_char) in enumerate(zip(original_text, answer)):\n        if i in fourth_tones:  # 已检查过替换部分\n            continue\n        if orig_char != ans_char:\n            errors.append(f\"位置{i}应保持'{orig_char}'\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \"|\".join(errors[:3])}  # 返回前3个错误\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于如何在家庭环境中有效提升小学生数学兴趣的文章，内容不能出现中文逗号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少起始标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少结束标记\")\n    \n    # 提取回答内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[5:-5]  # 去除标记\n    \n    # 检查中文逗号\n    if \"，\" in content:\n        errors.append(\"内容包含中文逗号\")\n    \n    # 验证主题相关性\n    required_keywords = [\"数学\", \"家庭\", \"兴趣\"]\n    found_keywords = [kw for kw in required_keywords if kw in content]\n    if len(found_keywords) < 3:\n        errors.append(\"内容主题不相关\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \",\".join(errors) if errors else \"\"\n    }"}
{"prompt": "在现代社会中，垃圾分类已成为城市管理和环境保护的重要组成部分。随着人口的不断增长和城市化进程的加快，垃圾产生量也在持续增加，对城市环境和居民健康构成了巨大的挑战。正确进行垃圾分类可以有效减少垃圾处理的成本，提高资源的回收利用率，并减轻对自然环境的压力。中国许多城市已经开始实施垃圾分类政策，并取得了一定的成效。然而，垃圾分类仍然面临公众意识不足、政策执行不力和设施不完善等问题。为了解决这些问题，政府和社会各界需要加强合作，提高公众的环保意识，完善相关设施，并制定和执行更加合理的政策。\n\n请撰写一篇关于“垃圾分类的重要性和实施挑战”的文章，内容不少于500个汉字且不超过550个汉字。请确保文章只出现2个段落（不要出现标题），每个段落之间用'～～'符号分隔。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 初始化验证结果\n    check_code = True\n    err_infos = []\n    \n    # 检查答案标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    if not response.startswith(start_marker):\n        check_code = False\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    \n    if not response.endswith(end_marker):\n        check_code = False\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取实际回答内容\n    content = response.replace(start_marker, \"\").replace(end_marker, \"\").strip()\n    \n    # 检查段落分隔符\n    if \"～～\" not in content:\n        check_code = False\n        err_infos.append(\"缺少段落分隔符'～～'\")\n    else:\n        paragraphs = content.split(\"～～\")\n        if len(paragraphs) != 2:\n            check_code = False\n            err_infos.append(f\"段落数量错误（需要2段，实际{len(paragraphs)}段）\")\n    \n    # 统计汉字数量\n    hanzi_count = len(re.findall(r'[一-龥]', content))\n    if hanzi_count < 500:\n        check_code = False\n        err_infos.append(f\"字数不足（需要≥500汉字，实际{hanzi_count}字）\")\n    elif hanzi_count > 550:\n        check_code = False\n        err_infos.append(f\"字数超限（需要≤550汉字，实际{hanzi_count}字）\")\n    \n    return {\n        \"check_code\": check_code,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "将下列文本中的第1个句子的“法”字删除；最后，将上一步修改过的文本中的后三个汉字按相同的先后顺序放到文本最前面。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n雕塑是通过各种材料创作三维艺术形象的艺术形式，具有悠久的历史和丰富的表现手法。在现代艺术中，雕塑如何突破传统形式，利用新材料和技术进行创新表达？请结合具体艺术家或作品进行分析。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义原始文本\n    original_text = \"雕塑是通过各种材料创作三维艺术形象的艺术形式，具有悠久的历史和丰富的表现手法。在现代艺术中，雕塑如何突破传统形式，利用新材料和技术进行创新表达？请结合具体艺术家或作品进行分析。\"\n    \n    # 验证步骤1: 删除第一个句子的\"法\"字\n    first_sentence_end = original_text.find('。') + 1\n    first_sentence = original_text[:first_sentence_end]\n    modified_step1 = first_sentence.replace(\"法\", \"\", 1) + original_text[first_sentence_end:]\n    \n    # 验证步骤2: 提取最后三个汉字并放到最前面\n    all_hanzi = re.findall(r'[一-龥]', modified_step1)\n    if len(all_hanzi) < 3:\n        return {\"check_code\": False, \"reason\": \"修改后文本不足3个汉字\"}\n    last_three_hanzi = ''.join(all_hanzi[-3:])\n    expected_result = last_three_hanzi + modified_step1\n    \n    # 检查响应格式和内容\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"缺少答案标记\"}\n    \n    actual_answer = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 验证最终结果\n    if actual_answer != expected_result:\n        return {\"check_code\": False, \"reason\": \"修改结果不符合要求\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在现代社会，随着科技的发展，电子产品越来越普及，尤其是智能手机。智能手机不仅改变了人们的沟通方式，还影响了我们的生活方式和工作方式。然而，过度依赖智能手机也带来了许多问题，比如注意力不集中、视力下降以及社交能力的减弱。特别是在青少年群体中，这些问题尤为明显。青少年的自控能力较弱，容易沉迷于手机游戏和社交媒体，导致学业成绩下降和心理健康问题。为了应对这些问题，许多学校和家庭采取了各种措施来限制青少年的手机使用时间，并鼓励他们多参与户外活动和面对面的社交活动。\n\n请写一篇关于智能手机对青少年影响的文章，内容至少400字，最多500字。要求文章的第三个句子（用中文句号或问号或感叹号分隔）以‘这引起了广泛关注’结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息列表\n    err_infos = []\n    \n    # 检查是否包含答案标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response or end_marker not in response:\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    start_index = response.find(start_marker) + len(start_marker)\n    end_index = response.find(end_marker)\n    content = response[start_index:end_index].strip()\n    \n    # 检查字数（400-500字）\n    clean_content = re.sub(r'\\s', '', content)  # 移除所有空白字符\n    char_count = len(clean_content)\n    if char_count < 400:\n        err_infos.append(f\"字数不足（当前：{char_count}字）\")\n    elif char_count > 500:\n        err_infos.append(f\"字数超过（当前：{char_count}字）\")\n    \n    # 检查第三个句子\n    sentences = re.split(r'([。？！])', content)  # 用分隔符分割并保留分隔符\n    # 重组为完整句子（句子+分隔符）\n    complete_sentences = []\n    for i in range(0, len(sentences)-1, 2):\n        if i+1 < len(sentences):\n            complete_sentences.append(sentences[i] + sentences[i+1])\n    \n    # 验证第三个句子\n    if len(complete_sentences) < 3:\n        err_infos.append(\"不足三个完整句子\")\n    else:\n        third_sentence = complete_sentences[2].strip()\n        if not third_sentence.endswith('这引起了广泛关注'):\n            # 检查是否以指定短语+标点结尾\n            if (len(third_sentence) >= 8 and \n                third_sentence[-8:-1] == '这引起了广泛关注' and \n                third_sentence[-1] in '。？！'):\n                pass  # 符合要求\n            else:\n                err_infos.append(f\"第三句不以'这引起了广泛关注'结尾（第三句：'{third_sentence[:30]}...'）\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "近年来，虚拟现实（Virtual Reality, VR）技术在各个领域的应用逐渐增加。这项技术通过计算机生成逼真的三维环境，使用户能够沉浸在虚拟世界中进行交互。VR最初被广泛应用于游戏和娱乐行业，然而随着技术的进步，其应用范围已扩展到教育、医疗、建筑设计等领域。在教育领域，VR技术被用来创建沉浸式学习环境，使学生能够以更直观和互动的方式学习复杂的概念。在医疗领域，VR技术则用于外科手术模拟和心理治疗，为医生提供安全的训练平台，并帮助患者通过虚拟环境减少焦虑。在建筑设计中，VR可以让设计师和客户在项目建成之前就体验和修改设计。尽管VR技术前景广阔，但其普及仍面临成本、技术限制和用户体验等挑战。了解这些挑战以及未来可能的解决方案将有助于推动VR技术更广泛的应用和发展。\n\n请撰写一篇关于虚拟现实技术在未来教育领域应用的文章。文章应包含两个段落（不要出现标题），每个段落之间用'～～'符号分隔。第一个段落必须包含五个句子（用中文句号或问号或感叹号分隔）。请确保每个句子至少由15个汉字组成，并且第三个句子以“值得期待”结尾。请在文章中详细解释并列出三个主要应用领域，使用“&应用1&”、“&应用2&”和“&应用3&”作为主要应用领域的占位符。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证结果数据结构\n    err_infos = []\n    \n    # 检查回答标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取回答内容\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[5:-5].strip()  # 去除标记\n    else:\n        content = \"\"\n    \n    # 检查段落分隔符\n    if \"～～\" not in content:\n        err_infos.append(\"缺少段落分隔符'～～'\")\n    else:\n        paragraphs = content.split(\"～～\")\n        if len(paragraphs) != 2:\n            err_infos.append(f\"段落数量错误，应为2个段落，实际为{len(paragraphs)}个\")\n        else:\n            first_para = paragraphs[0].strip()\n            second_para = paragraphs[1].strip()\n            \n            # 检查第一段句子数量\n            sentences = re.split(r'[。？！]', first_para)\n            sentences = [s.strip() for s in sentences if s.strip()]\n            if len(sentences) != 5:\n                err_infos.append(f\"第一段应为5个句子，实际为{len(sentences)}个\")\n            \n            # 检查句子长度和第三句结尾\n            for i, sent in enumerate(sentences[:5]):  # 只检查前5句\n                # 汉字数量统计\n                hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', sent))\n                if hanzi_count < 15:\n                    err_infos.append(f\"第{i+1}句只有{hanzi_count}个汉字，不足15个\")\n                \n                # 第三句结尾检查\n                if i == 2:  # 第三句\n                    if not sent.endswith(\"值得期待\"):\n                        err_infos.append(\"第三句未以'值得期待'结尾\")\n    \n    # 检查占位符\n    placeholders = [\"&应用1&\", \"&应用2&\", \"&应用3&\"]\n    for ph in placeholders:\n        if ph not in content:\n            err_infos.append(f\"缺少占位符'{ph}'\")\n    \n    # 返回验证结果\n    if not err_infos:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}"}
{"prompt": "请撰写一篇描述你观察到的城市交通状况的文章。文章内容不能出现中文逗号。文章只能由四个段落（不要出现标题）组成，每个段落之间用“～～”符号分隔。在第二个段落中，“车辆”一词务必至少出现2次，“行人”一词必须恰好出现3次。在第三个段落中，必须恰好由六个句子（用中文句号或问号或感叹号分隔）组成。文章必须以“改善交通环境是我们共同的责任。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答未以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答未以【答案结束】结尾\")\n    \n    # 提取实际回答内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查中文逗号\n    if \"，\" in content:\n        err_infos.append(\"文章内容包含中文逗号\")\n    \n    # 检查段落分隔\n    paragraphs = [p.strip() for p in re.split(r'～～', content) if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误，应为4段实际{len(paragraphs)}段\")\n    \n    # 检查第二段落\n    if len(paragraphs) >= 2:\n        para2 = paragraphs[1]\n        if para2.count(\"车辆\") < 2:\n            err_infos.append(\"第二段落中'车辆'出现次数少于2次\")\n        if para2.count(\"行人\") != 3:\n            err_infos.append(f\"第二段落中'行人'出现次数不为3次（实际{para2.count('行人')}次）\")\n    \n    # 检查第三段落\n    if len(paragraphs) >= 3:\n        para3 = paragraphs[2]\n        sentences = [s.strip() for s in re.split(r'[。？！]', para3) if s.strip()]\n        if len(sentences) != 6:\n            err_infos.append(f\"第三段落句子数量不为6句（实际{len(sentences)}句）\")\n    \n    # 检查结尾\n    if not content.endswith(\"改善交通环境是我们共同的责任。\"):\n        err_infos.append(\"文章未以指定句子结尾\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“城市交通与现代科技”的文章，文章必须包含“智能化”和“绿色出行”这两个词语。请确保文章由4个段落（不要出现标题）组成，每个段落之间用'～～'符号分隔。其中第2段的第36个汉字必须是“路”字。文章恰好由15个句子（用中文句号或问号或感叹号分隔）组成，其中第9个句子的第5个汉字必须是“速”字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from typing import List, Tuple\n    \n    # 定义原始指令要求字符串\n    instruction_str = (\n        \"请撰写一篇关于“城市交通与现代科技”的文章，文章必须包含“智能化”和“绿色出行”这两个词语。请确保文章由4个段落（不要出现标题）组成，每个段落之间用'～～'符号分隔。其中第2段的第36个汉字必须是“路”字。文章恰好由15个句子（用中文句号或问号或感叹号分隔）组成，其中第9个句子的第5个汉字必须是“速”字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\"\n    )\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 1. 检查响应结构标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取答案主体内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 2. 检查指令重复部分\n    if instruction_str not in content:\n        err_infos.append(\"指令重复不完整或不准确\")\n    else:\n        # 定位答案部分（指令重复后的内容）\n        answers_part = content.split(instruction_str, 1)[1].strip()\n        \n        # 3. 检查答案分隔符\n        answers = [ans.strip() for ans in answers_part.split(\"@@@@@@\") if ans.strip()]\n        if len(answers) != 2:\n            err_infos.append(f\"答案数量错误: 期望2个，实际{len(answers)}个\")\n        else:\n            # 验证每个答案\n            for i, answer in enumerate(answers, 1):\n                # 4. 检查段落分隔和数量\n                paragraphs = [p.strip() for p in answer.split(\"～～\") if p.strip()]\n                if len(paragraphs) != 4:\n                    err_infos.append(f\"答案{i}段落数量错误: 期望4段，实际{len(paragraphs)}段\")\n                else:\n                    # 5. 检查第2段第36个汉字\n                    if len(paragraphs[1]) >= 36:\n                        if paragraphs[1][35] != \"路\":  # 索引35是第36个字符\n                            err_infos.append(f\"答案{i}第2段第36字错误: 期望'路'，实际'{paragraphs[1][35]}'\")\n                    else:\n                        err_infos.append(f\"答案{i}第2段长度不足36字\")\n                \n                # 6. 检查句子数量\n                sentences = [s.strip() for s in re.split(r'[。？！]', answer) if s.strip()]\n                if len(sentences) != 15:\n                    err_infos.append(f\"答案{i}句子数量错误: 期望15句，实际{len(sentences)}句\")\n                else:\n                    # 7. 检查第9句第5个汉字\n                    if len(sentences[8]) >= 5:\n                        if sentences[8][4] != \"速\":  # 索引4是第5个字符\n                            err_infos.append(f\"答案{i}第9句第5字错误: 期望'速'，实际'{sentences[8][4]}'\")\n                    else:\n                        err_infos.append(f\"答案{i}第9句长度不足5字\")\n                \n                # 8. 检查关键词\n                if \"智能化\" not in answer:\n                    err_infos.append(f\"答案{i}缺少关键词'智能化'\")\n                if \"绿色出行\" not in answer:\n                    err_infos.append(f\"答案{i}缺少关键词'绿色出行'\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一个关于海洋探险的短文，要求在短文中“波浪”一词至少出现五次，“航行”一词必须只出现三次，而“深海”一词最多出现两次。此外，每个句子（用中文句号或问号或感叹号分隔）的最后一个字需为“者”。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n\n    # 提取答案部分\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    start_idx = response.find(start_tag)\n    end_idx = response.find(end_tag)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        return {\"check_code\": False, \"reason\": \"未找到答案标记\"}\n    \n    answer = response[start_idx + len(start_tag):end_idx].strip()\n    \n    # 验证关键词数量\n    wave_count = len(re.findall(r'波浪', answer))\n    sail_count = len(re.findall(r'航行', answer))\n    deepsea_count = len(re.findall(r'深海', answer))\n    \n    # 验证句子结尾\n    sentences = re.split(r'[。！？]', answer)\n    valid_sentences = [s.strip() for s in sentences if s.strip()]\n    invalid_ends = []\n    \n    for i, sent in enumerate(valid_sentences):\n        if not sent.endswith('者'):\n            invalid_ends.append(f\"第{i+1}句结尾字不是'者'\")\n    \n    # 检查所有条件\n    errors = []\n    if wave_count < 5:\n        errors.append(f\"'波浪'出现{wave_count}次(要求≥5次)\")\n    if sail_count != 3:\n        errors.append(f\"'航行'出现{sail_count}次(要求=3次)\")\n    if deepsea_count > 2:\n        errors.append(f\"'深海'出现{deepsea_count}次(要求≤2次)\")\n    if invalid_ends:\n        errors.append(f\"句子结尾错误: {'; '.join(invalid_ends)}\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "在未来的交通系统中，自动驾驶汽车将会扮演越来越重要的角色。自动驾驶技术的进步，不仅能够提高交通效率，还能够减少交通事故。然而，自动驾驶汽车的广泛应用也带来了许多新的问题和挑战，比如数据安全、法律责任和道德伦理问题。随着技术的不断发展，解决这些问题也成为了社会关注的焦点。\n\n请写一篇关于未来自动驾驶汽车的文章，描述其可能带来的优势和潜在的问题，要求第二个句子（用中文句号或问号或感叹号分隔）以‘这是一个巨大的进步’结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    err_infos = []\n    \n    # 检查标记完整性\n    if start_marker not in response or end_marker not in response:\n        err_infos.append(\"缺少开始/结束标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取实际内容\n    content = response.split(start_marker)[-1].split(end_marker)[0].strip()\n    \n    # 检查内容非空\n    if not content:\n        err_infos.append(\"实际内容为空\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 分割句子并过滤空句\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    \n    # 检查句子数量\n    if len(sentences) < 2:\n        err_infos.append(\"句子数量不足2个\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 检查第二句结尾\n    if not sentences[1].endswith(\"这是一个巨大的进步\"):\n        # 尝试去除尾部标点后再检查\n        clean_sentence = re.sub(r'[。？！\\s]+$', '', sentences[1])\n        if clean_sentence != \"这是一个巨大的进步\":\n            err_infos.append(f\"第二句不以指定结尾，实际为：'{sentences[1][-10:]}'\")\n    \n    # 检查主题覆盖\n    required_keywords = {\n        \"优势\": [\"优势\", \"提高\", \"减少\", \"效率\", \"安全\"],\n        \"问题\": [\"问题\", \"挑战\", \"安全\", \"法律\", \"道德\", \"隐私\"]\n    }\n    for theme, keywords in required_keywords.items():\n        if not any(kw in content for kw in keywords):\n            err_infos.append(f\"未提及{theme}相关内容\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于城市夜生活的短文，内容长度至少为300个汉字，但不超过500个汉字。文章必须以“城市的夜晚”这几个字开头。文章应包含四个段落（不要出现标题），每个段落之间用'～～'符号分隔。在第二个段落中，“灯光”这个词至少出现两次。请首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 定义指令要求字符串\n    instruction_str = \"请撰写一篇关于城市夜生活的短文，内容长度至少为300个汉字，但不超过500个汉字。文章必须以“城市的夜晚”这几个字开头。文章应包含四个段落（不要出现标题），每个段落之间用'～～'符号分隔。在第二个段落中，“灯光”这个词至少出现两次。\"\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查【答案开始】和【答案结束】标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        err_infos.append(\"答案标记缺失或位置错误\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容\n    answer_content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 检查是否完整重复了指令要求\n    if not answer_content.startswith(instruction_str):\n        err_infos.append(\"未完整重复指令要求\")\n    \n    # 提取文章内容（指令之后的部分）\n    article_start = len(instruction_str)\n    article_content = answer_content[article_start:].lstrip()\n    \n    # 检查文章开头\n    if not article_content.startswith(\"城市的夜晚\"):\n        err_infos.append(\"文章未以'城市的夜晚'开头\")\n    \n    # 统计汉字数量\n    hanzi_chars = re.findall(r'[一-龥]', article_content)\n    hanzi_count = len(hanzi_chars)\n    if hanzi_count < 300:\n        err_infos.append(f\"文章汉字数量不足300字（实际{hanzi_count}字）\")\n    if hanzi_count > 500:\n        err_infos.append(f\"文章汉字数量超过500字（实际{hanzi_count}字）\")\n    \n    # 检查段落分隔\n    segments = article_content.split('～～')\n    if len(segments) != 4:\n        err_infos.append(f\"段落数量错误（应为4段，实际{len(segments)}段）\")\n    else:\n        # 检查第二段\"灯光\"出现次数\n        light_count = segments[1].count('灯光')\n        if light_count < 2:\n            err_infos.append(f\"第二段'灯光'出现次数不足（应为≥2次，实际{light_count}次）\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请将下列文本中的前五句话划分为第一个部分，将第六句话至第八句话划分为第二个部分，将第九句话至第十二句话划分为第三个部分，将第十三句话至第十五句话划分为第四个部分，剩下的句子划分为第五个部分。每个部分之间用六个星号分隔“******”。再将最后一部分最后一句话中的最后十个字删掉。然后在第三句话、第五句话、第八句话以及第十三句话的开头都加上“我爱喝茶”这四个字。直接返回修改后的文本，不要出现其他多余的内容。\n\n在现代生活中，绿茶逐渐成为人们生活中不可或缺的一部分，尤其是在东亚文化中，它被视为一种健康、宁静、和谐的象征。绿茶文化的起源可以追溯到几千年前的中国，自唐代起，饮茶便成为士人和文人墨客的一种生活雅趣。中国的绿茶文化不仅包含饮茶的方式，还蕴含着一种与自然和谐相处的生活哲学。无论是在自家庭院中泡上一壶绿茶，还是在茶馆与人分享，茶饮过程都是一种放松身心的仪式。中国的茶道崇尚“和、敬、清、寂”四字真言，表达了人与自然的和谐相处之道。茶的清香与回甘，让人们在品味中得到宁静，也让心灵得到休憩，体现出中国人对平和生活态度的追求。在日本，绿茶文化也有其独特的风格，尤以抹茶茶道著称。日本的茶道，不仅仅是饮茶，更是通过繁复而细致的礼仪体现礼节与尊重。日本人认为，茶道的核心在于“和敬清寂”，在一席茶事中，茶师与客人彼此之间通过茶道礼节互相尊重。这种茶道文化不仅仅停留在饮茶的层面，更是心灵的洗礼。茶道注重安静和内心的清净，人们通过对每一个步骤的专注，从点茶、赏茶、品茶的过程里体会到当下的平和与满足。茶道的精神在于让人放下心中的喧嚣，通过专注于每一个动作，让自己回归简单和自然之中。这一独特的文化体验成为日本生活方式的一部分，融入了尊重自然、珍视瞬间的生活哲学。在韩国，绿茶同样是家庭生活与社交文化的重要组成部分。韩国的绿茶文化注重自然的和谐和家庭的凝聚力。韩国人在迎接客人时常以一杯绿茶表达真诚与尊重，绿茶成为连接人心的重要媒介。韩国的茶道也提倡“清、敬、和、乐”，人们通过品茶交流彼此的情感和故事，在饮茶中体现家庭的温暖和纯洁。绿茶被用来接待宾客或家人团聚之时的共饮，象征着人与人之间的真挚情谊。茶的清淡滋味让人放松身心，也为亲友之间提供了一个轻松交流的平台，这种温馨而随性的茶文化体现出韩国人对质朴自然、真诚情感的追求。如今，随着全球文化的交流与发展，绿茶也逐渐融入到其他国家的日常生活中。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 原始文本\n    original_text = \"在现代生活中，绿茶逐渐成为人们生活中不可或缺的一部分，尤其是在东亚文化中，它被视为一种健康、宁静、和谐的象征。绿茶文化的起源可以追溯到几千年前的中国，自唐代起，饮茶便成为士人和文人墨客的一种生活雅趣。中国的绿茶文化不仅包含饮茶的方式，还蕴含着一种与自然和谐相处的生活哲学。无论是在自家庭院中泡上一壶绿茶，还是在茶馆与人分享，茶饮过程都是一种放松身心的仪式。中国的茶道崇尚“和、敬、清、寂”四字真言，表达了人与自然的和谐相处之道。茶的清香与回甘，让人们在品味中得到宁静，也让心灵得到休憩，体现出中国人对平和生活态度的追求。在日本，绿茶文化也有其独特的风格，尤以抹茶茶道著称。日本的茶道，不仅仅是饮茶，更是通过繁复而细致的礼仪体现礼节与尊重。日本人认为，茶道的核心在于“和敬清寂”，在一席茶事中，茶师与客人彼此之间通过茶道礼节互相尊重。这种茶道文化不仅仅停留在饮茶的层面，更是心灵的洗礼。茶道注重安静和内心的清净，人们通过对每一个步骤的专注，从点茶、赏茶、品茶的过程里体会到当下的平和与满足。茶道的精神在于让人放下心中的喧嚣，通过专注于每一个动作，让自己回归简单和自然之中。这一独特的文化体验成为日本生活方式的一部分，融入了尊重自然、珍视瞬间的生活哲学。在韩国，绿茶同样是家庭生活与社交文化的重要组成部分。韩国的绿茶文化注重自然的和谐和家庭的凝聚力。韩国人在迎接客人时常以一杯绿茶表达真诚与尊重，绿茶成为连接人心的重要媒介。韩国的茶道也提倡“清、敬、和、乐”，人们通过品茶交流彼此的情感和故事，在饮茶中体现家庭的温暖和纯洁。绿茶被用来接待宾客或家人团聚之时的共饮，象征着人与人之间的真挚情谊。茶的清淡滋味让人放松身心，也为亲友之间提供了一个轻松交流的平台，这种温馨而随性的茶文化体现出韩国人对质朴自然、真诚情感的追求。如今，随着全球文化的交流与发展，绿茶也逐渐融入到其他国家的日常生活中。\"\n    \n    # 生成正确结果\n    def generate_correct_response(text):\n        sentences = [s for s in re.split(r'(?<=[。])', text) if s]\n        # 添加前缀\n        for idx in [2, 4, 7, 12]:\n            if idx < len(sentences):\n                sentences[idx] = \"我爱喝茶\" + sentences[idx]\n        # 划分部分\n        part1 = sentences[0:5]\n        part2 = sentences[5:8]\n        part3 = sentences[8:12]\n        part4 = sentences[12:15]\n        part5 = sentences[15:]\n        # 处理第五部分最后一句\n        if part5:\n            last_sentence = part5[-1]\n            if len(last_sentence) > 10:\n                last_sentence = last_sentence[:-10]\n            part5[-1] = last_sentence\n        # 组合结果\n        return \"******\".join([\n            \"\".join(part1),\n            \"\".join(part2),\n            \"\".join(part3),\n            \"\".join(part4),\n            \"\".join(part5)\n        ])\n    \n    # 正确结果\n    correct_text = generate_correct_response(original_text)\n    expected_response = f\"【答案开始】{correct_text}【答案结束】\"\n    \n    # 验证响应\n    if response != expected_response:\n        return {\n            \"check_code\": False,\n            \"reason\": f\"响应内容与预期不符，请检查格式修改和内容处理\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请描述一个繁忙的都市早晨场景，要求在描述中“车流”、“喧嚣”和“忙碌”三个词语每个词语至少出现三次。撰写一篇关于城市交通管理的文章，文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。请确保文章每个句子（用中文句号或问号或感叹号分隔）至少15个字。第五个句子（用中文句号或问号或感叹号分隔）以‘这是一种挑战’结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息列表\n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"答案格式错误，缺少开始或结束标记\"}\n    \n    # 提取答案内容\n    try:\n        content = response.split(\"【答案开始】\", 1)[1].split(\"【答案结束】\", 1)[0].strip()\n    except:\n        return {\"check_code\": False, \"reason\": \"答案内容提取失败\"}\n    \n    # 检查关键词出现次数\n    keywords = {\"车流\": 0, \"喧嚣\": 0, \"忙碌\": 0}\n    for word in keywords:\n        count = content.count(word)\n        keywords[word] = count\n        if count < 3:\n            err_infos.append(f\"词语'{word}'出现次数不足3次（实际：{count}次）\")\n    \n    # 检查段落结构\n    paragraphs = [p.strip() for p in re.split(r'\\n{2,}', content) if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误（要求4段，实际：{len(paragraphs)}段）\")\n    \n    # 检查第三段句子数量\n    if len(paragraphs) >= 3:\n        para3 = paragraphs[2]\n        # 使用中文标点分句\n        sentences = re.split(r'[。？！]', para3)\n        # 移除空字符串\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            err_infos.append(f\"第三段句子数量错误（要求6句，实际：{len(sentences)}句）\")\n    else:\n        err_infos.append(\"无法检查第三段：段落数量不足\")\n    \n    # 检查所有句子长度\n    all_sentences = []\n    for para in paragraphs:\n        # 使用中文标点分句\n        sentences_in_para = re.split(r'[。？！]', para)\n        all_sentences.extend([s.strip() for s in sentences_in_para if s.strip()])\n    \n    short_sentences = []\n    for i, sent in enumerate(all_sentences, 1):\n        # 计算实际字符数（去除空格）\n        char_count = len(re.sub(r'\\s', '', sent))\n        if char_count < 15:\n            short_sentences.append(f\"第{i}句（{sent[:10]}...）\")\n    \n    if short_sentences:\n        err_infos.append(f\"{len(short_sentences)}个句子少于15字: {', '.join(short_sentences)}\")\n    \n    # 检查第五个句子结尾\n    if len(all_sentences) >= 5:\n        fifth_sentence = all_sentences[4]\n        if not fifth_sentence.endswith('这是一种挑战'):\n            err_infos.append(f\"第五句未以'这是一种挑战'结尾（实际结尾：'{fifth_sentence[-6:]}'）\")\n    else:\n        err_infos.append(f\"总句子数不足5句（实际：{len(all_sentences)}句）\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"；\".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于如何在城市中进行垂直农场种植的详细指南，指南中需要包含“光照控制”和“水循环系统”这两个词语。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查是否包含必要的标记\n    if \"【答案开始】\" not in response:\n        return {\"check_code\": False, \"reason\": \"回答缺少【答案开始】标记\"}\n    if \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"回答缺少【答案结束】标记\"}\n    \n    # 提取标记之间的内容\n    pattern = re.compile(r'【答案开始】\\s*(.*?)\\s*【答案结束】', re.DOTALL)\n    match = pattern.search(response)\n    \n    if not match:\n        return {\"check_code\": False, \"reason\": \"标记格式不正确或标记间无内容\"}\n    \n    content = match.group(1).strip()\n    \n    # 检查是否包含必要关键词\n    missing_keywords = []\n    if \"光照控制\" not in content:\n        missing_keywords.append(\"光照控制\")\n    if \"水循环系统\" not in content:\n        missing_keywords.append(\"水循环系统\")\n    \n    if missing_keywords:\n        return {\"check_code\": False, \"reason\": f\"指南中缺少'{', '.join(missing_keywords)}'\"}\n    \n    # 检查是否有多余内容\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        return {\"check_code\": True, \"reason\": \"\"}\n    \n    return {\"check_code\": False, \"reason\": \"标记外存在额外内容\"}"}
{"prompt": "请撰写一篇关于“现代城市中的绿色空间”的文章。请在文章中避免使用“生态”、“自然”和“环境”这三个词。要求在文章中至少出现五次“公园”，并且“休闲”一词必须刚好出现三次。同时，请确保文章恰好由9个句子（用中文句号或问号或感叹号分隔）组成，其中第6个句子不超过8个汉字。请确保文章标题用$()$标记，如$(xxx)$。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 初始化检查结果\n    check_code = True\n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        check_code = False\n        err_infos.append(\"未包含答案标记\")\n        return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取实际答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    # 检查标题格式\n    title_match = re.search(r'\\$\\((.*?)\\)\\$', content)\n    if not title_match:\n        check_code = False\n        err_infos.append(\"标题格式错误\")\n    else:\n        # 移除标题标记保留标题文字\n        title_text = title_match.group(1)\n        content = content.replace(title_match.group(0), title_text, 1)\n    \n    # 检查禁止词\n    forbidden_words = [\"生态\", \"自然\", \"环境\"]\n    for word in forbidden_words:\n        if word in content:\n            check_code = False\n            err_infos.append(f\"包含禁止词'{word}'\")\n    \n    # 统计关键词出现次数\n    park_count = content.count(\"公园\")\n    leisure_count = content.count(\"休闲\")\n    \n    if park_count < 5:\n        check_code = False\n        err_infos.append(f\"'公园'出现次数不足（{park_count}次）\")\n    if leisure_count != 3:\n        check_code = False\n        err_infos.append(f\"'休闲'出现次数应为3次（实际{leisure_count}次）\")\n    \n    # 分割句子并检查数量\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    if len(sentences) != 9:\n        check_code = False\n        err_infos.append(f\"句子数量应为9句（实际{len(sentences)}句）\")\n    else:\n        # 检查第6句长度\n        sixth_sentence = sentences[5]\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fff]', sixth_sentence)\n        if len(chinese_chars) > 8:\n            check_code = False\n            err_infos.append(f\"第6句超过8个汉字（实际{len(chinese_chars)}字）\")\n    \n    return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos) if err_infos else \"\"}"}
{"prompt": "将下列文本中的“有”字全部加上“~~”，格式应该为“~~有~~”；最后，将上一步修改过的文本中的后三个汉字按相同的先后顺序放到文本最前面。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n分布式系统是一种由多个计算机节点组成的系统，具有高度的可扩展性和容错性。请解释分布式系统在现代互联网应用中的重要性，并举例说明其在某个具体行业中的应用及优势。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 定义原始文本\n    original_text = \"分布式系统是一种由多个计算机节点组成的系统，具有高度的可扩展性和容错性。请解释分布式系统在现代互联网应用中的重要性，并举例说明其在某个具体行业中的应用及优势。\"\n    \n    # 验证响应结构\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response or end_marker not in response:\n        return {\"check_code\": False, \"reason\": \"响应缺少必要的标记\"}\n    \n    # 提取答案内容\n    pattern = re.escape(start_marker) + r\"(.*?)\" + re.escape(end_marker)\n    match = re.search(pattern, response, re.DOTALL)\n    if not match:\n        return {\"check_code\": False, \"reason\": \"无法提取答案内容\"}\n    \n    answer = match.group(1).strip()\n    \n    # 验证步骤1：所有\"有\"字替换为\"~~有~~\"\n    expected_step1 = original_text.replace(\"有\", \"~~有~~\")\n    if \"~~有~~\" not in answer or \"有\" in answer:\n        return {\"check_code\": False, \"reason\": \"未正确替换'有'字\"}\n    \n    # 验证步骤2：后三字移到开头\n    expected_result = expected_step1[-3:] + expected_step1[:-3]\n    if answer != expected_result:\n        return {\"check_code\": False, \"reason\": \"后三字移动不正确\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在现代社会，公共交通已经成为城市居民日常生活中不可或缺的一部分。地铁作为一种高效、环保的交通方式，极大地缓解了城市交通压力。然而，地铁系统的安全性和管理仍然是一个复杂的问题，特别是在高峰时段，如何确保乘客的安全、舒适以及良好的乘车体验，需要综合考虑多个方面。地铁的安全管理不仅仅局限于车厢内部，还包括站台和通道的设计、设施的维护、紧急事件的处理以及乘客的行为引导等。这些因素都要求交通管理部门不断创新和优化管理策略，以应对不断增长的乘客需求和潜在的安全隐患。\n\n请撰写一篇只有10个句子（用中文句号或问号或感叹号分隔）的文章，探讨地铁系统在高峰时段如何有效管理乘客流量，以提高乘客的安全性和舒适度。文章需涵盖以下几个方面：地铁站台设计的改善、乘客引导措施、紧急事件预案以及与乘客的沟通策略。通过具体的案例和数据，分析当前地铁管理中存在的问题，并提出具有可行性的解决方案。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查首尾标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少首尾标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    content = response[5:-5]  # 移除首尾标记\n    \n    # 检查句子数量\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 10:\n        err_infos.append(f\"需要10个句子，实际检测到{len(sentences)}个\")\n    \n    # 检查必备内容维度\n    required_aspects = {\n        \"地铁站台设计的改善\": [\"站台\", \"设计\", \"改善\"],\n        \"乘客引导措施\": [\"引导\", \"分流\", \"限流\"],\n        \"紧急事件预案\": [\"紧急\", \"预案\", \"疏散\"],\n        \"与乘客的沟通策略\": [\"沟通\", \"广播\", \"信息\"]\n    }\n    content_lower = content.lower()\n    for aspect, keywords in required_aspects.items():\n        if not any(kw in content_lower for kw in keywords):\n            err_infos.append(f\"缺少内容维度：{aspect}\")\n    \n    # 检查多余内容\n    if re.search(r'解析|说明|要求|如下|总结|结论', content):\n        err_infos.append(\"包含多余解释性内容\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos if err_infos else \"所有条件均满足\"\n    }"}
{"prompt": "请撰写一篇关于“城市交通与环保”的文章，文章中应包含“绿色出行”这个词。请确保文章只出现3个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第2段的第5个汉字必须是“清”字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 定义原始指令文本\n    instruction_str = \"请撰写一篇关于“城市交通与环保”的文章，文章中应包含“绿色出行”这个词。请确保文章只出现3个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第2段的第5个汉字必须是“清”字。\"\n    \n    # 1. 检查响应标记\n    if \"【答案开始】\" not in response:\n        err_infos.append(\"缺少【答案开始】标记\")\n    if \"【答案结束】\" not in response:\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or end_idx <= start_idx:\n        if not err_infos:\n            err_infos.append(\"答案标记位置错误\")\n    else:\n        answer_content = response[start_idx + len(start_marker):end_idx].strip()\n        \n        # 2. 检查指令重复\n        if not answer_content.startswith(instruction_str):\n            err_infos.append(\"未正确重复指令要求\")\n        \n        # 提取文章部分\n        article_part = answer_content[len(instruction_str):].strip()\n        \n        # 3. 检查段落分隔符\n        segments = article_part.split('～～')\n        if len(segments) != 3:\n            err_infos.append(f\"段落数量应为3，实际为{len(segments)}\")\n        else:\n            # 4. 检查第二段第五个汉字\n            if len(segments[1].strip()) < 5:\n                err_infos.append(\"第二段长度不足5个汉字\")\n            else:\n                second_para_chars = re.findall(r'[一-龥]', segments[1])\n                if len(second_para_chars) < 5:\n                    err_infos.append(\"第二段汉字数量不足5个\")\n                elif second_para_chars[4] != '清':\n                    err_infos.append(f\"第二段第五个汉字应为'清'，实际为'{second_para_chars[4]}'\")\n        \n        # 5. 检查关键词\n        if \"绿色出行\" not in article_part:\n            err_infos.append(\"缺少关键词'绿色出行'\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请你写一篇关于“如何提升工作效率并减少拖延”的建议文章，要求遵循以下规则：  \n\n1. 回复中禁止使用“懒惰”和“压力”这两个词。\n2. 回复必须以“高效工作的关键在于”这几个字开头。  \n3. 在答案中列出三个主要建议，并使用“&建议1&”、“&建议2&”和“&建议3&”作为主要建议的占位符。  \n4. 模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查响应是否包含必要的标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"未找到答案开始/结束标记\"}\n    \n    # 提取答案内容\n    content = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n    if not content:\n        return {\"check_code\": False, \"reason\": \"答案格式错误\"}\n    content = content.group(1).strip()\n    \n    # 检查分隔符\n    if \"@@@@@@\" not in content:\n        return {\"check_code\": False, \"reason\": \"缺少答案分隔符(@@@@@@)\"}\n    \n    # 分割两个答案\n    answers = [ans.strip() for ans in content.split(\"@@@@@@\") if ans.strip()]\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案数量错误: 应为2个, 实际{len(answers)}个\"}\n    \n    # 检查每个答案\n    for idx, ans in enumerate(answers, 1):\n        # 检查开头\n        if not ans.startswith(\"高效工作的关键在于\"):\n            return {\"check_code\": False, \"reason\": f\"答案{idx}开头不符合要求\"}\n        \n        # 检查禁止词\n        for word in [\"懒惰\", \"压力\"]:\n            if word in ans:\n                return {\"check_code\": False, \"reason\": f\"答案{idx}包含禁用词: {word}\"}\n        \n        # 检查建议占位符\n        for placeholder in [\"&建议1&\", \"&建议2&\", \"&建议3&\"]:\n            if placeholder not in ans:\n                return {\"check_code\": False, \"reason\": f\"答案{idx}缺少占位符: {placeholder}\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在现代社会中，健康饮食已成为人们日益关注的话题。随着生活节奏的加快和饮食习惯的变化，许多人面临着营养不均衡的问题。健康饮食不仅关系到个人的身体健康，还影响到整体生活质量。近年来，越来越多的人开始意识到饮食对身体的影响，并尝试通过调整饮食来改善健康。然而，关于如何有效地进行健康饮食，人们常常存在误区，比如过分依赖某种健康食品或忽视多样化的饮食结构。\n\n请撰写一篇关于健康饮食在现代生活中的重要性的文章，其中需探讨如何通过日常饮食习惯的调整来实现更好的健康状态。请注意，文章中禁止使用“瘦身”、“减肥”、“卡路里”这几个词。文章的字数要求是至少200个汉字，但不超过300个汉字。请确保文章标题用$()$标记，如$(xxxxx)$。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        errors.append(\"答案未以【答案开始】开头或【答案结束】结尾\")\n    \n    # 提取答案内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and \"【答案结束】\" in response:\n        content = response[len(\"【答案开始】\"):response.index(\"【答案结束】\")]\n    \n    # 检查标题格式\n    title_match = re.search(r'\\$\\((.+?)\\)\\$', content)\n    if not title_match:\n        errors.append(\"标题未用$()$标记\")\n    \n    # 检查禁止词\n    forbidden_words = [\"瘦身\", \"减肥\", \"卡路里\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        errors.append(f\"包含禁止词：{','.join(found_words)}\")\n    \n    # 统计中文字数\n    chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', content)\n    chinese_count = len(chinese_chars)\n    if chinese_count < 200:\n        errors.append(f\"字数不足200字（当前{chinese_count}字）\")\n    elif chinese_count > 300:\n        errors.append(f\"字数超过300字（当前{chinese_count}字）\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "首先，将下列文本的标点符号全部删除；然后，再将上一步修改过的文本中的文字按照每8个汉字组成一个部分，每个部分之间用“%%”分隔，如果分隔到最后汉字数量不够，将剩下的汉字组成一个部分即可；最后，将上一步修改过的文本中的第4个汉字和第8个汉字互换位置。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n地壳运动是地质学研究的重要领域之一，涉及板块构造、火山活动和地震等现象。请描述地壳运动对自然环境和人类社会的潜在影响，并讨论如何通过科学手段减少其带来的风险。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证回答格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"回答格式错误，缺少开始/结束标记\"}\n    \n    # 提取实际回答内容\n    actual = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    # 原始文本处理\n    text = \"地壳运动是地质学研究的重要领域之一，涉及板块构造、火山活动和地震等现象。请描述地壳运动对自然环境和人类社会的潜在影响，并讨论如何通过科学手段减少其带来的风险。\"\n    \n    # 步骤1: 删除所有标点符号\n    cleaned = re.sub(r'[^\\u4e00-\\u9fa5]', '', text)\n    \n    # 步骤2: 每8个汉字分组并用%%连接\n    parts = [cleaned[i:i+8] for i in range(0, len(cleaned), 8)]\n    grouped = '%%'.join(parts)\n    \n    # 步骤3: 交换每组第4和第8个汉字\n    final_chars = []\n    for part in grouped.split('%%'):\n        if len(part) == 8:\n            lst = list(part)\n            lst[3], lst[7] = lst[7], lst[3]  # 交换位置\n            final_chars.append(''.join(lst))\n        else:\n            final_chars.append(part)\n    expected = '%%'.join(final_chars)\n    \n    # 验证结果\n    if actual == expected:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\n            \"check_code\": False,\n            \"reason\": f\"回答内容不匹配。预期: [{expected}]，实际: [{actual}]\"\n        }"}
{"prompt": "请撰写一篇关于“城市公园与社区活动”的文章。要求文章必须只出现“绿色”、“交流”和“娱乐”这三个词语，其中“绿色”至少出现3次，“交流”恰好出现2次，而“娱乐”至多出现1次。同时，请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。文章的每个句子（用中文句号或问号或感叹号分隔）必须恰好15个汉字。并且要求第四个句子（用中文句号或问号或感叹号分隔）以“增进邻里关系”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1:\n        return {\"check_code\": False, \"reason\": \"未找到答案标记\"}\n    \n    content = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 验证段落分隔\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量错误（{len(paragraphs)}个）\"}\n    \n    # 验证句子结构\n    all_sentences = []\n    for para in paragraphs:\n        sentences = re.split(r'([。？！])', para)\n        sentences = [s.strip() for s in sentences if s.strip() and s not in ['。', '？', '！']]\n        all_sentences.extend(sentences)\n    \n    # 检查句子数量\n    if len(all_sentences) < 4:\n        return {\"check_code\": False, \"reason\": \"句子数量不足\"}\n    \n    # 检查每个句子长度\n    for i, sent in enumerate(all_sentences):\n        if len(sent) != 15:\n            return {\"check_code\": False, \"reason\": f\"第{i+1}句长度错误（{len(sent)}字）\"}\n    \n    # 检查第四句结尾\n    if not all_sentences[3].endswith(\"增进邻里关系\"):\n        return {\"check_code\": False, \"reason\": f\"第四句结尾错误：'{all_sentences[3][-5:]}'\"}\n    \n    # 验证词汇限制\n    full_text = ''.join(paragraphs)\n    allowed_words = ['绿色', '交流', '娱乐']\n    hanzi_only = re.findall(r'[\\u4e00-\\u9fa5]', full_text)\n    all_words = re.findall(r'绿色|交流|娱乐', full_text)\n    other_words = re.findall(r'[\\u4e00-\\u9fa5]{2}', ''.join(hanzi_only))\n    \n    # 检查是否存在非法词汇\n    if set(other_words) - set(allowed_words):\n        illegal = set(other_words) - set(allowed_words)\n        return {\"check_code\": False, \"reason\": f\"包含非法词汇：{', '.join(illegal)}\"}\n    \n    # 检查词汇频率\n    word_counts = {word: all_words.count(word) for word in allowed_words}\n    if word_counts['绿色'] < 3:\n        return {\"check_code\": False, \"reason\": f\"绿色出现次数不足（{word_counts['绿色']}次）\"}\n    if word_counts['交流'] != 2:\n        return {\"check_code\": False, \"reason\": f\"交流出现次数错误（{word_counts['交流']}次）\"}\n    if word_counts['娱乐'] > 1:\n        return {\"check_code\": False, \"reason\": f\"娱乐出现次数过多（{word_counts['娱乐']}次）\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在当前数字化时代，在线教育已经成为一种越来越普及的学习方式。尤其是在全球疫情的影响下，许多教育机构转向在线课程，学生们也逐渐适应了这种远程学习模式。在线教育不仅提供了灵活的学习时间安排，还打破了地理限制，使得学生可以接触到世界各地的优秀教学资源。然而，在线教育也面临着一些挑战，如缺乏面对面的互动、技术问题和自律性要求等。因此，如何在在线教育中保持学生的积极性和参与度成为了一个重要的话题。\n\n请撰写一篇关于在线教育中提高学生参与度的方法的文章。要求文章包含三个段落，并在段落之间用'～～'符号分隔。确保第二个段落不含任何标点符号。此外，文章必须包含“互动”、“自律”和“技术”三个词语，每个词语至少出现两次。最后，文章应以“在线教育的未来将取决于我们如何应对这些挑战。”这句话结尾。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息列表\n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少结束标记【答案结束】\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 分割两个答案\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案数量错误，应为2个，实际分割出{len(answers)}个\"}\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        if not ans:\n            errors.append(f\"答案{idx}为空\")\n            continue\n        \n        # 检查段落分隔符\n        paragraphs = ans.split('～～')\n        if len(paragraphs) != 3:\n            errors.append(f\"答案{idx}段落数量错误（应为3段，实际{len(paragraphs)}段）\")\n            continue\n        \n        # 检查第二段不含标点\n        second_para = paragraphs[1].replace(' ', '').replace('\\n', '')\n        if re.search(r'[^\\w\\s]', second_para):  # \\w匹配字母数字，\\s匹配空白\n            errors.append(f\"答案{idx}第二段包含标点符号\")\n        \n        # 检查关键词出现次数\n        keywords = {\"互动\": 0, \"自律\": 0, \"技术\": 0}\n        for word in keywords:\n            count = ans.count(word)\n            if count < 2:\n                errors.append(f\"答案{idx}中'{word}'出现次数不足（需要≥2，实际{count}）\")\n            keywords[word] = count\n        \n        # 检查结尾句\n        if not ans.endswith(\"在线教育的未来将取决于我们如何应对这些挑战。\"):\n            errors.append(f\"答案{idx}结尾句错误\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于“如何高效组织团队活动”的文章。请确保文章恰好由15个句子（用中文句号或问号或感叹号分隔）组成。其中第9个句子的第3个汉字必须是“趣”字。此外，请确保第12个句子不得少于8个汉字，但不得超过30个汉字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查开头和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答未以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答未以【答案结束】结尾\")\n    \n    # 提取答案内容\n    content = response[6:-6] if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\") else response\n    \n    # 检查答案分隔符\n    parts = content.split(\"@@@@@@\")\n    if len(parts) != 2:\n        err_infos.append(f\"答案分隔符错误：需要2个答案，实际分割出{len(parts)}部分\")\n    \n    # 验证每个答案\n    for i, ans in enumerate(parts, 1):\n        # 分割句子\n        sentences = [s.strip() for s in re.split(r'[。？！]', ans) if s.strip()]\n        \n        # 检查句子数量\n        if len(sentences) != 15:\n            err_infos.append(f\"答案{i}包含{len(sentences)}个句子（需要15个）\")\n            continue\n        \n        # 检查第9句第3个汉字\n        if len(sentences[8]) < 3 or sentences[8][2] != \"趣\":\n            err_infos.append(f\"答案{i}第9句第3字错误：'{sentences[8][:3]}...'\")\n        \n        # 检查第12句长度\n        hanzi_count = len(re.findall(r'[一-龥]', sentences[11]))\n        if not (8 <= hanzi_count <= 30):\n            err_infos.append(f\"答案{i}第12句汉字数{hanzi_count}（需要8-30字）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请写一篇刚好由8个句子（用中文句号或问号或感叹号分隔）组成的文章，主题为如何有效管理时间，并以‘时间管理’这四个字开头。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    instruct = \"请写一篇刚好由8个句子（用中文句号或问号或感叹号分隔）组成的文章，主题为如何有效管理时间，并以‘时间管理’这四个字开头。\"\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或没有以'【答案结束】'结尾。\"\n        }\n    content = response[6:-6].strip()\n    if not content.startswith(instruct):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有一字不差地重复指令要求。\"\n        }\n    content = content[len(instruct):].strip()\n\n     # 正则表达式模式：匹配中文句号、问号、感叹号中的任意一个\n    pattern = r'[。？！]'\n\n    # 使用正则表达式分割文本\n    raw_sentences = re.split(pattern, content)\n\n    # 过滤分割结果中的空字符串（处理文本开头/结尾有标点或连续标点的情况）\n    sentences = [sentence.strip() for sentence in raw_sentences if sentence.strip()]\n    if len(sentences) != 8:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章不是由8个句子组成。\"\n        }\n    if not content.startswith(\"时间管理\"):\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章没有以'时间管理'开头。\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "生态保护是当前全球关注的热点话题之一。在人类活动的影响下，许多动植物物种面临灭绝的危险，生态环境也遭受严重破坏。环境保护不仅仅是为了维持地球上的生物多样性，更是为了保障人类自身的生存和发展。近年来，许多国家和地区都开始采取各种措施来保护生态环境，比如制定环保法律、推广绿色能源、建设生态保护区等。然而，仅仅依靠政府和组织的力量是远远不够的，每个人都需要为环境保护贡献自己的一份力量。\n\n请你写一篇关于“个人在生态保护中的作用”的文章，字数不少于700字，且不超过900字。在文章中，请包含以下词语：“生态”、“环境保护”、“生物多样性”和“绿色能源”。你可以结合实际生活中的具体事例，阐述个人在生态保护中可以采取的具体行动，以及这些行动对生态环境的积极影响。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查标记格式\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"开头缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"结尾缺少【答案结束】标记\")\n    \n    # 提取正文内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查字数要求\n    if content:\n        char_count = len(content)\n        if char_count < 700:\n            errors.append(f\"字数不足700字（当前{char_count}字）\")\n        if char_count > 900:\n            errors.append(f\"字数超过900字（当前{char_count}字）\")\n    else:\n        errors.append(\"无法提取正文内容\")\n    \n    # 检查关键词\n    keywords = [\"生态\", \"环境保护\", \"生物多样性\", \"绿色能源\"]\n    missing = [kw for kw in keywords if kw not in content]\n    if missing:\n        errors.append(f\"缺少关键词：{', '.join(missing)}\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "撰写一篇关于城市交通改善策略的文章，文章应只出现五个段落（不要出现标题），每个段落之间用'～～'符号分隔。在第四个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证起始结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker) or end_marker not in response:\n        return {\"check_code\": False, \"reason\": \"回答缺少起始/结束标记\"}\n    \n    # 提取答案内容\n    content = response.split(start_marker)[-1].split(end_marker)[0].strip()\n    \n    # 验证段落分隔符\n    paragraphs = [p.strip() for p in content.split('～～')]\n    if len(paragraphs) != 5:\n        return {\"check_code\": False, \"reason\": f\"段落数量错误（要求5段，实际{len(paragraphs)}段）\"}\n    \n    # 验证第四段落句子数量\n    para4 = paragraphs[3]\n    sentences = [s.strip() for s in re.split(r'[。？！]', para4) if s.strip()]\n    if len(sentences) != 6:\n        return {\"check_code\": False, \"reason\": f\"第四段落句子数量错误（要求6句，实际{len(sentences)}句）\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "无人驾驶汽车技术正在迅速发展，并且被视为未来交通运输的重要方向之一。无人驾驶汽车依靠传感器、摄像头、雷达和人工智能来感知周围环境，并自主做出驾驶决策。尽管无人驾驶技术有望提高交通安全、减少交通拥堵，并为老年人和残疾人提供出行便利，但它也面临许多挑战。例如，技术的安全性和可靠性、法律和伦理问题、基础设施建设以及社会接受度等。\n\n\n请写一篇关于无人驾驶汽车未来发展的文章，要求在文章中至少出现3次“安全性”，必须只出现2次“交通”，至多出现4次“技术”。并且，请确保文章的第四个句子（用中文句号或问号或感叹号分隔）以“无人驾驶”开头，第二个句子以“未来发展”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或以'【答案结束】'结尾。\"\n        }\n    response = response[6:-6].strip()\n    sentences = re.split('。|？|！', response)\n    sentences = [k for k in sentences if k]\n    if len(sentences) < 4:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章句子数量不足\"\n        }\n    if not sentences[1].strip().endswith('未来发展'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"第二个句子未以‘未来发展’结尾\"\n        }\n    if not sentences[3].strip().startswith('无人驾驶'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"第四个句子未以‘无人驾驶’开头\"\n        }\n    if response.count('安全性') < 3:\n        return {\n            \"check_code\": False,\n            \"reason\": \"‘安全性’出现次数不足\"\n        }\n    if response.count('交通') != 2:\n        return {\n            \"check_code\": False,\n            \"reason\": \"‘交通’出现次数不等于2\"\n        }\n    if response.count('技术') > 4:\n        return {\n            \"check_code\": False,\n            \"reason\": \"‘技术’出现次数超过4次\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请描述你心目中的完美假期地点。文章只能有5个段落(不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“景色”这个词务必至少出现两次。文章长度要求至少600字，至多800字。在第一个句子（用中文句号或问号或感叹号分隔）中用“假期中的”这四个字开头。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查答案起始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response or end_marker not in response:\n        return {\"check_code\": False, \"reason\": \"缺少答案开始或结束标记\"}\n    \n    # 提取答案内容\n    content = re.search(rf\"{re.escape(start_marker)}(.*?){re.escape(end_marker)}\", response, re.DOTALL)\n    if not content:\n        return {\"check_code\": False, \"reason\": \"无法提取答案内容\"}\n    content = content.group(1).strip()\n    \n    # 检查答案分隔符\n    answers = [ans.strip() for ans in content.split(\"******\") if ans.strip()]\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案数量错误: 需要2个，实际{len(answers)}个\"}\n    \n    err_infos = []\n    for i, ans in enumerate(answers, 1):\n        # 检查段落结构\n        paragraphs = [p.strip() for p in re.split(r\"\\n{2,}\", ans) if p.strip()]\n        if len(paragraphs) != 5:\n            err_infos.append(f\"答案{i}: 段落数量错误(需要5段，实际{len(paragraphs)}段)\")\n            continue\n        \n        # 检查第二段\"景色\"出现次数\n        scenery_count = paragraphs[1].count(\"景色\")\n        if scenery_count < 2:\n            err_infos.append(f\"答案{i}: 第二段'景色'出现次数不足(需要≥2次，实际{scenery_count}次)\")\n        \n        # 检查字数限制\n        char_count = len(re.sub(r\"\\s\", \"\", ans))  # 移除所有空白后计数\n        if not (600 <= char_count <= 800):\n            err_infos.append(f\"答案{i}: 字数超限(需要600-800字，实际{char_count}字)\")\n        \n        # 检查首句开头\n        first_sentence = re.split(r\"[。？！]\", paragraphs[0])[0].strip()\n        if not first_sentence.startswith(\"假期中的\"):\n            err_infos.append(f\"答案{i}: 首句未以'假期中的'开头\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"；\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "撰写一篇关于“如何在城市中设计一个无障碍公共交通系统”的方案说明，文章只能出现五个段落（不要出现标题），每个段落之间用“～～”符号分隔。确保第二个段落不含任何标点符号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    import string\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"回答格式错误：缺少开始或结束标记\"}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"): -len(\"【答案结束】\")]\n    \n    # 检查段落分隔符\n    paragraphs = re.split(r'～～+', content.strip())\n    if len(paragraphs) != 5:\n        return {\"check_code\": False, \"reason\": f\"段落数量错误：应为5段，实际{len(paragraphs)}段\"}\n    \n    # 检查段落非空\n    for i, para in enumerate(paragraphs):\n        if not para.strip():\n            return {\"check_code\": False, \"reason\": f\"第{i+1}段为空或仅含空格\"}\n    \n    # 检查第二段标点符号\n    second_para = paragraphs[1].strip()\n    all_punctuation = string.punctuation + \"，。！？；：“”‘’（）【】《》\"\n    for char in second_para:\n        if char in all_punctuation:\n            return {\"check_code\": False, \"reason\": f\"第二段包含标点符号'{char}'\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于“传统手工艺在现代设计中的应用”的文章，探讨如何通过将传统工艺与现代设计相结合来创造新价值。要求文章以“这正是传统与现代完美融合的体现。”这句话结尾。文章只能出现6个段落（不要出现标题），每个段落之间“～～”符号分隔。其中第3段的第8个汉字必须是“艺”字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    def get_kth_chinese_char(text, k):\n        count = 0\n        for char in text:\n            if '\\u4e00' <= char <= '\\u9fff':\n                count += 1\n                if count == k:\n                    return char\n        return None\n    \n    response = response.strip()\n    errors = []\n    \n    # 检查头尾标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"开头缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"结尾缺少【答案结束】标记\")\n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取内容\n    content = response[5:-5]  # 去除头尾标记\n    answers = content.split('@@@@@@')\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案分隔符错误，期望2个答案，实际分割出{len(answers)}部分\"}\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers, 1):\n        ans_errors = []\n        ans = ans.strip()\n        \n        # 检查结尾句\n        if not ans.endswith(\"这正是传统与现代完美融合的体现。\"):\n            ans_errors.append(f\"答案{i}未以指定句子结尾\")\n        \n        # 检查段落数量\n        segments = re.split(r'～～', ans)\n        if len(segments) != 6:\n            ans_errors.append(f\"答案{i}段落数量不为6（实际{len(segments)}段）\")\n        else:\n            # 检查第3段第8个汉字\n            para3 = segments[2]\n            char8 = get_kth_chinese_char(para3, 8)\n            if char8 != '艺':\n                actual = f\"实际'{char8}'\" if char8 else \"不足8个汉字\"\n                ans_errors.append(f\"答案{i}第3段第8个汉字不是'艺'（{actual}）\")\n        \n        if ans_errors:\n            errors.append(f\"答案{i}: \" + \"; \".join(ans_errors))\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \" | \".join(errors)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在古代，造纸术的发明对人类文明的传播和知识的积累起到了重要作用。但实际上，不同地区的古代文明在纸张发明之前都有自己的记录工具，比如埃及的纸莎草、中国的竹简和丝帛、以及美索不达米亚的泥板。每种记录工具都反映了不同地区的自然环境和文化特点。造纸术的出现不仅极大地提高了信息记录的效率，还推动了书籍的普及和教育的发展。\n\n请以“不同地区古代记录工具的比较”为主题写一篇文章。要求文章至少200个汉字，至多400个汉字。请确保文章恰好由10个句子组成，每个句子用“^”符号分隔。请在回复中详细解释并列出其中三种主要原因，使用“&原因1&”、“&原因2&”和“&原因3&”作为主要原因的占位符。要求文章中“竹简”一词至少出现2次，“纸莎草”一词至少出现2次，“泥板”一词至多出现4次。要求模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    err_infos = []\n    \n    # 检查基本标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    if not content:\n        err_infos.append(\"答案内容为空\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 分割两个答案\n    answers = [ans.strip() for ans in content.split(\"@@@@@@\") if ans.strip()]\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量应为2个，实际为{len(answers)}个\")\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        # 检查句子分隔符\n        sentences = ans.split('^')\n        if len(sentences) != 10:\n            err_infos.append(f\"答案{idx}: 句子数量应为10个，实际为{len(sentences)}个\")\n        \n        # 提取文章部分和原因部分\n        article = '^'.join(sentences[:10])  # 前10个句子为文章\n        reason_part = '^'.join(sentences[10:])  # 剩余为原因部分\n        \n        # 统计汉字数量\n        hanzi_chars = re.findall(r'[一-龥]', article)\n        hanzi_count = len(hanzi_chars)\n        if hanzi_count < 200 or hanzi_count > 400:\n            err_infos.append(f\"答案{idx}: 汉字数量{hanzi_count}超出200-400范围\")\n        \n        # 检查关键词频率\n        keywords = Counter(re.findall(r'竹简|纸莎草|泥板', article))\n        if keywords['竹简'] < 2:\n            err_infos.append(f\"答案{idx}: '竹简'出现次数不足2次（{keywords['竹简']}次）\")\n        if keywords['纸莎草'] < 2:\n            err_infos.append(f\"答案{idx}: '纸莎草'出现次数不足2次（{keywords['纸莎草']}次）\")\n        if keywords['泥板'] > 4:\n            err_infos.append(f\"答案{idx}: '泥板'出现次数超过4次（{keywords['泥板']}次）\")\n        \n        # 检查原因占位符\n        if \"&原因1&\" not in reason_part:\n            err_infos.append(f\"答案{idx}: 缺少原因占位符&原因1&\")\n        if \"&原因2&\" not in reason_part:\n            err_infos.append(f\"答案{idx}: 缺少原因占位符&原因2&\")\n        if \"&原因3&\" not in reason_part:\n            err_infos.append(f\"答案{idx}: 缺少原因占位符&原因3&\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }\n"}
{"prompt": "近年来，全球各地的城市都在通过各种创新的园艺和建筑设计来改善城市环境和居民生活质量。垂直花园和生态屋顶是其中备受关注的两个创新理念。垂直花园是指在建筑物墙壁上种植植物，不仅能够美化环境，还能有效降低建筑物的温度，从而减少空调的使用。生态屋顶则是指在屋顶上种植植被，除了能提供隔热效果，还能吸收雨水，减少城市排水系统的负担。尽管这些技术在许多城市中得到了应用，但它们的实际效果和可持续性仍然需要大量的研究和数据支持。请思考这些创新设计在未来城市生活中可能带来的长期影响，并探讨如何克服在实施过程中可能遇到的挑战。\n\n请撰写一篇关于未来城市园艺设计如何提升居民生活质量的文章。文章应包含4个段落，每个段落之间用'～～'符号分隔。在第二个段落中，“生态”这个词至少出现两次，而“植物”这个词不得出现。内容不能出现中文逗号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    # 检查标记完整性\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答缺少【答案结束】标记\")\n    \n    # 如果标记不完整则终止后续检查\n    if errors:\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 提取内容并验证长度\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    if not content:\n        errors.append(\"答案内容为空\")\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 验证中文逗号\n    if \"，\" in content:\n        errors.append(\"内容包含中文逗号\")\n    \n    # 验证段落分隔符\n    paragraphs = content.split(\"～～\")\n    if len(paragraphs) != 4:\n        errors.append(f\"段落数量错误（需要4段，实际{len(paragraphs)}段）\")\n    \n    # 验证第二段落特殊要求\n    if len(paragraphs) >= 2:\n        para2 = paragraphs[1]\n        # 生态词频检查\n        if para2.count(\"生态\") < 2:\n            errors.append(\"第二段'生态'出现次数不足2次\")\n        # 禁用词检查\n        if \"植物\" in para2:\n            errors.append(\"第二段出现禁用词'植物'\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"验证通过\" if not errors else \";\".join(errors)\n    }"}
{"prompt": "在现代社会，人们越来越重视个人健康和健身。健身房、瑜伽课程和各种健身应用程序已经成为日常生活的一部分。然而，有一种古老的健身方法——太极拳，却在现代人的日常生活中逐渐被遗忘。太极拳不仅是一种锻炼身体的方法，更是一种培养心灵的艺术，它融合了中国传统的哲学和医学思想，通过缓慢而有控制的动作来增强身体的平衡性和灵活性，同时也有助于减轻压力和焦虑。尽管如此，很多人对太极拳的了解仍然非常有限，甚至认为它只是老年人的运动。\n\n请解释太极拳对现代人生活的好处，文章内容不少于500字但不超过800字，并列出三种主要原因，使用“【原因1】”、“【原因2】”和“【原因3】”作为主要原因的占位符。请以“太极拳是一种”这六个字开头。文章应只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“平衡”这个词只出现两次。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 1. 检查响应是否以【答案开始】开头并以【答案结束】结尾\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"答案缺少开始/结束标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取核心内容（去除标记）\n    content = response[5:-5].strip()  # 去除【答案开始/结束】\n    \n    # 2. 验证是否存在两个答案的分隔符\n    if \"******\" not in content:\n        err_infos.append(\"缺少答案分隔符******\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 分割两个答案\n    answers = content.split(\"******\", 1)\n    if len(answers) != 2:\n        err_infos.append(\"答案数量不等于2\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 分别验证每个答案\n    for i, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        # 3. 检查开头\n        if not ans.startswith(\"太极拳是一种\"):\n            err_infos.append(f\"答案{i}开头不符合要求\")\n        \n        # 4. 检查字数\n        if not (500 <= len(ans) <= 800):\n            err_infos.append(f\"答案{i}字数范围错误({len(ans)})\")\n        \n        # 5. 检查段落数量\n        paragraphs = re.split('\\n\\n', ans)  # 按两个以上换行分割\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{i}段落数不等于4\")\n            continue  # 段落错误时跳过后续检查\n        \n        # 6. 检查第二段的\"平衡\"次数\n        balance_count = paragraphs[1].count(\"平衡\")\n        if balance_count != 2:\n            err_infos.append(f\"答案{i}第二段'平衡'出现次数={balance_count}\")\n        \n        # 7. 检查原因占位符\n        for tag in [\"【原因1】\", \"【原因2】\", \"【原因3】\"]:\n            if tag not in ans:\n                err_infos.append(f\"答案{i}缺少{tag}\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于你最难忘的一次旅行经历的文章，并以“这次旅行”这几个字开头。文章应包含4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“风景”这个词至少出现三次。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查是否包含答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"缺少【答案开始】或【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    start_idx = response.index(start_tag) + len(start_tag)\n    end_idx = response.index(end_tag)\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查内容是否以\"这次旅行\"开头\n    if not content.startswith(\"这次旅行\"):\n        err_infos.append(\"内容未以'这次旅行'开头\")\n    \n    # 检查段落分隔符和段落数量\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误，应为4段，实际为{len(paragraphs)}段\")\n    \n    # 检查第二个段落中\"风景\"出现次数\n    if len(paragraphs) >= 2:\n        scene_count = paragraphs[1].count(\"风景\")\n        if scene_count < 3:\n            err_infos.append(f\"第二段中'风景'出现次数不足3次，实际为{scene_count}次\")\n    else:\n        err_infos.append(\"缺少第二段落\")\n    \n    # 检查是否有多余解析内容\n    if re.search(r'(解析|解释|说明)：', content, re.IGNORECASE):\n        err_infos.append(\"内容包含多余解析说明\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于“家居收纳技巧”的文章。在文章中不能出现“整理”、“整洁”和“储存”三个词。请确保在文章中至少出现2次“空间”，必须刚好出现3次“灵活”，且出现不多于1次“布局”。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。文章应恰好包含10个句子，每个句子之间用^作为分隔符号。此外，第2段的第5个汉字必须是“方”字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    content = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 验证段落结构\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误: 需要4段, 实际{len(paragraphs)}段\")\n    \n    # 验证句子数量\n    sentences = content.split('^')\n    if len(sentences) != 10:\n        err_infos.append(f\"句子数量错误: 需要10句, 实际{len(sentences)}句\")\n    \n    # 检查第二段第五个汉字\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1].replace('^', '').replace('～', '').strip()\n        if len(second_para) >= 5:\n            if second_para[4] != '方':\n                err_infos.append(\"第二段第五个汉字不是'方'\")\n        else:\n            err_infos.append(\"第二段长度不足5个汉字\")\n    \n    # 检查禁止词\n    forbidden_words = [\"整理\", \"整洁\", \"储存\"]\n    for word in forbidden_words:\n        if word in content:\n            err_infos.append(f\"包含禁止词: '{word}'\")\n    \n    # 验证关键词频率\n    space_count = content.count(\"空间\")\n    flexible_count = content.count(\"灵活\")\n    layout_count = content.count(\"布局\")\n    \n    if space_count < 2:\n        err_infos.append(f\"'空间'出现次数不足: 需要≥2次, 实际{space_count}次\")\n    if flexible_count != 3:\n        err_infos.append(f\"'灵活'出现次数错误: 需要3次, 实际{flexible_count}次\")\n    if layout_count > 1:\n        err_infos.append(f\"'布局'出现次数超限: 需要≤1次, 实际{layout_count}次\")\n    \n    return {\"check_code\": len(err_infos) == 0, \"reason\": err_infos}"}
{"prompt": "请写一篇关于传统手工艺品的文章。文章只应包括四个段落，每个段落之间用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好只包含六个句子（用中文句号或问号或感叹号分隔）。文章的内容长度应至少为500字，至多为600字。请注意避免使用“现代”、“机械”、“科技”这三个词。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查标记是否完整\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker):\n        errors.append(\"缺少开始标记【答案开始】\")\n    if end_marker not in response:\n        errors.append(\"缺少结束标记【答案结束】\")\n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取答案内容\n    start_idx = response.find(start_marker) + len(start_marker)\n    end_idx = response.find(end_marker)\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查禁用词\n    forbidden_words = [\"现代\", \"机械\", \"科技\"]\n    for word in forbidden_words:\n        if word in content:\n            errors.append(f\"使用了禁用词'{word}'\")\n    \n    # 检查段落分隔\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 4:\n        errors.append(f\"段落数量为{len(paragraphs)}而非4段\")\n    else:\n        # 检查第三段句子数量\n        third_para = paragraphs[2].replace(\"\\n\", \"\")\n        sentences = re.split(r'[。？！]', third_para)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            errors.append(f\"第三段包含{len(sentences)}个句子而非6句\")\n    \n    # 检查字数\n    clean_content = re.sub(r'\\s', '', content)  # 移除所有空白字符\n    char_count = len(clean_content)\n    if char_count < 500:\n        errors.append(f\"文章仅{char_count}字（不足500字）\")\n    elif char_count > 600:\n        errors.append(f\"文章达{char_count}字（超过600字）\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) or \"验证通过\"\n    }"}
{"prompt": "请撰写一篇关于“家庭厨房设计”的文章，请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。请确保文章恰好由10个句子（用中文句号或问号或感叹号分隔）组成。其中第3个句子的第4个汉字必须是“光”字。请确保第8个句子不少于12个汉字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义原始指令字符串\n    original_instruction = \"请撰写一篇关于“家庭厨房设计”的文章，请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。请确保文章恰好由10个句子（用中文句号或问号或感叹号分隔）组成。其中第3个句子的第4个汉字必须是“光”字。请确保第8个句子不少于12个汉字。\"\n    \n    # 初始化检查结果\n    check_code = True\n    err_infos = []\n    \n    # 检查响应格式\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        check_code = False\n        err_infos.append(\"响应缺少【答案开始】或【答案结束】标记\")\n        return {\"check_code\": check_code, \"reason\": err_infos}\n    \n    # 提取答案内容\n    start_index = response.index(\"【答案开始】\") + len(\"【答案开始】\")\n    end_index = response.index(\"【答案结束】\")\n    answer_content = response[start_index:end_index].strip()\n    \n    # 检查指令重复部分\n    if not answer_content.startswith(original_instruction):\n        check_code = False\n        err_infos.append(\"未一字不差重复指令要求\")\n        return {\"check_code\": check_code, \"reason\": err_infos}\n    \n    # 提取文章内容\n    article_content = answer_content[len(original_instruction):].strip()\n    \n    # 检查段落分隔\n    paragraphs = article_content.split('～～')\n    if len(paragraphs) != 4:\n        check_code = False\n        err_infos.append(f\"段落数量错误：应为4段，实际{len(paragraphs)}段\")\n    \n    # 合并文章并分句\n    full_text = ''.join(paragraphs)\n    sentences = re.split(r'[。？！]', full_text)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    # 检查句子总数\n    if len(sentences) != 10:\n        check_code = False\n        err_infos.append(f\"句子数量错误：应为10句，实际{len(sentences)}句\")\n    \n    # 检查第3句第4字\n    if len(sentences) >= 3:\n        third_sentence = sentences[2]\n        if len(third_sentence) >= 4:\n            if third_sentence[3] != '光':\n                check_code = False\n                err_infos.append(f\"第3句第4字错误：应为'光'，实际是'{third_sentence[3]}'\")\n        else:\n            check_code = False\n            err_infos.append(\"第3句长度不足4字\")\n    \n    # 检查第8句长度\n    if len(sentences) >= 8:\n        eighth_sentence = sentences[7]\n        hanzi_count = len(re.findall(r'[一-龥]', eighth_sentence))\n        if hanzi_count < 12:\n            check_code = False\n            err_infos.append(f\"第8句汉字不足12个：实际{hanzi_count}个\")\n    \n    return {\"check_code\": check_code, \"reason\": err_infos}"}
{"prompt": "近年来，垃圾分类成为了全球许多城市推行的一项重要环保措施。垃圾分类不仅能减少垃圾对环境的污染，还能促进资源的再利用，提高城市的可持续发展水平。然而，如何有效地推行垃圾分类，仍然是一个需要深入探讨的问题。在推行垃圾分类的过程中，不同城市采取了不同的方法，有的城市通过立法强制执行，有的城市则通过宣传教育提高市民的环保意识。不仅如此，垃圾分类的细化程度和分类标准也因地而异。有些城市仅将垃圾分为可回收和不可回收两类，而有些城市则将垃圾分为厨余垃圾、可回收物、有害垃圾和其他垃圾四类。因此，研究不同城市在推行垃圾分类方面的经验和问题，对于其他城市制定合适的垃圾分类政策具有重要的借鉴意义。\n\n请撰写一篇关于垃圾分类在不同城市推行经验的文章，文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由四个句子（用中文句号或问号或感叹号分隔）组成。文章请以“在许多城市”这五个字开头。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或以'【答案结束】'结尾。\"\n        }\n    content = response[6:-6].strip()\n    answers = content.split('******')\n    if len(answers) != 2:\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有提供两个答案或没有用六个星号分隔。\"\n        }\n    for answer in answers:\n        answer = answer.strip()\n        paragraphs = answer.split('\\n\\n')\n        paragraphs = [k for k in paragraphs if k]\n        if len(paragraphs) != 4:\n            return {\n                \"check_code\": False,\n                \"reason\": \"每个答案没有包含四个段落。\"\n            }\n        if not paragraphs[2].count('。') + paragraphs[2].count('？') + paragraphs[2].count('！') == 4:\n            return {\n                \"check_code\": False,\n                \"reason\": \"第三个段落没有刚好由四个句子组成。\"\n            }\n        if not answer.startswith('在许多城市'):\n            return {\n                \"check_code\": False,\n                \"reason\": \"文章没有以'在许多城市'开头。\"\n            }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请描述一种独特的家庭烹饪方法，该方法需使用传统工具。文章避免使用“电器”和“现代化”这两个词。文章内容需详细解释三个主要步骤，并使用“&步骤1&”、“&步骤2&”和“&步骤3&”作为主要步骤的占位符。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 验证开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取核心内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    if not content:\n        err_infos.append(\"答案内容为空\")\n    \n    # 分割两个答案\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        err_infos.append(f\"需要2个答案但得到{len(answers)}个\")\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers):\n        # 检查禁用词\n        if re.search(r\"电器|现代化\", ans):\n            err_infos.append(f\"答案{i+1}包含禁用词\")\n        \n        # 检查步骤标记\n        markers = [\"&步骤1&\", \"&步骤2&\", \"&步骤3&\"]\n        for marker in markers:\n            if marker not in ans:\n                err_infos.append(f\"答案{i+1}缺少{marker}\")\n        \n        # 检查步骤顺序\n        pos1 = ans.find(\"&步骤1&\")\n        pos2 = ans.find(\"&步骤2&\")\n        pos3 = ans.find(\"&步骤3&\")\n        if not (0 <= pos1 < pos2 < pos3):\n            err_infos.append(f\"答案{i+1}步骤顺序错误\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "将下列文本中每句话的最后五个字删去，然后在前三句话的每句话开头添加标识符“@”，其余内容保持不变。直接返回修改后的文本，不要出现其他多余的内容。\n\n零食是人们日常饮食中一种重要的补充食品，通常指在正餐之外食用的轻便食品。零食的种类繁多，口味丰富，涵盖了甜、咸、酸、辣等多种风味，深受各年龄段人群的喜爱。它不仅可以满足短时间内的饥饿感，还常常成为休闲娱乐、社交场合或旅途中的伴侣。随着社会的发展和饮食文化的多样化，零食已经从简单的果腹食品演变为展现个性和品味的一部分。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    original_text = \"零食是人们日常饮食中一种重要的补充食品，通常指在正餐之外食用的轻便食品。零食的种类繁多，口味丰富，涵盖了甜、咸、酸、辣等多种风味，深受各年龄段人群的喜爱。它不仅可以满足短时间内的饥饿感，还常常成为休闲娱乐、社交场合或旅途中的伴侣。随着社会的发展和饮食文化的多样化，零食已经从简单的果腹食品演变为展现个性和品味的一部分。\"\n    \n    # 检查标记格式\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"答案标记格式错误\"}\n    \n    # 提取答案内容\n    start_idx = response.find(\"【答案开始】\") + 6\n    end_idx = response.find(\"【答案结束】\")\n    if end_idx <= start_idx:\n        return {\"check_code\": False, \"reason\": \"答案内容缺失\"}\n    answer = response[start_idx:end_idx].strip()\n    \n    # 处理原始文本生成预期结果\n    sentences = re.split(r'(?<=[。.!?])', original_text)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    expected_lines = []\n    for i, s in enumerate(sentences):\n        if s.endswith('。'):\n            s = s[:-1]  # 移除句尾句号\n        if len(s) > 5:\n            s = s[:-5]  # 删除最后五个字\n        if i < 3:  # 前三句添加@\n            s = f\"@{s}。\"\n        else:\n            s = f\"{s}。\"\n        expected_lines.append(s)\n    \n    expected = ''.join(expected_lines)\n    \n    # 比较处理结果\n    if answer != expected:\n        return {\"check_code\": False, \"reason\": \"文本内容不符合修改要求\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于烹饪新手在家制作披萨的经历的文章。内容需至少包含120个汉字且不超过300个汉字。文章应有4个段落（不要出现标题），每个段落之间用“～～”符号分隔。在第二个段落中，“面团”这个词语必须只出现两次。在整篇文章中，句子（用中文句号或问号或感叹号分隔）数量应恰好为10个句子。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    result = {\"check_code\": True, \"reason\": []}\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response or end_marker not in response:\n        result[\"check_code\"] = False\n        result[\"reason\"].append(\"未找到答案标记\")\n        return result\n    \n    content = response.split(start_marker)[1].split(end_marker)[0].strip()\n    \n    # 检查段落分隔符\n    paragraphs = content.split(\"～～\")\n    if len(paragraphs) != 4:\n        result[\"check_code\"] = False\n        result[\"reason\"].append(f\"段落数量错误: {len(paragraphs)}段(应为4段)\")\n    \n    # 检查字数\n    chinese_chars = re.findall(r'[一-龥]', content)\n    char_count = len(chinese_chars)\n    if char_count < 120:\n        result[\"check_code\"] = False\n        result[\"reason\"].append(f\"字数不足: {char_count}字(至少120字)\")\n    if char_count > 300:\n        result[\"check_code\"] = False\n        result[\"reason\"].append(f\"字数超出: {char_count}字(不超过300字)\")\n    \n    # 检查第二段面团出现次数\n    if len(paragraphs) >= 2:\n        dough_count = paragraphs[1].count(\"面团\")\n        if dough_count != 2:\n            result[\"check_code\"] = False\n            result[\"reason\"].append(f\"第二段'面团'出现{dough_count}次(应为2次)\")\n    \n    # 检查句子数量\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 10:\n        result[\"check_code\"] = False\n        result[\"reason\"].append(f\"句子数量{len(sentences)}句(应为10句)\")\n    \n    return result"}
{"prompt": "在现代都市中，智能家居技术正逐渐成为家庭生活的重要组成部分。这一技术通过物联网实现了家电设备的互联互通，为人们提供了更为便捷和高效的生活方式。智能家居系统可以通过手机应用程序或语音助手来进行控制，使得用户能够远程管理家中的各项设备，如灯光、温度、安防系统等。此外，智能家居还具备学习用户行为的能力，能够根据用户的习惯进行自动化调整，例如根据日出日落自动调节窗帘的开合，或者在检测到家中无人时自动关闭不必要的设备，从而达到节能的目的。然而，智能家居的普及也面临着一些挑战，例如数据安全和隐私问题，用户需要确保其数据不会被未经授权的第三方访问。尽管如此，智能家居仍然为现代生活提供了许多便利，并有望在未来得到更广泛的应用。\n\n请撰写一篇关于智能家居在未来五年内可能发展的文章。文章应由四个段落组成（不要出现标题），每个段落之间用'～～'符号分隔。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。文章的总句子数应为16个，每个句子必须至少有15个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    # 提取答案内容\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    start_idx = response.find(start_tag)\n    end_idx = response.find(end_tag)\n    \n    if start_idx == -1 or end_idx == -1 or end_idx <= start_idx:\n        return {\"check_code\": False, \"reason\": \"未找到答案标记\"}\n    \n    content = response[start_idx+len(start_tag):end_idx].strip()\n    \n    # 验证段落分隔符\n    paragraphs = content.split(\"～～\")\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误（实际：{len(paragraphs)}，需要：4）\")\n    \n    # 验证句子总数和句子长度\n    all_sentences = []\n    for i, para in enumerate(paragraphs):\n        sentences = re.split(r'[。？！]', para)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        all_sentences.extend(sentences)\n        \n        # 验证第三段句子数\n        if i == 2:\n            if len(sentences) != 6:\n                err_infos.append(f\"第三段句子数量错误（实际：{len(sentences)}，需要：6）\")\n    \n    # 验证总句子数\n    if len(all_sentences) != 16:\n        err_infos.append(f\"总句子数量错误（实际：{len(all_sentences)}，需要：16）\")\n    \n    # 验证每句长度\n    short_sentences = []\n    for i, sent in enumerate(all_sentences):\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', sent)\n        if len(chinese_chars) < 15:\n            short_sentences.append(f\"第{i+1}句（{sent[:10]}...）\")\n    \n    if short_sentences:\n        err_infos.append(f\"以下句子不足15个汉字：{', '.join(short_sentences)}\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"验证通过\"\n    }"}
{"prompt": "请撰写一篇关于“城市与生态”的文章，并以“在现代社会”开头。请在回复中详细解释并列出其中三种主要挑战，使用“&挑战1&”、“&挑战2&”和“&挑战3&”作为挑战的占位符。请确保文章只出现6个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第3段的第9个汉字必须是“水”字。此外，第5段至少要150个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查开始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答开头缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答结尾缺少【答案结束】标记\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 提取答案内容\n    start_index = response.find(\"【答案开始】\") + 6\n    end_index = response.find(\"【答案结束】\")\n    content = response[start_index:end_index].strip()\n    \n    # 检查内容开头\n    if not content.startswith(\"在现代社会\"):\n        errors.append(\"文章开头不是'在现代社会'\")\n    \n    # 检查段落分隔和数量\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 6:\n        errors.append(f\"段落数量应为6，实际为{len(paragraphs)}\")\n    \n    # 检查第三段第九个汉字\n    if len(paragraphs) >= 3:\n        para3 = paragraphs[2]\n        hanzi_count = 0\n        for char in para3:\n            if '\\u4e00' <= char <= '\\u9fff':\n                hanzi_count += 1\n                if hanzi_count == 9:\n                    if char != \"水\":\n                        errors.append(\"第三段第9个汉字应为'水'\")\n                    break\n        if hanzi_count < 9:\n            errors.append(\"第三段不足9个汉字\")\n    else:\n        errors.append(\"缺少第三段\")\n    \n    # 检查第五段长度\n    if len(paragraphs) >= 5:\n        para5 = paragraphs[4]\n        hanzi_count = sum(1 for char in para5 if '\\u4e00' <= char <= '\\u9fff')\n        if hanzi_count < 150:\n            errors.append(f\"第五段汉字不足150个，实际{hanzi_count}个\")\n    else:\n        errors.append(\"缺少第五段\")\n    \n    # 检查挑战占位符\n    challenge_tags = [\"&挑战1&\", \"&挑战2&\", \"&挑战3&\"]\n    missing_tags = [tag for tag in challenge_tags if tag not in content]\n    if missing_tags:\n        errors.append(f\"缺少挑战占位符：{','.join(missing_tags)}\")\n    \n    return {\"check_code\": len(errors)==0, \"reason\": \";\".join(errors) if errors else \"\"}"}
{"prompt": "在现代城市中，交通拥堵和公共交通的压力一直是一个重大挑战。随着城市人口的增加，如何有效地规划城市交通网络以减少拥堵、提高效率，是一个值得深入研究的问题。近年来，智能交通系统（ITS）的发展为这一问题提供了新的解决方案。ITS利用实时数据和先进的技术来优化交通流量、减少交通事故，并提高运输效率。它不仅涉及传统的交通灯和道路设计，还包括车辆通信、智能停车、无人驾驶等技术。\n\n请撰写一篇关于智能交通系统如何改善城市交通状况的文章。在文章中，要求“智能交通”、“数据分析”和“效率”三个词语至少出现三次，并且以“智能交通是城市未来发展的关键。”这句话结尾。此外，请在内容中详细阐述三个主要优势，使用“&优势1&”、“&优势2&”和“&优势3&”作为这些优势的占位符。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 检查答案分隔符\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        err_infos.append(f\"答案分隔符错误，应使用6个@分隔，实际分隔为{len(answers)-1}部分\")\n    else:\n        # 验证每个答案\n        for i, ans in enumerate(answers, 1):\n            # 检查结尾句\n            if not ans.rstrip().endswith(\"智能交通是城市未来发展的关键。\"):\n                err_infos.append(f\"答案{i}未以指定结尾句结束\")\n            \n            # 检查关键词频率\n            keywords = [\"智能交通\", \"数据分析\", \"效率\"]\n            for word in keywords:\n                count = ans.count(word)\n                if count < 3:\n                    err_infos.append(f\"答案{i}中'{word}'出现次数不足(需3次，实际{count}次)\")\n            \n            # 检查优势占位符\n            placeholders = [\"&优势1&\", \"&优势2&\", \"&优势3&\"]\n            for ph in placeholders:\n                if ph not in ans:\n                    err_infos.append(f\"答案{i}中缺少占位符'{ph}'\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请详细描述一种你认为未来十年内在城市交通领域可能出现的新技术，并解释它如何改善当前的交通问题。回答内容请控制在150到200个字之间。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或以'【答案结束】'结尾。\"\n        }\n    content = response[6:-6].strip()\n    if len(content) < 150 or len(content) > 200:\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答内容不在150到200个字之间。\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请完全用德语回答以下问题，不要使用其他语言：设计一个适合小型公寓的多功能家具解决方案，要求包括详细的材料选择、空间优化策略以及环保设计理念。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查起始标记\n    if \"【答案开始】\" not in response:\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    \n    # 检查结束标记\n    if \"【答案结束】\" not in response:\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 验证标记顺序和唯一性\n    if \"【答案开始】\" in response and \"【答案结束】\" in response:\n        start_index = response.index(\"【答案开始】\")\n        end_index = response.index(\"【答案结束】\")\n        \n        if start_index >= end_index:\n            err_infos.append(\"标记顺序错误或重复\")\n        else:\n            # 提取答案内容\n            content = response[start_index + len(\"【答案开始】\"):end_index].strip()\n            \n            # 检查标记外内容\n            prefix = response[:start_index].strip()\n            suffix = response[end_index + len(\"【答案结束】\"):].strip()\n            if prefix or suffix:\n                err_infos.append(\"标记外存在多余内容\")\n            \n            # 检查德语内容\n            if not content:\n                err_infos.append(\"答案内容为空\")\n            else:\n                # 检测中文字符\n                if re.search(r'[\\u4e00-\\u9fff]', content):\n                    err_infos.append(\"答案包含中文\")\n                \n                # 检测常见英语单词\n                english_indicators = r'\\b(the|a|an|and|or|of|to|in|for|on|with|at|by)\\b'\n                if re.search(english_indicators, content, re.IGNORECASE):\n                    err_infos.append(\"答案包含英语词汇\")\n    \n    # 汇总验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "在现代社会，数据隐私和网络安全已成为一个日益重要的话题。随着科技的迅猛发展，个人数据的收集和使用变得无处不在。这不仅体现在社交媒体平台上，还包括电子邮件服务、在线购物网站和各种手机应用程序等。用户数据的价值不断攀升，导致了数据滥用和隐私泄露的风险加剧。近年来，发生了多起影响广泛的数据泄露事件，暴露了数百万用户的个人信息。这些事件引发了公众对数据隐私的关注，并推动了相关法律法规的出台和完善。例如，《通用数据保护条例》（GDPR）在欧盟的实施，旨在加强对个人数据的保护。然而，面对不断变化的技术环境和复杂的网络攻击手段，如何有效保障数据隐私仍然是一个具有挑战性的问题。\n\n请撰写一篇关于“数据隐私与网络安全”的文章。文章只能有4个段落（不要使用标题），每个段落之间用'～～'符号分隔。请注意，第2段的第15个汉字必须是“影”字。此外，文章的结尾必须是“因此，确保数据安全是我们共同的责任。”\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n\n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答缺少【答案开始】或【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取实际回答内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查段落分隔符和段落数量\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量应为4个，实际为{len(paragraphs)}个\")\n    \n    # 检查第二段第15个汉字\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1].strip()\n        hanzi_count = 0\n        target_char = None\n        for char in second_para:\n            if '\\u4e00' <= char <= '\\u9fff':  # 判断是否为汉字\n                hanzi_count += 1\n                if hanzi_count == 15:\n                    target_char = char\n                    break\n        \n        if target_char != \"影\":\n            err_infos.append(f\"第二段第15个汉字应为'影'，实际为'{target_char if target_char else '未找到'}'\")\n    \n    # 检查文章结尾\n    if not paragraphs[-1].strip().endswith(\"因此，确保数据安全是我们共同的责任。\"):\n        err_infos.append(\"文章结尾不符合要求\")\n    \n    # 检查多余内容\n    if \"解析\" in content or \"解析\" in response:\n        err_infos.append(\"回答包含多余的解释或解析内容\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请分别描述一下茶文化在中国和日本的不同特点，并讨论其对现代社会的影响。要求每个描述的句子至少10个汉字，最多20个汉字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记'【答案开始】'\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记'【答案结束】'\")\n    \n    # 如果标记错误直接返回\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查分隔符\n    parts = content.split(\"@@@@@@\")\n    if len(parts) != 2:\n        err_infos.append(\"答案分隔符必须使用六个@符号且只能出现一次\")\n    else:\n        # 检查每个答案部分非空\n        if not parts[0].strip():\n            err_infos.append(\"第一部分答案内容为空\")\n        if not parts[1].strip():\n            err_infos.append(\"第二部分答案内容为空\")\n    \n    # 检查句子长度\n    for part_idx, part in enumerate(parts):\n        if not part.strip():\n            continue  # 空内容跳过检查\n            \n        # 分割句子\n        sentences = re.split(r'[。？！]', part)\n        for sent in sentences:\n            s_clean = sent.strip()\n            if not s_clean:\n                continue\n                \n            # 提取汉字并计数\n            hanzi_chars = re.findall(r'[\\u4e00-\\u9fa5]', s_clean)\n            count = len(hanzi_chars)\n            \n            # 检查汉字数量\n            if count == 0:\n                err_infos.append(f\"第{part_idx+1}部分存在无汉字的句子: '{s_clean[:10]}...'\")\n            elif count < 10:\n                err_infos.append(f\"第{part_idx+1}部分句子过短({count}字): '{s_clean[:10]}...'\")\n            elif count > 20:\n                err_infos.append(f\"第{part_idx+1}部分句子过长({count}字): '{s_clean[:10]}...'\")\n    \n    # 返回最终结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请描述一种你认为对未来城市交通有重大影响的新兴技术，并且回答内容至少包含180个汉字，但不超过250个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查标记是否存在\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    # 检查标记完整性\n    if start_idx == -1:\n        errors.append(\"missing 【答案开始】\")\n    if end_idx == -1:\n        errors.append(\"missing 【答案结束】\")\n    if start_idx != -1 and end_idx != -1 and start_idx > end_idx:\n        errors.append(\"marker order incorrect\")\n    \n    # 提取答案内容\n    if start_idx != -1 and end_idx != -1 and start_idx < end_idx:\n        content = response[start_idx+len(start_marker):end_idx].strip()\n        \n        # 统计汉字数量（排除所有非汉字字符）\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', content)\n        char_count = len(chinese_chars)\n        \n        # 检查汉字数量\n        if char_count < 180:\n            errors.append(f\"insufficient Chinese characters (min 180, got {char_count})\")\n        if char_count > 250:\n            errors.append(f\"excessive Chinese characters (max 250, got {char_count})\")\n    else:\n        errors.append(\"unable to extract content\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于“城市交通发展”的文章，请确保文章只由4个段落组成（不要出现标题），每个段落之间用'～～'符号分隔。其中第3段要刚好只有150个汉字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 初始化检查结果\n    err_infos = []\n    \n    # 1. 检查【答案开始】和【答案结束】标记\n    if \"【答案开始】\" not in response:\n        err_infos.append(\"缺少【答案开始】标记\")\n    if \"【答案结束】\" not in response:\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    if \"【答案开始】\" in response and \"【答案结束】\" in response:\n        # 提取答案部分\n        start_idx = response.index(\"【答案开始】\") + len(\"【答案开始】\")\n        end_idx = response.index(\"【答案结束】\")\n        answer_content = response[start_idx:end_idx].strip()\n        \n        # 2. 检查段落分隔符和段落数量\n        paragraphs = [p.strip() for p in answer_content.split(\"～～\")]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"段落数量错误：需要4段，实际{len(paragraphs)}段\")\n        \n        # 3. 检查第三段汉字数量\n        if len(paragraphs) >= 3:\n            # 统计中文字符（Unicode中文范围）\n            ch_chars = re.findall(r'[一-龥]', paragraphs[2])\n            if len(ch_chars) != 150:\n                err_infos.append(f\"第三段需要150汉字，实际{len(ch_chars)}汉字\")\n    \n    # 返回验证结果\n    if not err_infos:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}"}
{"prompt": "近年来，宠物饲养逐渐成为一种生活趋势，尤其是在城市中，越来越多家庭选择养宠物来增添生活的乐趣。然而，宠物饲养不仅需要爱心，也需要科学管理。一个重要的方面是了解宠物的健康指标，比如心率、体温和行为变化，这些都可能是疾病的预兆。此外，不同宠物种类（如猫、狗、兔子等）的饮食需求和运动习惯也各不相同。为了让宠物健康成长，主人需要学习一些基本护理知识，例如如何正确清洁宠物、如何选择适合的饮食，以及如何判断宠物的心理状态。对于新手宠物主人来说，制定一个科学的宠物护理计划尤为重要，这不仅可以帮助宠物保持健康，还能提升主人与宠物之间的感情。  \n\n请撰写一篇关于“如何制定科学的宠物护理计划”的文章，请确保文章只出现2个段落（不要出现标题），每个段落之间用“～～”符号分隔。文章必须只能有8个句子（用中文句号或问号或感叹号分隔）。此外，要求第5个句子以“为了确保宠物的健康”开头。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取内容部分\n    content = None\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[5:-5].strip()  # 去除标记\n    \n    if content is None:\n        return {\"check_code\": False, \"reason\": \"|\".join(err_infos)}\n    \n    # 检查答案分隔符\n    if \"@@@@@@\" not in content:\n        err_infos.append(\"缺少答案分隔符@@@@@@\")\n    else:\n        answers = content.split(\"@@@@@@\")\n        if len(answers) != 2:\n            err_infos.append(f\"答案数量错误，期望2个，实际{len(answers)}个\")\n        else:\n            # 检查每个答案的段落分隔符\n            for i, ans in enumerate(answers):\n                sentences = [s.strip() for s in re.split(r'[。？！]', ans) if s.strip()]\n                # 检查句子总数\n                if len(sentences) != 8:\n                    err_infos.append(f\"句子总数错误，期望8句，实际{len(sentences)}句\")\n                if len(sentences) >= 5 and not sentences[4].startswith(\"为了确保宠物的健康\"):\n                    err_infos.append(f\"第5句格式错误：'{sentences[4][:20]}...'\")\n                if \"～～\" not in ans:\n                    err_infos.append(f\"答案{i+1}缺少段落分隔符～～\")\n                else:\n                    segments = ans.split(\"～～\")\n                    if len(segments) != 2:\n                        err_infos.append(f\"答案{i+1}段落数量错误，期望2段，实际{len(segments)}段\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"|\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "随着科技的飞速发展，网络安全已经成为全球关注的焦点。近年来，随着信息技术的普及，数据泄露、网络攻击等安全事件频发，给个人和企业带来了巨大的损失。因此，提升网络安全意识和技能变得尤为重要。网络安全不仅涉及技术层面的防护措施，还包括法律法规的完善、用户安全意识的提高以及跨国合作的加强。在这种背景下，如何有效地保护我们的个人数据和隐私成为一项重要的课题。网络安全专家建议，除了使用复杂的密码和定期更换密码外，用户还应当定期更新安全软件，并避免在公共网络环境下进行敏感操作。此外，企业应加强内部安全培训，建立完善的网络安全管理体系，以应对潜在的威胁。未来，随着人工智能和大数据技术的发展，网络安全领域将面临更多的挑战和机遇。\n\n请撰写一篇关于“网络安全与个人隐私”的文章，请确保文章恰好由7个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第3段的第5个汉字必须是“隐”字。文章中应刚好由11个句子（用中文句号或问号或感叹号分隔）组成，其中第2个句子至少要有15个汉字。此外，第5段的字数必须不超过100个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息列表\n    errors = []\n    \n    # 验证答案标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答开头缺少'【答案开始】'标记\")\n    if \"【答案结束】\" not in response:\n        errors.append(\"回答缺少'【答案结束】'标记\")\n    if errors: \n        return {\"check_code\": False, \"reason\": errors}\n    \n    # 提取答案内容\n    start_index = response.find(\"【答案开始】\") + 6\n    end_index = response.find(\"【答案结束】\")\n    content = response[start_index:end_index].strip()\n    \n    # 验证段落分隔\n    paragraphs = [p.strip() for p in content.split('～～')]\n    if len(paragraphs) != 7:\n        errors.append(f\"段落数量错误: 需要7段, 实际{len(paragraphs)}段\")\n    \n    # 验证第三段第五字\n    if len(paragraphs) >= 3:\n        para_3 = paragraphs[2].replace(\" \", \"\")\n        if len(para_3) < 5 or not para_3[4].isprintable():\n            errors.append(\"第三段长度不足5个字符\")\n        elif para_3[4] != '隐':\n            errors.append(f\"第三段第五字应为'隐', 实际为'{para_3[4]}'\")\n    else:\n        errors.append(\"缺少第三段\")\n    \n    # 验证句子总数\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 11:\n        errors.append(f\"句子数量错误: 需要11句, 实际{len(sentences)}句\")\n    \n    # 验证第二句长度\n    if len(sentences) >= 2:\n        hanzi_count = sum(1 for char in sentences[1] if '\\u4e00' <= char <= '\\u9fff')\n        if hanzi_count < 15:\n            errors.append(f\"第二句汉字不足15个: 实际{hanzi_count}个\")\n    else:\n        errors.append(\"缺少第二句\")\n    \n    # 验证第五段长度\n    if len(paragraphs) >= 5:\n        hanzi_count = sum(1 for char in paragraphs[4] if '\\u4e00' <= char <= '\\u9fff')\n        if hanzi_count > 100:\n            errors.append(f\"第五段汉字超过100个: 实际{hanzi_count}个\")\n    else:\n        errors.append(\"缺少第五段\")\n    \n    # 返回验证结果\n    if errors:\n        return {\"check_code\": False, \"reason\": errors}\n    return {\"check_code\": True, \"reason\": []}"}
{"prompt": "请撰写一篇关于城市公共交通系统的未来发展方向的文章。文章应只由7个段落组成，每个段落用两个换行符“\n\n”分隔开来。在第六个段落中，“创新”这个词务必刚好出现两次。在文章的结尾，请以“这将彻底改变我们的城市面貌。”这句话结束。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取两个答案\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    answers = content.split(\"******\")\n    \n    if len(answers) != 2:\n        err_infos.append(f\"答案分隔符错误：需要2个答案，实际找到{len(answers)}个\")\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers):\n        ans = ans.strip()\n        \n        # 检查段落数量\n        paragraphs = re.split(r'\\n{2,}', ans)\n        if len(paragraphs) != 7:\n            err_infos.append(f\"答案{idx+1}段落数错误：需要7段，实际{len(paragraphs)}段\")\n            continue\n        \n        # 检查第六段\"创新\"出现次数\n        sixth_para = paragraphs[5]\n        count = sixth_para.count(\"创新\")\n        if count != 2:\n            err_infos.append(f\"答案{idx+1}第六段'创新'出现次数错误：需要2次，实际{count}次\")\n        \n        # 检查第七段结尾\n        seventh_para = paragraphs[6].strip()\n        if not seventh_para.endswith(\"这将彻底改变我们的城市面貌。\"):\n            err_infos.append(f\"答案{idx+1}第七段结尾不符合要求\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于在现代城市规划中如何更有效地利用地下空间的文章。文章中需要详细列出三个主要原因，使用“&原因1&”、“&原因2&”和“&原因3&”作为主要原因的占位符，并确保内容中提到地下空间的设计对交通、环境和安全的具体影响。文章必须以“这将为未来城市创造更多可能性。”这句话结尾。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    stripped_resp = response.strip()\n    \n    # 检查头尾标记\n    if not stripped_resp.startswith(\"【答案开始】\"):\n        err_infos.append(\"开头缺少【答案开始】标记\")\n    if not stripped_resp.endswith(\"【答案结束】\"):\n        err_infos.append(\"结尾缺少【答案结束】标记\")\n    \n    # 提取内容并分割答案\n    content = stripped_resp.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    answers = re.split(r\"@{6}\", content)\n    \n    # 验证答案数量\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量应为2个，实际分割出{len(answers)}个\")\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers[:2], 1):\n        ans = ans.strip()\n        if not ans:\n            continue\n            \n        # 检查占位符\n        placeholders = [f\"&原因{i}&\" for i in range(1,4)]\n        missing_ph = [ph for ph in placeholders if ph not in ans]\n        if missing_ph:\n            err_infos.append(f\"答案{i}缺少占位符: {','.join(missing_ph)}\")\n        \n        # 检查关键词\n        keywords = [\"交通\", \"环境\", \"安全\"]\n        missing_kw = [kw for kw in keywords if kw not in ans]\n        if missing_kw:\n            err_infos.append(f\"答案{i}缺少关键词: {','.join(missing_kw)}\")\n        \n        # 检查结尾句\n        if not ans.endswith(\"这将为未来城市创造更多可能性。\"):\n            err_infos.append(f\"答案{i}结尾不符合要求\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "首先，将下列文本中的“术”字全部替换为“和”字；然后，再将上一步修改过的文本中的每个句子开头加上“++天气”；然后，再将上一步修改过的文本中第3个句子和第5个句子的顺序调换；然后，再将上一步修改过的文本中第2个句子的汉字和标点符号按照倒序排列；最后，将上一步修改过的文本中的前三个汉字按相同的先后顺序放到文本最后面。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n肿瘤外科是医学领域中一个重要的分支，专注于通过手术手段治疗各种类型的肿瘤。肿瘤外科手术的目的是彻底切除肿瘤组织，尽可能降低复发风险。手术的难度通常取决于肿瘤的大小、位置及与周围组织的关系。现代肿瘤外科手术中，医生采用先进的微创技术和导航系统，以提高手术的精确性和安全性。术后的康复和随访也是肿瘤治疗的重要部分，有助于提高患者的生活质量和生存率。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 原始文本\n    original_text = \"肿瘤外科是医学领域中一个重要的分支，专注于通过手术手段治疗各种类型的肿瘤。肿瘤外科手术的目的是彻底切除肿瘤组织，尽可能降低复发风险。手术的难度通常取决于肿瘤的大小、位置及与周围组织的关系。现代肿瘤外科手术中，医生采用先进的微创技术和导航系统，以提高手术的精确性和安全性。术后的康复和随访也是肿瘤治疗的重要部分，有助于提高患者的生活质量和生存率。\"\n    \n    # 步骤1: 替换\"术\"为\"和\"\n    step1 = original_text.replace(\"术\", \"和\")\n    \n    # 步骤2: 每句开头加\"++天气\"\n    sentences = [s.strip() for s in step1.split('。') if s]\n    step2 = '。'.join([\"++天气\" + s for s in sentences]) + '。'\n    \n    # 步骤3: 交换第3句和第5句\n    sentences = [s.strip() for s in step2.split('。') if s]\n    if len(sentences) >= 5:\n        sentences[2], sentences[4] = sentences[4], sentences[2]\n    step3 = '。'.join(sentences) + '。'\n    \n    # 步骤4: 倒序第2句\n    sentences = [s.strip() for s in step3.split('。') if s]\n    if len(sentences) >= 2:\n        sentences[1] = sentences[1][::-1]\n    step4 = '。'.join(sentences) + '。'\n    \n    # 步骤5: 前三个汉字放到最后\n    hanzi = [c for c in step4 if '一' <= c <= '鿿'][:3]\n    expected = step4 + ''.join(hanzi)\n    \n    # 验证响应格式和内容\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案标记格式错误\"}\n    \n    actual = response[len(\"【答案开始】\"):-len(\"【答案开始】\")].strip()  # 移除标记\n    \n    # 验证内容\n    if actual == expected:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        # 详细检查差异点\n        err_info = []\n        if len(actual) != len(expected):\n            err_info.append(f\"长度不符: 实际长度{len(actual)} vs 预期{len(expected)}\")\n        \n        # 检查关键特征\n        if \"++天气\" not in actual:\n            err_info.append(\"缺少句子前缀'++天气'\")\n        if \"和\" not in actual or \"术\" in actual:\n            err_info.append(\"'术'字替换错误\")\n        if actual[-3:] != ''.join(hanzi):\n            err_info.append(f\"结尾汉字错误: 实际'{actual[-3:]}' vs 预期'{''.join(hanzi)}'\")\n        \n        return {\"check_code\": False, \"reason\": \"; \".join(err_info) if err_info else \"未知错误\"}"}
{"prompt": "现代城市中，空气污染已经成为一个日益严重的公共健康问题。空气污染主要来源于工业排放、交通车辆尾气以及建筑工地的扬尘等。长期暴露在高污染的空气中，可能会导致呼吸道疾病、心血管疾病，甚至是癌症。许多城市已经采取了各种措施来应对空气污染问题，比如增加公共交通工具的使用，推动新能源汽车的发展，以及实施严格的工业排放标准。然而，仍有许多城市面临着如何有效治理空气污染的挑战。\n\n请撰写一篇关于城市空气污染治理的文章，探讨有效的治理措施和未来的发展方向。文章中需要包括以下几个方面的内容：\n1. 空气污染的主要来源和对健康的影响。\n2. 不同城市已经采取的治理措施及其效果。\n3. 未来可能的技术或政策发展方向。\n4. 您认为最有效的治理措施是什么，并解释原因。\n\n请确保文章标题用《》标记。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或以'【答案结束】'结尾。\"\n        }\n    content = response[6:-6].strip()\n    if '《' not in content or '》' not in content:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章标题没有用《》标记。\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "将下列文本中的“关”字全部加上“++”，格式应该为“++关++”；最后，将上一步修改过的文本中的前三个汉字按相同的先后顺序放到文本最后面。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n红细胞生成素是由肾脏分泌的一种激素，能刺激骨髓生成红细胞，对防治贫血有重要作用，尤其在慢性肾病患者中尤为关键。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    # 定义原始文本\n    original_text = \"红细胞生成素是由肾脏分泌的一种激素，能刺激骨髓生成红细胞，对防治贫血有重要作用，尤其在慢性肾病患者中尤为关键。\"\n    \n    # 验证响应格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"响应格式错误：缺少【答案开始】或【答案结束】标记\"}\n    \n    # 提取实际回答内容\n    start_index = len(\"【答案开始】\")\n    end_index = -len(\"【答案结束】\")\n    actual_answer = response[start_index:end_index].strip()\n    \n    # 验证1：检查\"关\"是否被正确替换\n    modified_text = original_text.replace(\"关\", \"++关++\")\n    if \"++关++\" not in actual_answer:\n        return {\"check_code\": False, \"reason\": \"未检测到'++关++'替换\"}\n    \n    # 验证2：检查前三个汉字是否移动到末尾\n    # 提取前三个汉字（跳过非汉字字符）\n    first_three_hanzi = \"\"\n    count = 0\n    for char in modified_text:\n        if '\\u4e00' <= char <= '\\u9fff':  # 判断汉字字符\n            first_three_hanzi += char\n            count += 1\n            if count == 3:\n                break\n    \n    if not actual_answer.endswith(first_three_hanzi):\n        return {\"check_code\": False, \"reason\": \"前三个汉字未正确移动到文本末尾\"}\n    \n    # 验证3：检查移动后文本结构\n    # 创建预期结果：移除前三个汉字后拼接至末尾\n    temp_text = modified_text\n    for char in first_three_hanzi:\n        temp_text = temp_text.replace(char, \"\", 1)\n    expected_result = temp_text + first_three_hanzi\n    \n    if actual_answer != expected_result:\n        return {\"check_code\": False, \"reason\": \"最终文本结构与预期不符\"}\n    \n    # 验证4：检查是否存在多余内容\n    if len(actual_answer) != len(expected_result):\n        return {\"check_code\": False, \"reason\": \"响应包含多余字符或缺少必要字符\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "近年来，随着人们生活水平的提高，健康意识逐渐增强，越来越多的人关注到饮食对于健康的影响。食物不仅是填饱肚子的物质基础，更是身体健康的源泉。不同种类的食材和其独特的营养成分，对人体健康产生了各自的影响。例如，富含抗氧化剂的食物能够帮助人体抵御自由基的侵害，延缓衰老；高纤维食物则有助于改善消化系统功能。此外，科学研究也表明，过量摄入高脂肪、高糖分的食物可能导致肥胖、糖尿病等健康问题。因此，合理的饮食搭配和适量的营养摄入对于保持健康至关重要。\n\n\n请撰写一篇关于“健康饮食对生活质量的影响”的文章。请确保文章由8个句子组成（用中文句号分隔）。其中第5个句子必须至少包含15个汉字。请确保文章包含3个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第1段必须至少有50个汉字。请以“健康饮食对于我们每个人都至关重要。”这句话结尾。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查首尾标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少【答案开始】或【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查答案分隔符\n    if \"@@@@@@\" not in content:\n        err_infos.append(\"缺少答案分隔符@@@@@@\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 分割两个答案\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        err_infos.append(\"答案数量不为2\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers, 1):\n        # 检查段落分隔符\n        paragraphs = re.split(r'～～+', ans.strip())\n        if len(paragraphs) != 3:\n            err_infos.append(f\"答案{i}段落数量不为3\")\n            continue\n        \n        # 检查第一段长度\n        first_para = re.sub(r'\\s', '', paragraphs[0])\n        hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', first_para))\n        if hanzi_count < 50:\n            err_infos.append(f\"答案{i}第1段汉字数不足50（实际{hanzi_count}字）\")\n        \n        # 分割句子\n        sentences = re.split(r'[。！？…]+', ans.replace('～～', ''))\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        # 检查总句数\n        if len(sentences) != 8:\n            err_infos.append(f\"答案{i}句子数量不为8（实际{len(sentences)}句）\")\n            continue\n        \n        # 检查第5句长度\n        fifth_sentence = re.sub(r'\\s', '', sentences[4])\n        hanzi_count_5th = len(re.findall(r'[\\u4e00-\\u9fa5]', fifth_sentence))\n        if hanzi_count_5th < 15:\n            err_infos.append(f\"答案{i}第5句汉字数不足15（实际{hanzi_count_5th}字）\")\n        \n        # 检查结尾句\n        if not sentences[-1].endswith(\"健康饮食对于我们每个人都至关重要\"):\n            err_infos.append(f\"答案{i}结尾句不符合要求\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请描述一个日常生活中在公园散步的情景，要求在描述中禁止使用“树木”、“阳光”、“行人”这几个词。请在描述中至少出现三次“宁静”，并且“花香”必须出现两次。“模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。”内容不能出现中文逗号。撰写的文章应由四个段落组成，每个段落之间用'～～'符号分隔。在第三个段落中，必须刚好由四个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查开始结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查答案数量\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量应为2，实际为{len(answers)}\")\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers, 1):\n        # 检查段落分隔符\n        paras = ans.split('～～')\n        if len(paras) != 4:\n            err_infos.append(f\"答案{i}段落数应为4，实际为{len(paras)}\")\n        \n        # 检查第三段落句子数\n        if len(paras) >= 3:\n            sentences = re.split(r'[。？！]', paras[2].strip())\n            sentences = [s for s in sentences if s.strip()]  # 去除空字符串\n            if len(sentences) != 4:\n                err_infos.append(f\"答案{i}第三段应为4句，实际为{len(sentences)}\")\n        \n        # 合并全文检查\n        full_text = ''.join(paras)\n        # 检查禁用词\n        for word in [\"树木\", \"阳光\", \"行人\"]:\n            if word in full_text:\n                err_infos.append(f\"答案{i}包含禁用词'{word}'\")\n        \n        # 检查关键词频率\n        if full_text.count(\"宁静\") < 3:\n            err_infos.append(f\"答案{i}'宁静'出现次数不足3次\")\n        if full_text.count(\"花香\") != 2:\n            err_infos.append(f\"答案{i}'花香'未出现2次\")\n        \n        # 检查中文逗号\n        if \"，\" in full_text:\n            err_infos.append(f\"答案{i}包含中文逗号\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请撰写一篇关于古代建筑设计理念与现代建筑环保融合的文章。文章的每个句子（用中文句号或问号或感叹号分隔）的最后一个字使用“之”字作为结尾。请确保文章标题用$()$标记，如$(xxx)$。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查开始和结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"回答未以【答案开始】开头或【答案结束】结尾\"}\n    \n    # 提取回答内容\n    content = response[len(\"【答案开始】\"): -len(\"【答案结束】\")].strip()\n    \n    # 检查答案分隔符\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案数量错误，应为2个，实际为{len(answers)}个\"}\n    \n    # 验证每个答案\n    err_infos = []\n    for idx, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        \n        # 检查标题标记\n        title_match = re.search(r'\\$\\(.*?\\)\\$', ans)\n        if not title_match:\n            err_infos.append(f\"答案{idx}：缺少$()$标记的标题\")\n            continue\n            \n        # 提取标题并检查后续内容\n        title_end = title_match.end()\n        article_content = ans[title_end:].strip()\n        \n        # 分割句子\n        sentences = re.split(r'[。？！]', article_content)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        # 验证每个句子结尾\n        for s in sentences:\n            if not s:\n                continue\n            if s[-1] != '之':\n                err_infos.append(f\"答案{idx}：句子\\\"{s}\\\"结尾不是'之'字\")\n                break  # 发现一个错误就跳出当前答案检查\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于城市公共交通系统的文章。文章应只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第一个段落中，“地铁”这个词必须刚好出现两次。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。整篇文章必须刚好只由30个句子（用中文句号或问号或感叹号分隔）组成。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义指令要求字符串\n    instruction = \"请写一篇关于城市公共交通系统的文章。文章应只出现4个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。在第一个段落中，“地铁”这个词必须刚好出现两次。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。整篇文章必须刚好只由30个句子（用中文句号或问号或感叹号分隔）组成。\"\n    \n    # 检查响应结构\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"答案未正确使用标记符\"}\n    \n    # 提取答案内容\n    content = response.split(\"【答案开始】\")[1].split(\"【答案结束】\")[0].strip()\n    \n    # 检查是否重复指令要求\n    if not content.startswith(instruction):\n        return {\"check_code\": False, \"reason\": \"未按要求重复指令\"}\n    \n    # 提取实际文章内容\n    article = content[len(instruction):].strip()\n    \n    # 检查段落数量和分隔符\n    paragraphs = [p.strip() for p in article.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量错误，应为4段，实际{len(paragraphs)}段\"}\n    \n    # 检查第一段\"地铁\"出现次数\n    subway_count = paragraphs[0].count(\"地铁\")\n    if subway_count != 2:\n        return {\"check_code\": False, \"reason\": f\"第一段'地铁'出现次数错误，应为2次，实际{subway_count}次\"}\n    \n    # 检查第三段句子数量\n    sentences_para3 = [s.strip() for s in re.split(r'[。？！]', paragraphs[2]) if s.strip()]\n    if len(sentences_para3) != 6:\n        return {\"check_code\": False, \"reason\": f\"第三段句子数量错误，应为6句，实际{len(sentences_para3)}句\"}\n    \n    # 检查总句子数量\n    all_sentences = [s.strip() for s in re.split(r'[。？！]', article) if s.strip()]\n    if len(all_sentences) != 30:\n        return {\"check_code\": False, \"reason\": f\"总句子数量错误，应为30句，实际{len(all_sentences)}句\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在现代城市中，垃圾分类和处理是一个日益重要的环保议题。城市垃圾的迅速增长不仅对环境造成了巨大的压力，也对居民的生活质量产生了影响。许多国家和地区已经开始实施垃圾分类政策，以减少垃圾填埋量、增加资源回收利用率。然而，垃圾分类的推行并非易事，涉及公众意识的提高、基础设施的完善以及政策的严格执行等多个方面。不同类型的垃圾需要不同的处理方式，例如厨余垃圾可以用于堆肥，而塑料则需要特殊的回收处理。研究表明，有效的垃圾分类不仅可以降低环境污染，还可以节约资源，促进可持续发展。因此，了解垃圾分类的原则和实践是每个市民的重要责任。\n\n请撰写一篇关于“垃圾分类对城市生活的改善”的文章。文章中应避免使用“发展”、“政府”、“创新”这三个词。请确保文章由10个句子（用中文句号或问号或感叹号分隔）组成。其中，第4个句子的第3个汉字必须是“环”字。最后，文章需以“环保从我做起。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"答案未包含在指定的标记中\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查句子数量\n    sentences = re.findall(r'.*?[。？！]', content)\n    if len(sentences) != 10:\n        err_infos.append(f\"句子数量为{len(sentences)}而非10个\")\n    \n    # 检查第4句第3个汉字\n    if len(sentences) >= 4:\n        fourth_sentence = sentences[3].strip()\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', fourth_sentence)\n        if len(chinese_chars) < 3:\n            err_infos.append(\"第4句汉字不足3个\")\n        elif chinese_chars[2] != '环':\n            err_infos.append(f\"第4句第3个汉字是'{chinese_chars[2]}'而非'环'\")\n    elif len(sentences) < 4:\n        err_infos.append(\"句子不足4句，无法检查第4句\")\n    \n    # 检查结尾句\n    if len(sentences) > 0:\n        last_sentence = sentences[-1].strip()\n        if last_sentence != \"环保从我做起。\":\n            err_infos.append(f\"结尾句为'{last_sentence}'而非指定内容\")\n    else:\n        err_infos.append(\"未检测到有效句子\")\n    \n    # 检查禁止词\n    forbidden_words = [\"发展\", \"政府\", \"创新\"]\n    for word in forbidden_words:\n        if word in content:\n            err_infos.append(f\"包含禁止词'{word}'\")\n    \n    # 检查主题相关性\n    if \"垃圾分类\" not in content or \"城市生活\" not in content:\n        err_infos.append(\"未包含'垃圾分类'或'城市生活'关键词\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“节能环保新科技的应用”的文章，请在回复中详细解释并列出其中三种主要应用，使用“&应用1&”、“&应用2&”和“&应用3&”作为主要应用的占位符。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。文章的每个句子（用中文句号或问号或感叹号分隔）的最后一个字使用“者”字作为结尾。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查是否包含答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    start_index = response.index(\"【答案开始】\") + 6\n    end_index = response.index(\"【答案结束】\")\n    answer = response[start_index:end_index].strip()\n    \n    # 检查是否重复指令要求\n    required_text = \"请撰写一篇关于“节能环保新科技的应用”的文章，请在回复中详细解释并列出其中三种主要应用，使用“&应用1&”、“&应用2&”和“&应用3&”作为主要应用的占位符。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。文章的每个句子（用中文句号或问号或感叹号分隔）的最后一个字使用“者”字作为结尾。\"\n    if required_text not in answer:\n        err_infos.append(\"未正确重复指令要求\")\n    \n    # 提取实际文章内容（从重复文本后开始）\n    article_start = answer.find(required_text) + len(required_text)\n    article = answer[article_start:].strip()\n    \n    # 检查段落分隔符\n    paragraphs = article.split(\"～～\")\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误，应为4段，实际{len(paragraphs)}段\")\n    \n    # 检查应用占位符\n    placeholders = [\"&应用1&\", \"&应用2&\", \"&应用3&\"]\n    for ph in placeholders:\n        if article.count(ph) != 1:\n            err_infos.append(f\"占位符{ph}缺失或重复出现\")\n    \n    # 检查每个句子的结尾字\n    sentence_endings = set()\n    for para in paragraphs:\n        # 拆分句子（中文章句号、问号、感叹号）\n        sentences = re.split(r'[。？！]', para)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        for s in sentences:\n            if s:  # 非空句子检查\n                last_char = s[-1]\n                sentence_endings.add(last_char)\n                if last_char != \"者\":\n                    err_infos.append(f\"句子结尾错误: '{s}'\")\n    \n    # 返回验证结果\n    if not err_infos:\n        return {\"check_code\": True, \"reason\": \"验证通过\"}\n    else:\n        return {\"check_code\": False, \"reason\": err_infos}"}
{"prompt": "近年来，咖啡文化在全球范围内迅速普及，成为许多人日常生活中不可或缺的一部分。从传统的手冲咖啡到智能化的全自动咖啡机，人们对咖啡的制作方式和品味体验有了更多选择。此外，不同地域的咖啡豆、烘焙方式以及冲泡技巧也呈现出多样化的趋势。这些变化不仅影响了消费者的选择，也推动了咖啡产业链的升级和创新。与此同时，咖啡与健康的关系也成为了研究热点，许多人开始关注咖啡对人体的长期影响。  \n\n请你撰写一篇关于咖啡文化如何影响现代人的生活方式的文章。文章只能出现9个句子，并且每个句子之间用“^”作为分隔符号。请在文章中探讨咖啡的社交功能、对工作的推动作用以及健康影响等方面的内容。请确保文章标题用$()$标记，如$(xxx)$。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查答案开始/结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker):\n        err_infos.append(\"缺少【答案开始】标记\")\n    if not response.endswith(end_marker):\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取核心内容\n    content = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 检查标题格式\n    title_pattern = r\"^\\$\\([^$]*\\)\\$$\"\n    if not re.search(title_pattern, content, re.MULTILINE):\n        err_infos.append(\"标题格式不正确或缺失\")\n    \n    # 检查句子数量\n    if content.count(\"^\") != 8:\n        err_infos.append(f\"句子分隔符数量错误，应为8个分隔符（9个句子），实际为{content.count('^')}个\")\n    \n    # 检查多余内容\n    clean_content = re.sub(r\"\\$\\(.*?\\)\\$\", \"\", content)  # 移除标题\n    parts = clean_content.split(\"^\")\n    non_sentence_parts = [p.strip() for p in parts if p.strip() and not p.strip().endswith(('.', '。', '!', '！', '?', '？'))]\n    if non_sentence_parts:\n        err_infos.append(f\"检测到{len(non_sentence_parts)}处非句子内容\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "将下面的诗句中所有音调为第一声的字替换为“*”，再将所有笔画为4画的字替换为“#”，同时调换第二句诗和第三句诗的顺序（一句诗以句号作为分隔符），直接返回修改后的文本，不要出现其他多余的内容。\n\n风急天高猿啸哀，渚清沙白鸟飞回。无边落木萧萧下，不尽长江滚滚来。万里悲秋常作客，百年多病独登台。艰难苦恨繁霜鬓，潦倒新停浊酒杯。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 定义第一声字和4画字的硬编码字典（基于原诗）\n    tone1_dict = {\n        '风': True, '天': True, '高': True, '哀': True, '清': True, '飞': True,\n        '边': True, '萧': True, '江': True, '秋': True, '多': True, '登': True,\n        '艰': True, '霜': True, '新': True, '杯': True, '沙': True\n    }\n    stroke4_dict = {\n        '无': 4, '不': 4, '木': 4, '长': 4, '天': 4, '风': 4\n    }\n    \n    # 原诗处理过程\n    s = \"风急天高猿啸哀，渚清沙白鸟飞回。无边落木萧萧下，不尽长江滚滚来。万里悲秋常作客，百年多病独登台。艰难苦恨繁霜鬓，潦倒新停浊酒杯。\"\n    # 第一声替换\n    s_tone = ''.join('*' if '\\u4e00' <= char <= '\\u9fff' and tone1_dict.get(char, False) else char for char in s)\n    # 4画替换（跳过已替换的*）\n    s_stroke = ''.join('#' if '\\u4e00' <= char <= '\\u9fff' and char != '*' and stroke4_dict.get(char, 0) == 4 else char for char in s_tone)\n    # 分句调换\n    sentences = [sent for sent in s_stroke.split('。') if sent]\n    if len(sentences) >= 3:\n        sentences[1], sentences[2] = sentences[2], sentences[1]\n    correct_answer = '。'.join(sentences) + '。'\n    \n    # 提取response中的答案\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or end_idx <= start_idx:\n        return {\"check_code\": False, \"reason\": \"答案标记缺失或格式错误\"}\n    \n    start_idx += len(start_marker)\n    answer_text = response[start_idx:end_idx].strip()\n    \n    # 验证答案\n    if answer_text == correct_answer:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": f\"答案不匹配，预期:{correct_answer}，实际:{answer_text}\"}"}
{"prompt": "在现代社会中，个人理财已经成为了每个人生活中不可或缺的一部分。无论是储蓄、投资还是消费，都需要合理的规划和管理。近年来，随着互联网金融的发展，越来越多的理财产品和工具涌现，为人们提供了更多的选择和便利。然而，如何在众多选择中找到适合自己的理财方式，仍然是一个值得探讨的问题。\n\n请撰写一篇关于“现代个人理财策略”的文章。文章内容请避免出现“股票”、“基金”、“保险”这三个词语。文章长度要求至少200字，至多400字。请确保文章共4个段落，每个段落用两个换行符“\n\n”分隔开来。第三个句子要求以“在日常生活中”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or end_idx <= start_idx:\n        return {\"check_code\": False, \"reason\": \"未找到答案标记\"}\n    \n    content = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 验证1: 禁止词汇检查\n    forbidden_words = [\"股票\", \"基金\", \"保险\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        return {\"check_code\": False, \"reason\": f\"包含禁止词汇: {', '.join(found_words)}\"}\n    \n    # 验证2: 字数检查 (200-400字)\n    char_count = len(content)\n    if char_count < 200 or char_count > 400:\n        return {\"check_code\": False, \"reason\": f\"字数不符({char_count}字)\"}\n    \n    # 验证3: 段落结构检查\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量不符({len(paragraphs)}段)\"}\n    \n    # 验证4: 第三个句子检查\n    sentences = re.split(r'[。？！]', content)  # 按标点分句\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    if len(sentences) < 3:\n        return {\"check_code\": False, \"reason\": \"总句数不足3句\"}\n    \n    if not sentences[2].startswith(\"在日常生活中\"):\n        return {\"check_code\": False, \"reason\": f\"第三句不以指定内容开头: '{sentences[2][:10]}...'\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "首先，将下列文本的标点符号全部删除；然后，再将上一步修改过的文本中的文字按照每10个汉字组成一个部分，每个部分之间用“@@”分隔，如果分隔到最后汉字数量不够，将剩下的汉字组成一个部分即可；最后，将上一步修改过的文本中的开头3个汉字和最后3个汉字互换位置，保持原来的汉字先后顺序不变。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n电影剪辑是一门艺术，通过对影像和声音的组合，电影剪辑师能够创造出一个连贯且富有感染力的视觉体验。剪辑是电影制作过程中的重要环节，影响着电影的节奏、情感和叙事效果。电影剪辑师需要具备敏锐的观察力和丰富的想象力，以选择最佳的镜头和声音组合，创造出引人入胜的情节和鲜活的人物形象。优秀的电影剪辑不仅能够增强观众的观影体验，还能够传递深刻的思想和情感，使观众在视觉享受中领悟电影的艺术价值。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    # 检查标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"missing start tag\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"missing end tag\")\n    \n    if errors:  # 标记错误直接返回\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取实际答案\n    actual_answer = response[len(\"【答案开始】\"):-len(\"【答案开始】\")].strip()\n    \n    # 原始文本\n    text = \"电影剪辑是一门艺术，通过对影像和声音的组合，电影剪辑师能够创造出一个连贯且富有感染力的视觉体验。剪辑是电影制作过程中的重要环节，影响着电影的节奏、情感和叙事效果。电影剪辑师需要具备敏锐的观察力和丰富的想象力，以选择最佳的镜头和声音组合，创造出引人入胜的情节和鲜活的人物形象。优秀的电影剪辑不仅能够增强观众的观影体验，还能够传递深刻的思想和情感，使观众在视觉享受中领悟电影的艺术价值。\"\n    \n    # 处理步骤1: 删除所有非汉字字符\n    clean_text = re.sub(r'[^一-龥]', '', text)\n    \n    # 处理步骤2: 每10个汉字分组并用@@连接\n    segments = [clean_text[i:i+10] for i in range(0, len(clean_text), 10)]\n    grouped_text = \"@@\".join(segments)\n    \n    # 处理步骤3: 交换开头3个和最后3个汉字\n    if len(grouped_text) < 6:\n        processed_text = grouped_text\n    else:\n        processed_text = grouped_text[-3:] + grouped_text[3:-3] + grouped_text[:3]\n    \n    # 验证答案内容\n    if actual_answer != processed_text:\n        errors.append(\"incorrect content\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }\n"}
{"prompt": "请描述一下家庭智能化系统和传统家居系统的特点。要求描述恰好为15个句子（用中文句号或问号或感叹号分隔），并且每个句子至少9个汉字，最多20个汉字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查开头和结尾标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker):\n        errors.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(end_marker):\n        errors.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取答案内容\n    content = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 检查答案分隔符\n    parts = re.split(r'@@@@@@', content)\n    if len(parts) != 2:\n        errors.append(f\"答案分隔符错误：需要2个答案，实际得到{len(parts)}个\")\n    else:\n        # 验证每个答案\n        for i, part in enumerate(parts, 1):\n            part = part.strip()\n            # 分割句子\n            sentences = re.split(r'[。？！]', part)\n            sentences = [s.strip() for s in sentences if s.strip()]\n            \n            # 检查句子数量\n            if len(sentences) != 15:\n                errors.append(f\"答案{i}句子数量错误：需要15句，实际{len(sentences)}句\")\n            \n            # 检查每句长度\n            for j, sent in enumerate(sentences, 1):\n                hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', sent))\n                if hanzi_count < 9:\n                    errors.append(f\"答案{i}第{j}句字数不足：{hanzi_count}个汉字（需≥9）\")\n                if hanzi_count > 20:\n                    errors.append(f\"答案{i}第{j}句字数超限：{hanzi_count}个汉字（需≤20）\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"；\".join(errors) if errors else \"\"\n    }"}
{"prompt": "在全球范围内，古老的建筑风格和手工艺品正在逐渐消失。这些建筑和工艺品是历史和文化的重要组成部分，能够帮助我们了解过去的生活方式和艺术美学。然而，由于现代化建设和技术的普及，许多传统建筑材料和工艺逐渐被更便捷、更经济的替代品所取代。在保护传统文化方面，世界各地已经有许多成功的案例，例如西班牙阿尔汉布拉宫的细致修复工程，以及日本京都古街区的保护措施。通过这些案例，我们可以看到传统技艺和现代技术相结合的潜力。\n\n请撰写一篇关于“传统建筑与现代技术融合”的文章，探讨传统建筑在现代社会中的重要性，并尝试提出至少三种可以促进传统建筑与现代技术融合的具体方法。请确保文章恰好由11个句子（用中文句号或问号或感叹号分隔）组成。其中第5个句子的第8个汉字必须是“艺”字，第8个句子至少12个汉字。要求文章中“工艺”一词至少出现2次，“保护”一词只出现2次，“文化”一词至少出现3次。请在回复中详细解释并列出其中三种主要方法，使用“&方法1&”、“&方法2&”和“&方法3&”作为主要原因的占位符。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    err_infos = []\n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        return {\"check_code\": False, \"reason\": \"答案标记缺失或位置错误\"}\n    \n    content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 分割句子\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    # 验证11个句子\n    if len(sentences) != 11:\n        err_infos.append(f\"需要11个句子，实际{len(sentences)}个\")\n    \n    # 验证第5句第8字是\"艺\"\n    if len(sentences) >= 5:\n        fifth_sent = sentences[4]\n        if len(fifth_sent) < 8 or fifth_sent[7] != \"艺\":\n            err_infos.append(\"第5句第8字不是'艺'\")\n    else:\n        err_infos.append(\"第5句缺失\")\n    \n    # 验证第8句长度\n    if len(sentences) >= 8:\n        eighth_sent = sentences[7]\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', eighth_sent)\n        if len(chinese_chars) < 12:\n            err_infos.append(f\"第8句仅{len(chinese_chars)}个汉字，需要至少12个\")\n    else:\n        err_infos.append(\"第8句缺失\")\n    \n    # 验证关键词频率\n    word_counts = Counter(re.findall(r'\\w+', content))\n    if word_counts.get(\"工艺\", 0) < 2:\n        err_infos.append(f\"'工艺'出现{word_counts.get('工艺',0)}次，需要至少2次\")\n    if word_counts.get(\"保护\", 0) != 2:\n        err_infos.append(f\"'保护'出现{word_counts.get('保护',0)}次，需要恰好2次\")\n    if word_counts.get(\"文化\", 0) < 3:\n        err_infos.append(f\"'文化'出现{word_counts.get('文化',0)}次，需要至少3次\")\n    \n    # 验证方法占位符\n    if \"&方法1&\" not in content:\n        err_infos.append(\"缺失&方法1&占位符\")\n    if \"&方法2&\" not in content:\n        err_infos.append(\"缺失&方法2&占位符\")\n    if \"&方法3&\" not in content:\n        err_infos.append(\"缺失&方法3&占位符\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"所有条件满足\"\n    }"}
{"prompt": "请写一篇关于传统节日的文章，文章以“在我看来”这几个字开头。文章只能包含18个句子（用中文句号或问号或感叹号分隔）。文章需详细解释并列出其中三种主要习俗，使用“【习俗1】”、“【习俗2】”和“【习俗3】”作为主要习俗的占位符。此外，文章中避免使用“现代”、“流行”、“创新”这几个词，文章的每个句子（用中文句号或问号或感叹号分隔）至少19个字，最多24个字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 提取答案内容\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    start_idx = response.find(start_tag)\n    end_idx = response.find(end_tag)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        errors.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    content = response[start_idx + len(start_tag):end_idx].strip()\n    \n    # 检查开头\n    if not content.startswith(\"在我看来\"):\n        errors.append(\"开头缺少'在我看来'\")\n    \n    # 检查句子数量\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 18:\n        errors.append(f\"句子数量为{len(sentences)}而非18\")\n    \n    # 检查句子长度\n    all_sentences = re.findall(r'[^。？！]*[。？！]', content)\n    for i, s in enumerate(all_sentences):\n        s_clean = s.strip()\n        if s_clean:\n            length = len(s_clean)\n            if length < 19 or length > 24:\n                errors.append(f\"第{i+1}句长度{length}不符合要求\")\n    \n    # 检查习俗标记\n    for marker in [\"【习俗1】\", \"【习俗2】\", \"【习俗3】\"]:\n        if marker not in content:\n            errors.append(f\"缺少{marker}\")\n    \n    # 检查禁用词\n    forbidden_words = [\"现代\", \"流行\", \"创新\"]\n    for word in forbidden_words:\n        if word in content:\n            errors.append(f\"包含禁用词'{word}'\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \";\".join(errors) if errors else \"\"\n    }"}
{"prompt": "请详细描述一个创新型绿色科技项目，该项目旨在减少城市家庭的碳足迹。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    # 定义预期的指令要求字符串\n    instruction_str = \"请详细描述一个创新型绿色科技项目，该项目旨在减少城市家庭的碳足迹。\"\n    # 检查基本标记结构\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案未使用指定标记包裹\"}\n    \n    # 提取标记间内容并统一换行符\n    content = response[7:-7].strip()\n    \n    # 检查重复指令部分\n    if not content.startswith(instruction_str):\n        return {\"check_code\": False, \"reason\": \"指令重复不完整\"}\n    \n    # 检查答案部分是否存在\n    answer_part = content[len(instruction_str):].strip()\n    if not answer_part:\n        return {\"check_code\": False, \"reason\": \"缺失项目描述内容\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于“现代城市交通挑战”的文章。文章需包含以下特定要求：  \n1. 在文章中必须包含“智能交通”和“环保出行”这两个词语。  \n2. 文章应由5个段落（不要出现标题）组成，并且每个段落之间用'～～'符号分隔。其中第3段必须有至少150个汉字。  \n3. 文章总共应有12个句子，并且每个句子之间用okkjs这串英文作为分隔符号\n4. 模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 初始化验证结果\n    err_infos = []\n    \n    # 检查起始结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查答案分隔符\n    if \"@@@@@@\" not in content:\n        err_infos.append(\"缺少答案分隔符\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 分割两个答案\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量错误: 需要2个, 实际{len(answers)}个\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        local_errors = []\n        \n        # 检查关键词\n        if \"智能交通\" not in ans:\n            local_errors.append(f\"答案{idx}缺少'智能交通'\")\n        if \"环保出行\" not in ans:\n            local_errors.append(f\"答案{idx}缺少'环保出行'\")\n        \n        # 检查段落结构\n        paragraphs = ans.split(\"～～\")\n        if len(paragraphs) != 5:\n            local_errors.append(f\"答案{idx}段落数量错误: 需要5段, 实际{len(paragraphs)}段\")\n        \n        # 检查第三段长度\n        if len(paragraphs) >= 3:\n            chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', paragraphs[2])\n            if len(chinese_chars) < 150:\n                local_errors.append(f\"答案{idx}第三段汉字不足150字(实际{len(chinese_chars)}字)\")\n        \n        # 检查句子数量和分隔符\n        sentences = ans.split(\"okkjs\")\n        if len(sentences) != 12:\n            local_errors.append(f\"答案{idx}句子数量错误: 需要12句, 实际{len(sentences)}句\")\n        \n        # 检查分隔符使用\n        if \"okkjs\" not in ans:\n            local_errors.append(f\"答案{idx}缺少句子分隔符'okkjs'\")\n        \n        # 检查多余分隔符\n        if len(paragraphs) == 5:\n            for i, para in enumerate(paragraphs):\n                if \"～～\" in para:\n                    local_errors.append(f\"答案{idx}第{i+1}段包含多余段落分隔符\")\n        \n        # 汇总当前答案错误\n        if local_errors:\n            err_infos.extend(local_errors)\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请撰写一篇关于“人工智能在医疗领域的应用”的文章。文章应只出现8个段落，每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“数据”这个词务必至少出现五次。确保第三个段落不含任何标点符号。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    import string\n    \n    # 定义标点符号集合（包括中英文标点）\n    punctuations = set(string.punctuation + '，。？！；：“”‘’（）【】《》')\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        return {\"check_code\": False, \"reason\": \"Missing start marker 【答案开始】\"}\n    if not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"Missing end marker 【答案结束】\"}\n    \n    # 提取答案内容\n    content = response[6:-6].strip()  # 去除【答案开始】和【答案结束】\n    \n    # 检查答案分隔符\n    parts = content.split(\"******\")\n    if len(parts) != 2:\n        return {\"check_code\": False, \"reason\": f\"Expected 2 answers separated by ******, found {len(parts)} parts\"}\n    \n    errors = []\n    for ans_idx, answer in enumerate(parts):\n        # 检查段落分隔\n        paragraphs = [p.strip() for p in answer.split(\"\\n\\n\") if p.strip()]\n        \n        # 验证段落数量\n        if len(paragraphs) != 8:\n            errors.append(f\"Answer {ans_idx+1}: Expected 8 paragraphs, got {len(paragraphs)}\")\n            continue\n        \n        # 检查第二段\"数据\"出现次数\n        data_count = paragraphs[1].count(\"数据\")\n        if data_count < 5:\n            errors.append(f\"Answer {ans_idx+1}: Second paragraph needs ≥5 '数据', found {data_count}\")\n        \n        # 检查第三段标点符号\n        third_para = paragraphs[2].replace(\" \", \"\").replace(\"\\n\", \"\")\n        if any(char in punctuations for char in third_para):\n            errors.append(f\"Answer {ans_idx+1}: Third paragraph contains punctuation\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于城市交通拥堵问题的分析报告，报告应由4个段落（不要出现标题）组成，每个段落之间用'～～'符号分隔。在第二个段落中，“公共交通”这个词必须出现两次。此外，报告的整体字数应不超过100个汉字，并以“城市规划需改进。”这句话结尾。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    err_infos = []\n    \n    # 检查首尾标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 分割答案\n    answers = [ans.strip() for ans in content.split('@@@@@@') if ans.strip()]\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量应为2个，实际为{len(answers)}个\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    for idx, ans in enumerate(answers, 1):\n        # 检查结尾\n        if not ans.endswith(\"城市规划需改进。\"):\n            err_infos.append(f\"答案{idx}结尾错误\")\n        \n        # 分割段落\n        paragraphs = [p.strip() for p in ans.split('～～') if p.strip()]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{idx}段落数量错误\")\n            continue  # 跳过后续检查\n        \n        # 检查第二段\"公共交通\"出现次数\n        pub_count = paragraphs[1].count(\"公共交通\")\n        if pub_count < 2:\n            err_infos.append(f\"答案{idx}第二段'公共交通'出现{pub_count}次(需≥2次)\")\n        \n        # 统计汉字字数\n        hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', ans))\n        if hanzi_count > 100:\n            err_infos.append(f\"答案{idx}汉字数{hanzi_count}>100\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"所有条件满足\"\n    }"}
{"prompt": "请描述一个山间小村的日常生活场景，要求描绘村民的活动和自然环境。请确保文章恰好由11个句子组成，每个句子用“^”符号分隔。要求文章必须出现“炊烟”、“溪流”两个词语。要求文章中不允许出现“现代化”、“技术革新”两个词语。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查开始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少开始标记\")\n    if \"【答案结束】\" not in response:\n        errors.append(\"缺少结束标记\")\n    \n    # 提取答案内容\n    start_pos = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_pos = response.find(\"【答案结束】\")\n    if start_pos < 0 or end_pos < 0 or end_pos <= start_pos:\n        errors.append(\"标记提取失败\")\n        return {\"check_code\": False, \"reason\": \"|\".join(errors)}\n    \n    content = response[start_pos:end_pos].strip()\n    \n    # 检查禁用词\n    forbidden_words = [\"现代化\", \"技术革新\"]\n    for word in forbidden_words:\n        if word in content:\n            errors.append(f\"包含禁用词'{word}'\")\n    \n    # 检查必含词\n    required_words = [\"炊烟\", \"溪流\"]\n    for word in required_words:\n        if word not in content:\n            errors.append(f\"缺少必含词'{word}'\")\n    \n    # 检查句子数量和分隔符\n    sentences = [k for k in content.split('^') if k.strip()]\n    if len(sentences) != 11:\n        errors.append(f\"句子数量为{len(sentences)}而非11\")\n    elif any(sentence.strip() == \"\" for sentence in sentences):\n        errors.append(\"存在空句子\")\n    \n    # 返回验证结果\n    if errors:\n        return {\"check_code\": False, \"reason\": \"|\".join(errors)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "将下列文本中的“通”字全部替换为“和”字；最后，将上一步修改过的文本中的第7个汉字和第15个汉字互换位置。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n在职场中，沟通技巧是影响职业发展的一大因素，有效沟通有助于建立良好的人际关系和团队氛围。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 预定义正确结果\n    original_text = \"在职场中，沟通技巧是影响职业发展的一大因素，有效沟通有助于建立良好的人际关系和团队氛围。\"\n    step1_text = original_text.replace(\"通\", \"和\")\n    # 提取所有汉字位置\n    hanzi_positions = [m.start() for m in re.finditer(r'[\\u4e00-\\u9fa5]', step1_text)]\n    # 确保有足够汉字进行交换\n    if len(hanzi_positions) < 15:\n        correct_text = step1_text\n    else:\n        text_list = list(step1_text)\n        # 交换第7和第15个汉字（索引6和14）\n        pos7, pos15 = hanzi_positions[6], hanzi_positions[14]\n        text_list[pos7], text_list[pos15] = text_list[pos15], text_list[pos7]\n        correct_text = ''.join(text_list)\n    \n    # 验证回答格式\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    if not response.startswith(start_marker) or not response.endswith(end_marker):\n        return {\"check_code\": False, \"reason\": \"答案标记缺失或错误\"}\n    \n    # 提取答案内容\n    content = response[len(start_marker):-len(end_marker)]\n    \n    # 检查是否包含多余内容\n    if content != content.strip():\n        return {\"check_code\": False, \"reason\": \"答案包含首尾空白字符\"}\n    if '\\n' in content:\n        return {\"check_code\": False, \"reason\": \"答案包含换行符\"}\n    \n    # 验证内容是否正确\n    if content == correct_text:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": f\"内容不符，预期:{correct_text}，实际:{content}\"}"}
{"prompt": "请列出五种常见的烹饪技巧，并要求回答严格按照 Markdown 格式，不包含任何非 Markdown 格式的内容。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    err_infos = []\n    \n    # 检查标记完整性\n    if not response.startswith(start_marker):\n        err_infos.append(\"开头缺少【答案开始】标记\")\n    if not response.endswith(end_marker):\n        err_infos.append(\"结尾缺少【答案结束】标记\")\n    \n    # 提取内容区域\n    content = \"\"\n    if response.startswith(start_marker) and response.endswith(end_marker):\n        content = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 检查内容格式\n    if content:\n        # 验证是否包含非Markdown内容\n        if re.search(r'[^\\d\\.\\s\\-*\\n#>\\[]', content.replace(' ', '')):\n            err_infos.append(\"包含非Markdown格式字符\")\n        \n        # 验证列表结构\n        list_items = re.findall(r'^\\d+\\.\\s+(.+)$', content, re.MULTILINE)\n        if len(list_items) != 5:\n            err_infos.append(f\"列表项数量应为5个，实际{len(list_items)}个\")\n        elif not all(items.strip() for items in list_items):\n            err_infos.append(\"存在空列表项\")\n    else:\n        err_infos.append(\"内容区域为空\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"；\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "首先，将下列文本中的“法”字全部替换为“和”字；然后，再将上一步修改过的文本中第5个句子的汉字和标点符号按照倒序排列；最后，将上一步修改过的文本中的开头2个汉字和最后2个汉字互换位置，保持原来的汉字先后顺序不变。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n商鞅变法非一帆风顺，其间触动无数旧贵族之利益。太子傅公子虔与公孙贾犯法，商鞅坚持王子犯法与庶民同罪，对二人处以刑罚，太子亦受牵连。此举虽震慑了反对势力，但也为商鞅个人埋下祸根。秦孝公薨逝，太子即位，是为秦惠文王。先前受过刑罚之公子虔等人趁机诬告商鞅谋反。商鞅虽有不世之功，然终因变法过于严苛，树敌太多，而未得善终，遭车裂之刑。然其所创立之法度，并未因其身死而废除。秦国后世君主深刻认识到变法对国家强盛之重要性，故萧规曹随，继续推行商鞅之策。秦国凭借变法所奠定之坚实基础，国力蒸蒸日上，农业兴盛，军力强悍，最终得以扫灭六国，一统天下，开创中国历史上首个大一统封建王朝。商鞅虽死，其法犹存，其对秦国乃至中国历史之深远影响，不可估量。其变法精神与制度创设，为后世诸多改革提供了借鉴与启示，亦引发了关于法治与人治、德治与刑治之长久思辨。诚然，商鞅变法带有浓厚之法家色彩，强调以法为教，以吏为师，其严刑峻法、忽视教化之弊端亦不容忽视。但在特定历史时期，其雷厉风行之改革手段，确为秦国摆脱积弱、实现国富民强进而统一天下奠定了无可替代之基石。其功绩彪炳史册，虽有争议，却不掩其作为伟大改革家之历史地位。秦国之崛起非偶然，乃是顺应历史发展潮流、勇于变革之必然结果，而商鞅正是这场伟大变革之核心设计者与坚定推动者。其历史功过自有后人评说，然其对中国历史进程之塑造作用，毋庸置疑，深刻影响了后续王朝之制度构建与治理模式。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 定义原始文本\n    original_text = \"商鞅变法非一帆风顺，其间触动无数旧贵族之利益。太子傅公子虔与公孙贾犯法，商鞅坚持王子犯法与庶民同罪，对二人处以刑罚，太子亦受牵连。此举虽震慑了反对势力，但也为商鞅个人埋下祸根。秦孝公薨逝，太子即位，是为秦惠文王。先前受过刑罚之公子虔等人趁机诬告商鞅谋反。商鞅虽有不世之功，然终因变法过于严苛，树敌太多，而未得善终，遭车裂之刑。然其所创立之法度，并未因其身死而废除。秦国后世君主深刻认识到变法对国家强盛之重要性，故萧规曹随，继续推行商鞅之策。秦国凭借变法所奠定之坚实基础，国力蒸蒸日上，农业兴盛，军力强悍，最终得以扫灭六国，一统天下，开创中国历史上首个大一统封建王朝。商鞅虽死，其法犹存，其对秦国乃至中国历史之深远影响，不可估量。其变法精神与制度创设，为后世诸多改革提供了借鉴与启示，亦引发了关于法治与人治、德治与刑治之长久思辨。诚然，商鞅变法带有浓厚之法家色彩，强调以法为教，以吏为师，其严刑峻法、忽视教化之弊端亦不容忽视。但在特定历史时期，其雷厉风行之改革手段，确为秦国摆脱积弱、实现国富民强进而统一天下奠定了无可替代之基石。其功绩彪炳史册，虽有争议，却不掩其作为伟大改革家之历史地位。秦国之崛起非偶然，乃是顺应历史发展潮流、勇于变革之必然结果，而商鞅正是这场伟大变革之核心设计者与坚定推动者。其历史功过自有后人评说，然其对中国历史进程之塑造作用，毋庸置疑，深刻影响了后续王朝之制度构建与治理模式。\"\n    \n    # 步骤1: 将\"法\"替换为\"和\"\n    step1_text = original_text.replace(\"法\", \"和\")\n    \n    # 步骤2: 分句并处理第5个句子\n    sentences = re.findall(r'[^。]+。', step1_text)  # 按句号分句并保留句号\n    if len(sentences) < 5:\n        return {\"check_code\": False, \"reason\": \"分句后不足5个句子\"}\n    sentences[4] = sentences[4][::-1]  # 第5个句子倒序\n    step2_text = ''.join(sentences)\n    \n    # 步骤3: 交换开头2个字符和最后2个字符\n    if len(step2_text) < 4:\n        return {\"check_code\": False, \"reason\": \"文本长度不足4个字符\"}\n    step3_text = step2_text[-2:] + step2_text[2:-2] + step2_text[:2]\n    \n    # 提取response中的实际答案\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1:\n        return {\"check_code\": False, \"reason\": \"缺少答案标记\"}\n    \n    actual_answer = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 验证答案是否匹配\n    if actual_answer == step3_text:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": \"答案内容不匹配\"}"}
{"prompt": "在科技飞速发展的时代，计算机编程已经成为许多职业的核心技能。然而，编程语言的多样性和复杂性可能让初学者感到无从下手。Python作为一种高效且易学的编程语言，因其简洁的语法和广泛的应用领域而受到欢迎。Python不仅适用于数据分析、机器学习和人工智能，还在网络开发和自动化任务中表现出色。其庞大的社区和丰富的第三方库为开发者提供了强大的支持。掌握Python将为您打开多种职业发展的可能性。\n\n请撰写一篇关于Python编程语言在现代职业中的重要性及其应用领域的文章。文章应包含4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔。在第二段中，“Python”这个词务必至少出现两次。要求文章的每个句子（用中文句号或问号或感叹号分隔）至少12个字，且文章必须以“因此，Python是一个值得学习的语言。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    reason_list = []\n    \n    # 检查标记是否完整\n    if not response.startswith(\"【答案开始】\"):\n        reason_list.append(\"回答没有以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        reason_list.append(\"回答没有以【答案结束】结尾\")\n    \n    # 提取答案内容\n    if reason_list:\n        return {\"check_code\": False, \"reason\": reason_list}\n    \n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查段落数量\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 4:\n        reason_list.append(f\"段落数量为{len(paragraphs)}而不是4\")\n    \n    # 检查第二段Python出现次数\n    if len(paragraphs) >= 2:\n        if paragraphs[1].count(\"Python\") < 2:\n            reason_list.append(\"第二段中'Python'出现次数不足2次\")\n    else:\n        reason_list.append(\"缺少第二段内容\")\n    \n    # 检查结尾语句\n    if not content.endswith(\"因此，Python是一个值得学习的语言。\"):\n        reason_list.append(\"文章没有以指定句子结尾\")\n    \n    # 检查句子长度\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    for i, sent in enumerate(sentences):\n        # 移除所有标点符号后计算字符数\n        clean_sent = re.sub(r'[^\\w\\s]', '', sent)\n        char_count = len(clean_sent.replace(\" \", \"\"))\n        \n        if char_count < 12:\n            reason_list.append(f\"第{i+1}个句子'{sent[:20]}...'只有{char_count}个有效字符\")\n    \n    return {\n        \"check_code\": len(reason_list) == 0,\n        \"reason\": reason_list\n    }"}
{"prompt": "请撰写一篇关于如何有效管理时间的文章，并以“时间管理”这四个字开头。请确保文章的每个句子（用中文句号或问号或感叹号分隔）至少15个字。在文章中详细解释并列出其中三种主要方法，使用“【方法1】”、“【方法2】”和“【方法3】”作为主要方法的占位符。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 定义原始指令\n    original_instruction = (\n        \"请撰写一篇关于如何有效管理时间的文章，并以“时间管理”这四个字开头。\"\n        \"请确保文章的每个句子（用中文句号或问号或感叹号分隔）至少15个字。\"\n        \"在文章中详细解释并列出其中三种主要方法，使用“【方法1】”、“【方法2】”和“【方法3】”作为主要方法的占位符。\"\n        \"模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\"\n    )\n    \n    # 检查指令重复\n    if not content.startswith(original_instruction):\n        err_infos.append(\"未一字不差重复原始指令\")\n    \n    # 获取答案部分\n    answers_section = content[len(original_instruction):].strip()\n    if not answers_section:\n        err_infos.append(\"答案部分缺失\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 分割两个答案\n    answers = answers_section.split(\"******\")\n    if len(answers) != 2:\n        err_infos.append(f\"答案分隔符错误，应使用******分隔两个答案，实际找到{len(answers)-1}个分隔符\")\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        # 检查开头\n        if not ans.startswith(\"时间管理\"):\n            err_infos.append(f\"答案{i}未以'时间管理'开头\")\n        \n        # 检查方法标记\n        for method in [\"【方法1】\", \"【方法2】\", \"【方法3】\"]:\n            if method not in ans:\n                err_infos.append(f\"答案{i}缺少{method}标记\")\n        \n        # 检查句子长度\n        sentences = re.split(r'[。？！]', ans)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        for j, sent in enumerate(sentences, 1):\n            if len(sent) < 15:\n                err_infos.append(f\"答案{i}第{j}句不足15字: '{sent}'\")\n    \n    return {\"check_code\": len(err_infos)==0, \"reason\": err_infos}"}
{"prompt": "请你撰写一篇关于学习效率提升的文章。要求文章中不允许出现“成功”、“诀窍”、“简单”三个词语。要求第3个句子以“在实际操作中”开头.\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取正文内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查禁用词\n    forbidden_words = [\"成功\", \"诀窍\", \"简单\"]\n    for word in forbidden_words:\n        if word in content:\n            err_infos.append(f\"包含禁用词'{word}'\")\n    \n    # 分句检查\n    sentences = [s.strip() for s in re.split(r'[。？！…]', content) if s.strip()]\n    if len(sentences) < 3:\n        err_infos.append(\"句子数量不足3句\")\n    else:\n        if not sentences[2].startswith(\"在实际操作中\"):\n            err_infos.append(\"第3句未以'在实际操作中'开头\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于传统节日的文章，要求文章中每个句子（用中文句号或问号或感叹号分隔）至少17个字，最多22个字。文章中必须包含“团圆”、“节日气氛”两个词语，并且不允许出现“现代化”、“高科技”这两个词语。文章的第一个句子（用中文句号或问号或感叹号分隔）以“每逢佳节”开头，第四个句子（用中文句号或问号或感叹号分隔）以“这让人感到温暖”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response or end_marker not in response:\n        return {\"check_code\": False, \"reason\": \"答案格式错误\"}\n    \n    try:\n        content = response.split(start_marker)[1].split(end_marker)[0].strip()\n    except IndexError:\n        return {\"check_code\": False, \"reason\": \"答案提取失败\"}\n    \n    if not content:\n        return {\"check_code\": False, \"reason\": \"答案内容为空\"}\n    \n    # 分割句子（保留结束标点）\n    parts = re.split(r'([。？！])', content)\n    sentences = []\n    i = 0\n    while i < len(parts) - 1:\n        if not parts[i].strip() and parts[i+1] in ['。', '？', '！']:\n            i += 2\n            continue\n        if parts[i].strip():\n            sentence = parts[i] + parts[i+1]\n            sentences.append(sentence)\n            i += 2\n        else:\n            i += 1\n    \n    # 验证条件\n    errors = []\n    \n    # 1. 句子数量验证\n    if len(sentences) < 4:\n        errors.append(\"句子数量不足4句\")\n    \n    # 2. 句子长度验证（去除空格）\n    len_errors = []\n    for idx, sent in enumerate(sentences):\n        cleaned = re.sub(r'\\s', '', sent)\n        if not (17 <= len(cleaned) <= 22):\n            len_errors.append(str(idx+1))\n    if len_errors:\n        errors.append(f\"句子长度错误：{','.join(len_errors)}\")\n    \n    # 3. 关键词检查\n    if \"团圆\" not in content:\n        errors.append(\"缺少'团圆'\")\n    if \"节日气氛\" not in content:\n        errors.append(\"缺少'节日气氛'\")\n    \n    # 4. 禁用词检查\n    if \"现代化\" in content:\n        errors.append(\"包含'现代化'\")\n    if \"高科技\" in content:\n        errors.append(\"包含'高科技'\")\n    \n    # 5. 首句开头验证\n    if sentences:\n        first_clean = sentences[0].lstrip()\n        if not first_clean.startswith('每逢佳节'):\n            errors.append(\"首句开头错误\")\n    else:\n        errors.append(\"无有效句子\")\n    \n    # 6. 第四句结尾验证\n    if len(sentences) >= 4:\n        fourth = sentences[3]\n        if not (fourth.endswith('这让人感到温暖。') or \n                fourth.endswith('这让人感到温暖？') or \n                fourth.endswith('这让人感到温暖！')):\n            errors.append(\"第四句结尾错误\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \";\".join(errors) if errors else \"\"\n    }"}
{"prompt": "请写一篇关于一个你向往的海岛度假胜地的文章，文章应包括详细的描述，但禁止使用“奢华”、“豪华”、“五星级”这几个词。文章长度应在200到400字之间。文章只能有4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“海滩”这个词务必至少出现两次。文章的第三个句子应以‘让人心旷神怡’结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始结束标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容\n    start = response.find(\"【答案开始】\") + 6\n    end = response.find(\"【答案结束】\")\n    content = response[start:end].strip()\n    \n    # 检查段落结构\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误（要求4段，实际{len(paragraphs)}段）\")\n    \n    # 检查字数限制\n    char_count = len(re.sub(r'\\s', '', content))  # 去除空白字符\n    if char_count < 200 or char_count > 400:\n        err_infos.append(f\"字数不符（要求200-400字，实际{char_count}字）\")\n    \n    # 检查第二段的海滩次数\n    if len(paragraphs) >= 2:\n        beach_count = paragraphs[1].count(\"海滩\")\n        if beach_count < 2:\n            err_infos.append(f\"第二段'海滩'出现不足2次（实际{beach_count}次）\")\n    \n    # 检查第三个句子结尾\n    sentences = re.findall(r'.+?[。！？…]', content)  # 分句处理\n    if len(sentences) < 3:\n        err_infos.append(\"总句子数量不足3句\")\n    elif not sentences[2].endswith('让人心旷神怡'):\n        err_infos.append(f\"第三句结尾错误（实际结尾：{sentences[2][-5:]}）\")\n    \n    # 检查禁用词\n    forbidden = [\"奢华\", \"豪华\", \"五星级\"]\n    found = [word for word in forbidden if word in content]\n    if found:\n        err_infos.append(f\"包含禁用词：{','.join(found)}\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) or \"验证通过\"\n    }"}
{"prompt": "请写一篇关于“雨天对农作物的影响”的文章，文章中必须出现“影响”“雨天”这两个词，文章只能出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。确保第二个段落不含任何标点符号。请在回复中详细解释并列出其中三个主要影响，使用“【影响1】”、“【影响2】”和“【影响3】”作为主要影响的占位符。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    import string\n\n    # 验证整体结构\n    if not response.startswith(\"【答案开始】\"):\n        return {\"check_code\": False, \"reason\": \"回答必须以'【答案开始】'开头\"}\n    if not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"回答必须以'【答案结束】'结尾\"}\n    \n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    # 验证指令重复部分\n    required_instruction = \"请写一篇关于“雨天对农作物的影响”的文章，文章中必须出现“影响”“雨天”这两个词，文章只能出现四个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。确保第二个段落不含任何标点符号。请在回复中详细解释并列出其中三个主要影响，使用“【影响1】”、“【影响2】”和“【影响3】”作为主要影响的占位符。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\"\n    \n    if not content.startswith(required_instruction):\n        return {\"check_code\": False, \"reason\": \"未一字不差重复指令要求\"}\n    \n    answers_part = content[len(required_instruction):].strip()\n    \n    # 验证答案分隔符\n    if \"******\" not in answers_part:\n        return {\"check_code\": False, \"reason\": \"答案间缺少六个星号分隔符******\"}\n    \n    answers = answers_part.split(\"******\")\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": \"必须提供两个答案\"}\n    \n    # 验证每个答案\n    errors = []\n    for idx, answer in enumerate(answers, 1):\n        # 验证文章结构\n        article_end = min(\n            [i for i in [answer.find(\"【影响1】\"), answer.find(\"【影响2】\"), answer.find(\"【影响3】\")] if i != -1],\n            default=-1\n        )\n        if article_end == -1:\n            errors.append(f\"答案{idx}: 缺少影响标记(【影响1】/【影响2】/【影响3】)\")\n            continue\n            \n        article = answer[:article_end].strip()\n        paras = re.split(r'\\n{2,}', article)  # 按两个以上换行符分割段落\n        \n        # 验证段落数量\n        if len(paras) != 4:\n            errors.append(f\"答案{idx}: 文章段落数应为4段，实际{len(paras)}段\")\n            continue\n            \n        # 验证关键词\n        if \"影响\" not in article:\n            errors.append(f\"答案{idx}: 文章缺少关键词'影响'\")\n        if \"雨天\" not in article:\n            errors.append(f\"答案{idx}: 文章缺少关键词'雨天'\")\n            \n        # 验证第二段落标点\n        second_para = paras[1]\n        has_punctuation = any(\n            char in string.punctuation or \n            char in \"，。！？；：“”‘’（）【】《》\"  # 中文标点\n            for char in second_para\n        )\n        if has_punctuation:\n            errors.append(f\"答案{idx}: 第二段落包含标点符号\")\n            \n        # 验证影响标记顺序\n        if \"【影响1】\" not in answer:\n            errors.append(f\"答案{idx}: 缺少【影响1】标记\")\n        if \"【影响2】\" not in answer:\n            errors.append(f\"答案{idx}: 缺少【影响2】标记\")\n        if \"【影响3】\" not in answer:\n            errors.append(f\"答案{idx}: 缺少【影响3】标记\")\n        \n        # 验证影响标记顺序\n        pos1 = answer.find(\"【影响1】\")\n        pos2 = answer.find(\"【影响2】\")\n        pos3 = answer.find(\"【影响3】\")\n        if not (pos1 < pos2 < pos3):\n            errors.append(f\"答案{idx}: 影响标记顺序错误，应为【影响1】→【影响2】→【影响3】\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \" | \".join(errors)}\n    return {\"check_code\": True, \"reason\": \"\"}\n"}
{"prompt": "撰写一篇关于机器学习在医疗领域应用的文章，文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。文章的第二个句子以‘近年来’开头。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或以'【答案结束】'结尾\"\n        }\n    content = response[6:-6].strip()\n    paragraphs = content.split('\\n\\n')\n    paragraphs = [k for k in paragraphs if k]\n    if len(paragraphs) != 4:\n        return {\n            \"check_code\": False,\n            \"reason\": \"段落数不等于4\"\n        }\n    word_count = len(content.split())\n    if word_count < 500 or word_count > 600:\n        return {\n            \"check_code\": False,\n            \"reason\": \"字数不在500到600之间\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请撰写一篇关于城市交通管理的文章，要求在内容中详细讨论并列出三种主要策略，使用“【策略1】”、“【策略2】”和“【策略3】”作为策略的占位符。此外，要求第四个句子（用中文句号或问号或感叹号分隔）以“为了有效应对交通拥堵”开头，第六个句子（用中文句号或问号或感叹号分隔）以“这是城市发展的关键”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n\n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答没有以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答没有以【答案结束】结尾\")\n    \n    # 提取答案内容\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[6:-6].strip()  # 去除标记\n    else:\n        content = response  # 标记错误时仍检查内容\n    \n    # 检查策略占位符\n    if \"【策略1】\" not in content:\n        errors.append(\"缺少【策略1】标记\")\n    if \"【策略2】\" not in content:\n        errors.append(\"缺少【策略2】标记\")\n    if \"【策略3】\" not in content:\n        errors.append(\"缺少【策略3】标记\")\n    \n    # 分句检查\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) < 6:\n        errors.append(f\"回答只有{len(sentences)}个句子，不足6句\")\n    else:\n        # 检查第四句开头\n        if not sentences[3].startswith(\"为了有效应对交通拥堵\"):\n            errors.append(f\"第四句应为'为了有效应对交通拥堵'开头，实际是: '{sentences[3][:10]}...'\")\n        \n        # 检查第六句结尾\n        if not sentences[5].endswith(\"这是城市发展的关键\"):\n            errors.append(f\"第六句应以'这是城市发展的关键'结尾，实际是: '...{sentences[5][-10:]}'\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "近年来，随着全球气候变化问题的日益严重，绿色建筑已成为建筑行业的热门话题。绿色建筑不仅关注建筑本身的设计，还涉及到能源效率、材料选择和室内环境质量等多个方面。其主要目标是减少对环境的负面影响，同时提高建筑的可持续性和居民的舒适度。绿色建筑通常会采用可再生能源系统，如太阳能板或风力发电机，来减少对传统能源的依赖。此外，节水技术、自然采光和绿色屋顶也是常见的绿色建筑元素。为了推动绿色建筑的发展，许多国家和地区制定了相关的法规和认证标准，如LEED（能源与环境设计先锋奖）和BREEAM（建筑研究环境评估法）。 \n\n请撰写一篇关于绿色建筑在未来城市中的应用前景的文章。要求文章必须包含“可持续性”、“能源效率”和“室内环境”这三个词。文章中的每个句子字数至少18个字，至多28个字。请注意文章中避免使用“科技”、“智能”和“未来”这三个词。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    errors = []\n    \n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        errors.append(\"答案缺少开始/结束标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取答案内容\n    content = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n    if not content:\n        errors.append(\"答案格式解析失败\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    article = content.group(1).strip()\n    \n    # 检查必要关键词\n    required_keywords = {\"可持续性\", \"能源效率\", \"室内环境\"}\n    missing_keywords = [kw for kw in required_keywords if kw not in article]\n    if missing_keywords:\n        errors.append(f\"缺少必要关键词: {','.join(missing_keywords)}\")\n    \n    # 检查禁用词\n    forbidden_words = [\"科技\", \"智能\", \"未来\"]\n    found_words = [word for word in forbidden_words if word in article]\n    if found_words:\n        errors.append(f\"包含禁用词: {','.join(found_words)}\")\n    \n    # 分句检查长度\n    sentences = re.split(r'[。！？]', article)\n    valid_sentences = [s.strip() for s in sentences if s.strip()]\n    \n    for i, sent in enumerate(valid_sentences):\n        length = len(sent)\n        if length < 18 or length > 28:\n            sample = sent[:10] + \"...\" + sent[-5:] if len(sent) > 15 else sent\n            errors.append(f\"第{i+1}句长度不符({length}字): '{sample}'\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "在我们的生活中，烹饪不仅仅是一项基本技能，更是一种艺术形式。烹饪方法的多样性使得每一道菜都有其独特的风味和质地。比如，蒸、煮、炒、煎、烤等不同的烹饪方式会影响食材的口感、营养和味道。蒸是一种常见的健康烹饪方法，保留了食物的原汁原味，同时最大限度地保存了营养成分。煮则适合制作汤类或煮熟食材，能通过液体传递热量，使食材熟透。炒是中餐中常见的烹饪方法，能够快速加热食材，保持其鲜嫩。煎和烤则常用于制作肉类或鱼类，能够使其外皮酥脆。选择合适的烹饪方法不仅能提升菜肴的美味，还能适应不同的健康需求。\n\n请撰写一篇关于家常菜的烹饪心得的文章。文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“味道”这个词务必至少出现两次。在第三个段落中，必须恰好由六个句子（用中文句号或问号或感叹号分隔）组成。文章的每个句子（用中文句号或问号或感叹号分隔）必须不少于20个字。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 1. 检查响应格式标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容（去除标记）\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 2. 检查双答案分隔符\n    if \"******\" not in content:\n        err_infos.append(\"缺少答案分隔符******\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 分割双答案\n    answers = [ans.strip() for ans in content.split(\"******\", 1)]\n    if len(answers) != 2:\n        err_infos.append(\"答案数量不为2\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers):\n        # 3. 检查段落分隔符\n        paragraphs = [p.strip() for p in re.split(r'\\n{2,}', ans) if p.strip()]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{i+1}段落数量错误：期望4段，实际{len(paragraphs)}段\")\n            continue\n        \n        # 4. 检查第二段\"味道\"出现次数\n        if paragraphs[1].count(\"味道\") < 2:\n            err_infos.append(f\"答案{i+1}第二段'味道'出现次数不足2次\")\n        \n        # 5. 检查第三段句子数量\n        third_para = paragraphs[2]\n        sentences = [s.strip() for s in re.split(r'[。？！]', third_para) if s.strip()]\n        if len(sentences) != 6:\n            err_infos.append(f\"答案{i+1}第三段句子数量错误：期望6句，实际{len(sentences)}句\")\n        \n        # 6. 检查所有句子长度\n        all_sentences = []\n        for p in paragraphs:\n            all_sentences.extend([s.strip() for s in re.split(r'[。？！]', p) if s.strip()])\n        \n        short_sentences = []\n        for j, sent in enumerate(all_sentences, 1):\n            if len(sent) < 20:  # 中文字符直接计数\n                short_sentences.append(f\"第{j}句({sent[:10]}...)\")\n        \n        if short_sentences:\n            err_infos.append(f\"答案{i+1}以下句子不足20字：\" + \",\".join(short_sentences))\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请撰写一篇关于城市交通拥堵问题的报告。报告应包括城市交通拥堵的三个主要原因，并使用“&原因1&”、“&原因2&”和“&原因3&”作为这些原因的占位符。文章应分为五个段落(不要出现标题)，每个段落之间用“～～”符号分隔。并确保第二个段落不含任何标点符号。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    import string\n    \n    # 定义中英文标点符号集合\n    chinese_punctuation = \"，。？！；：“”‘’（）【】《》…—～\"\n    all_punctuation = set(string.punctuation + chinese_punctuation)\n    \n    # 初始化检查结果\n    err_infos = []\n    \n    # 检查开始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"Missing start tag\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"Missing end tag\")\n    \n    # 提取答案内容\n    content = response[5:-5]  # 去除【答案开始】和【答案结束】\n    \n    # 检查答案分隔符\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        err_infos.append(f\"Expected 2 answers separated by @@@@@@, found {len(answers)}\")\n    \n    # 检查每个答案\n    for i, ans in enumerate(answers, 1):\n        # 检查占位符\n        for placeholder in [\"&原因1&\", \"&原因2&\", \"&原因3&\"]:\n            if placeholder not in ans:\n                err_infos.append(f\"Answer {i} missing {placeholder}\")\n        \n        # 检查段落分隔符和数量\n        paragraphs = ans.split(\"～～\")\n        if len(paragraphs) != 5:\n            err_infos.append(f\"Answer {i} has {len(paragraphs)} paragraphs, expected 5\")\n        else:\n            # 检查第二段落标点符号\n            second_para = paragraphs[1]\n            for char in second_para:\n                if char in all_punctuation:\n                    err_infos.append(f\"Answer {i} paragraph 2 contains punctuation '{char}'\")\n                    break  # 发现一个标点即报错\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "近年来，随着人口的不断增长和城市化进程的加快，城市绿化问题成为全球关注的热点。城市绿化不仅有助于改善空气质量，还能降低城市热岛效应，提高居民的生活质量。然而，如何在有限的城市空间中实现高效的绿化布局，是一个亟待解决的难题。垂直绿化作为一种新兴的绿化方式，能够在不占用地面空间的情况下，实现大面积绿化效果。它不仅能够为城市居民提供更美观的生活环境，还能通过植物的光合作用，吸收二氧化碳并释放氧气，从而改善空气质量。此外，垂直绿化还能起到隔热和降噪的作用，进一步提升城市居民的居住体验。虽然垂直绿化的优势明显，但其在实施过程中也面临着诸多挑战，如成本较高、维护难度大、植物选择和搭配等问题。因此，探索适合不同城市环境的垂直绿化方案显得尤为重要。\n\n请撰写一篇关于“城市垂直绿化的未来发展”的文章，并以‘在未来’这三个字开头。文章应只出现4个段落，并用两个换行符“\n\n”分隔开来。要求文章的每个句子（用中文句号或问号或感叹号分隔）至少15字，最多25字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errs = []\n    \n    # 检查标记完整性\n    if not response.startswith(\"【答案开始】\"):\n        errs.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        errs.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取正文内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker) + len(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx < len(start_marker) or end_idx == -1:\n        errs.append(\"标记定位失败\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errs)}\n    \n    content = response[start_idx:end_idx].strip()\n    \n    # 检查开头格式\n    if not content.startswith(\"在未来\"):\n        errs.append(\"正文未以'在未来'开头\")\n    \n    # 检查段落数量和分隔符\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        errs.append(f\"段落数量为{len(paragraphs)}而非要求的4段\")\n    \n    # 检查每个句子长度\n    for p_idx, para in enumerate(paragraphs):\n        # 按中文标点分割句子\n        sentences = re.split(r'([。？！])', para)\n        valid_sentences = []\n        temp = \"\"\n        \n        for s in sentences:\n            if s in \"。？！\":\n                if temp:\n                    full_sentence = temp + s\n                    valid_sentences.append(full_sentence)\n                    temp = \"\"\n            else:\n                temp = s\n        \n        if temp:\n            errs.append(f\"第{p_idx+1}段存在未以句号/问号/感叹号结尾的句子\")\n            continue\n        \n        # 检查句子长度\n        for s_idx, sent in enumerate(valid_sentences):\n            length = len(sent)\n            if length < 15 or length > 25:\n                errs.append(f\"第{p_idx+1}段第{s_idx+1}句长度{length}不符合要求(15-25字)\")\n    \n    return {\n        \"check_code\": len(errs) == 0,\n        \"reason\": \"; \".join(errs) if errs else \"\"\n    }"}
{"prompt": "写一篇关于城市夜生活的文章，文章应只出现6个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第四个段落中，“灯光”这个词必须至少出现两次。第三个段落必须只能有6个句子（用中文句号或问号或感叹号分隔）。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化检查结果\n    check_code = True\n    err_infos = []\n    \n    # 检查答案标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_index = response.find(start_marker)\n    end_index = response.find(end_marker)\n    \n    if start_index == -1 or end_index == -1 or start_index >= end_index:\n        check_code = False\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": check_code, \"reason\": err_infos}\n    \n    # 提取答案内容\n    content = response[start_index + len(start_marker):end_index].strip()\n    \n    # 检查段落分隔\n    paragraphs = [p.strip() for p in re.split(r'\\n\\n+', content) if p.strip()]\n    if len(paragraphs) != 6:\n        check_code = False\n        err_infos.append(f\"段落数量错误：{len(paragraphs)}个段落，应为6个\")\n    \n    # 检查第三段句子数量\n    if len(paragraphs) >= 3:\n        sentences = re.split(r'[。？！]', paragraphs[2])\n        # 过滤空句子\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            check_code = False\n            err_infos.append(f\"第三段句子数量错误：{len(sentences)}句，应为6句\")\n    \n    # 检查第四段\"灯光\"出现次数\n    if len(paragraphs) >= 4:\n        count = paragraphs[3].count(\"灯光\")\n        if count < 2:\n            check_code = False\n            err_infos.append(f\"第四段'灯光'出现{count}次，至少需要2次\")\n    \n    return {\"check_code\": check_code, \"reason\": err_infos}"}
{"prompt": "请撰写一篇主题为“早餐的秘密”的文章。文章只能有7个段落（不要出现标题），每个段落之间用“～～”符号分隔。其中第3段的第8个汉字必须是“饱”字，第5段必须至少100个汉字。文章必须恰好由15个句子（用中文句号或问号或感叹号分隔）组成，每个句子的最后一个字必须以“也”字作为结尾。其中第7个句子必须至少12个汉字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    err_infos = []\n    \n    # 验证整体格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"答案未使用指定标记包裹\")\n        return {\"check_code\": False, \"reason\": \"；\".join(err_infos)}\n    \n    # 提取文章内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    instruction = \"请撰写一篇主题为“早餐的秘密”的文章。文章只能有7个段落（不要出现标题），每个段落之间用“～～”符号分隔。其中第3段的第8个汉字必须是“饱”字，第5段必须至少100个汉字。文章必须恰好由15个句子（用中文句号或问号或感叹号分隔）组成，每个句子的最后一个字必须以“也”字作为结尾。其中第7个句子必须至少12个汉字。\"\n    \n    # 验证指令重复\n    if not content.startswith(instruction):\n        err_infos.append(\"未正确重复指令要求\")\n        return {\"check_code\": False, \"reason\": \"；\".join(err_infos)}\n    \n    article = content[len(instruction):].strip()\n    \n    # 验证段落结构\n    paragraphs = article.split(\"～～\")\n    if len(paragraphs) != 7:\n        err_infos.append(f\"段落数量错误（{len(paragraphs)}处）\")\n    \n    # 验证第3段第8字\n    if len(paragraphs) >= 3:\n        para3 = re.sub(r\"\\s+\", \"\", paragraphs[2])\n        if len(para3) < 8 or para3[7] != \"饱\":\n            err_infos.append(\"第3段第8字不符合要求\")\n    \n    # 验证第5段长度\n    if len(paragraphs) >= 5:\n        para5 = re.sub(r\"\\s+\", \"\", paragraphs[4])\n        if len(para5) < 100:\n            err_infos.append(f\"第5段长度不足（{len(para5)}字）\")\n    \n    # 验证句子结构和结尾\n    sentences = re.split(r'[。？！]', article)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    if len(sentences) != 15:\n        err_infos.append(f\"句子数量错误（{len(sentences)}句）\")\n    \n    for i, sent in enumerate(sentences):\n        clean_sent = re.sub(r\"\\s+\", \"\", sent)\n        if clean_sent:\n            if clean_sent[-1] != \"也\":\n                err_infos.append(f\"第{i+1}句结尾字错误（{clean_sent[-1]}）\")\n    \n    # 验证第7句长度\n    if len(sentences) >= 7:\n        sent7 = re.sub(r\"\\s+\", \"\", sentences[6])\n        if len(sent7) < 12:\n            err_infos.append(f\"第7句长度不足（{len(sent7)}字）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"；\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于如何在城市中利用有限空间进行园艺种植的文章。文章需包含“阳台”和“绿植”这两个词，并且以“让我们共同努力，打造一个绿色城市。”这句话结尾。文章应只出现8个段落，每段用两个换行符“\n\n”分隔开来。在第二个段落中，“阳台”这个词要刚好出现两次。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头或以'【答案结束】'结尾。\"\n        }\n    content = response[6:-6].strip()\n    paragraphs = content.split('\\n\\n')\n    paragraphs = [k for k in paragraphs if k]\n    if len(paragraphs) != 8:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章段落数不等于8。\"\n        }\n    if '让我们共同努力，打造一个绿色城市。' not in paragraphs[-1]:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章没有以指定句子结尾。\"\n        }\n    if '阳台' not in paragraphs[1] or paragraphs[1].count('阳台') != 2:\n        return {\n            \"check_code\": False,\n            \"reason\": \"第二段中'阳台'这个词没有出现两次。\"\n        }\n    if '绿植' not in content:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章中没有出现'绿植'这个词。\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请写一篇关于“厨房智能设备对日常烹饪的影响”的文章，长度不超过120个汉字。请写一篇恰好为8个句子（每个句子之间用&作为分隔符号）的文章。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    def validate_ans(ans):\n        # 检查总长度\n        if len(ans) > 120:\n            return False, f\"文章长度{len(ans)}超过120个字符\"\n        \n        # 检查段落数量和分隔符\n        paragraphs = ans.split('～～')\n        if len(paragraphs) != 4:\n            return False, f\"段落数量为{len(paragraphs)}而非4个\"\n        for para in paragraphs:\n            if not para.strip():\n                return False, \"存在空段落\"\n        \n        # 检查句子数量和分隔符\n        sentences = []\n        for para in paragraphs:\n            s_list = [s.strip() for s in para.split('&') if s.strip()]\n            sentences.extend(s_list)\n        if len(sentences) != 8:\n            return False, f\"总句子数量为{len(sentences)}而非8个\"\n        \n        # 检查段落内句子结构\n        sentence_counts = [len([s for s in para.split('&') if s.strip()]) for para in paragraphs]\n        if any(count == 0 for count in sentence_counts):\n            return False, \"存在无句子的段落\"\n        \n        return True, \"\"\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        return {\"check_code\": False, \"reason\": \"缺少【答案开始】标记\"}\n    if not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"缺少【答案结束】标记\"}\n    \n    # 提取答案内容\n    content = response[5:-5].strip()  # 去除首尾标记\n    answers = [a.strip() for a in content.split('@@@@@@') if a.strip()]\n    \n    # 检查答案数量\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案数量为{len(answers)}而非2个\"}\n    \n    # 验证每个答案\n    errors = []\n    for i, ans in enumerate(answers, 1):\n        valid, msg = validate_ans(ans)\n        if not valid:\n            errors.append(f\"答案{i}: {msg}\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请描述一次你在厨房里尝试新食谱的经历。文章应包含4个段落，每个段落之间用'～～'符号分隔。在第二段中，“味道”这个词必须至少出现两次。在内容中请详细解释并列出其中的三个关键步骤，使用“&步骤1&”、“&步骤2&”和“&步骤3&”作为步骤的占位符。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    # 定义指令要求字符串（注意转义和换行）\n    instruction_str = \"请描述一次你在厨房里尝试新食谱的经历。文章应包含4个段落，每个段落之间用'～～'符号分隔。在第二段中，“味道”这个词必须至少出现两次。在内容中请详细解释并列出其中的三个关键步骤，使用“&步骤1&”、“&步骤2&”和“&步骤3&”作为步骤的占位符。\"\n    \n    # 初始化错误信息列表\n    errors = []\n    \n    # 1. 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少结束标记【答案结束】\")\n    \n    # 如果有标记错误，直接返回\n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取标记间内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 2. 检查指令重复部分\n    if not content.startswith(instruction_str):\n        errors.append(\"未正确重复指令要求\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取实际回答部分\n    answer_part = content[len(instruction_str):].strip()\n    \n    # 3. 检查段落分隔符\n    paragraphs = answer_part.split('～～')\n    if len(paragraphs) != 4:\n        errors.append(f\"段落数量错误（需要4段，实际{len(paragraphs)}段）\")\n    \n    # 4. 检查第二段\"味道\"出现次数\n    if len(paragraphs) >= 2:  # 确保有第二段\n        taste_count = paragraphs[1].count('味道')\n        if taste_count < 2:\n            errors.append(f\"第二段'味道'出现次数不足（需要≥2次，实际{taste_count}次）\")\n    \n    # 5. 检查步骤占位符\n    steps = ['&步骤1&', '&步骤2&', '&步骤3&']\n    step_positions = []\n    \n    for step in steps:\n        pos = answer_part.find(step)\n        if pos == -1:\n            errors.append(f\"缺少步骤占位符{step}\")\n        else:\n            step_positions.append(pos)\n    \n    # 检查步骤顺序\n    if len(step_positions) == 3:\n        if not (step_positions[0] < step_positions[1] < step_positions[2]):\n            errors.append(\"步骤占位符顺序错误\")\n    \n    # 返回最终结果\n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "近年来，随着社会对心理健康问题的关注增加，心理辅导与支持的需求也在不断增长。尤其是在职场环境中，压力管理和心理健康维护已成为企业和员工共同关注的焦点。心理健康问题可能会影响员工的工作效率、团队合作以及整体的职业发展。因此，很多公司开始引入心理健康计划，提供员工辅导服务，甚至在工作环境中设置专门的心理休息空间。了解如何在职场中有效地管理心理压力和寻求支持，对于现代职场人士来说是至关重要的技能。\n\n请撰写一篇关于“职场心理健康管理”的文章。请确保文章由4个段落（不要出现标题）构成，每个段落之间用'～～'符号分隔。其中第2段的第10个汉字必须是“心”字。文章需恰好由8个句子组成，用中文句号或问号或感叹号分隔。其中第5个句子的第4个汉字必须是“力”字。请从“在现代职场中”这几个字作为开头开始撰写。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案未使用指定标记\"}\n    \n    content = response[6:-6]  # 去除首尾标记\n    \n    # 分割两个答案\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案分隔符错误，找到{len(answers)}个答案\"}\n    \n    for idx, ans in enumerate(answers, 1):\n        # 检查开头\n        if not ans.startswith(\"在现代职场中\"):\n            err_infos.append(f\"答案{idx}未以'在现代职场中'开头\")\n            continue\n        \n        # 检查段落\n        paragraphs = ans.split('～～')\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{idx}段落数错误({len(paragraphs)}而非4)\")\n            continue\n        \n        # 检查第2段第10字\n        if len(paragraphs[1]) < 10:\n            err_infos.append(f\"答案{idx}第2段长度不足10字\")\n        elif paragraphs[1][9] != \"心\":\n            err_infos.append(f\"答案{idx}第2段第10字应为'心'\")\n        \n        # 分割句子\n        sentences = [s.strip() for s in re.split(r'[。？！]', ans) if s.strip()]\n        if len(sentences) != 8:\n            err_infos.append(f\"答案{idx}句子数错误({len(sentences)}而非8)\")\n            continue\n        \n        # 检查第5句第4字\n        if len(sentences[4]) < 4:\n            err_infos.append(f\"答案{idx}第5句长度不足4字\")\n        elif sentences[4][3] != \"力\":\n            err_infos.append(f\"答案{idx}第5句第4字应为'力'\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于城市交通拥堵的分析报告，要求内容不少于80个汉字，并且不超过200个汉字，并且第五个句子以“根据最新统计数据”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少起始标记【答案开始】\")\n    if \"【答案结束】\" not in response:\n        errors.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    if not errors:\n        start_idx = response.find(\"【答案开始】\") + 6\n        end_idx = response.find(\"【答案结束】\")\n        if end_idx <= start_idx:\n            errors.append(\"标记位置错误\")\n        else:\n            content = response[start_idx:end_idx].strip()\n            \n            # 检查字数\n            chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', content)\n            char_count = len(chinese_chars)\n            if char_count < 80:\n                errors.append(f\"字数不足（{char_count}/80）\")\n            elif char_count > 200:\n                errors.append(f\"字数超标（{char_count}/200）\")\n            \n            # 检查第五句格式\n            sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n            if len(sentences) < 5:\n                errors.append(\"总句数不足5句\")\n            else:\n                if not sentences[4].startswith(\"根据最新统计数据\"):\n                    errors.append(\"第五句未以指定短语开头\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "在全球化和科技发展的背景下，越来越多的人开始关注个人技能的提升。尤其是在信息技术领域，编程已经成为一项基本的职业技能。无论你是学生、职场新人还是已经工作多年的专业人士，学习编程都可以为你的职业生涯增添新的光彩。编程不仅能帮助你提高逻辑思维能力，还能增强你的问题解决能力和创新能力。现在，市面上有许多编程语言可供选择，如Python、JavaScript、C++等，每种语言都有其独特的应用领域和优势。Python因其简单易学和广泛的应用场景，特别受到初学者的欢迎。无论你是想开发游戏、构建网站，还是进行数据分析，Python都可以胜任。掌握编程技能不仅能增加你的就业机会，还能让你在日常生活中更加高效地处理各种任务。\n\n请写一篇关于学习编程的重要性的文章。文章应只出现5个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“编程”这个词务必至少出现两次，“Python”这个词务必须只出现三次。文章的总长度应在500到600字之间。此外，文章的第三个句子应以“这是非常有价值的”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 提取答案内容\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        errors.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    start = response.index(\"【答案开始】\") + len(\"【答案开始】\")\n    end = response.index(\"【答案结束】\")\n    content = response[start:end].strip()\n    \n    # 检查段落数量\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 5:\n        errors.append(f\"段落数量错误（实际：{len(paragraphs)}）\")\n    \n    # 检查总字数\n    word_count = len(content)\n    if not (500 <= word_count <= 600):\n        errors.append(f\"文章长度{word_count}字，不符合500-600字要求\")\n    \n    # 检查第二段关键词\n    if len(paragraphs) >= 2:\n        para2 = paragraphs[1]\n        if para2.count(\"编程\") < 2:\n            errors.append(\"第二段'编程'出现次数不足\")\n        if para2.count(\"Python\") != 3:\n            errors.append(\"第二段'Python'出现次数错误\")\n    \n    # 检查第三个句子结尾\n    content_no_newline = content.replace(\"\\n\", \"\")\n    sentences = re.findall(r'[^。！？]*[。！？]', content_no_newline)\n    if len(sentences) < 3:\n        errors.append(\"文章句子数量不足\")\n    else:\n        third_sentence = sentences[2]\n        if not third_sentence.rstrip().endswith(\"这是非常有价值的\"):\n            errors.append(\"第三个句子结尾不符合要求\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \";\".join(errors) if errors else \"验证通过\"\n    }"}
{"prompt": "在现代社会，健康问题日益受到关注，尤其是与饮食相关的健康问题。近年来，随着人们生活水平的提高和饮食习惯的变化，肥胖、高血压、糖尿病等慢性病的发病率逐年上升。专家们普遍认为，合理的饮食习惯对预防和控制这些疾病具有重要作用。\n\n请撰写一篇关于“如何通过健康饮食预防慢性病”的文章。文章应由三个段落组成，每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，必须刚好由四个句子（用中文句号或问号或感叹号分隔）组成。文章需包含以下词语：“膳食纤维”、“维生素”、“血糖”。另外，要求文章的第三个句子（用中文句号或问号或感叹号分隔）以“在当今社会”开头。每个句子必须至少15个字，最多20个字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    # 验证基本结构\n    errors = []\n    if start_idx == -1:\n        errors.append(\"缺少【答案开始】标记\")\n    if end_idx == -1:\n        errors.append(\"缺少【答案结束】标记\")\n    if start_idx != -1 and end_idx != -1 and start_idx >= end_idx:\n        errors.append(\"标记顺序错误\")\n    \n    # 如果基本标记错误，直接返回\n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取答案内容\n    content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 验证段落结构\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 3:\n        errors.append(f\"段落数量错误：要求3段，实际{len(paragraphs)}段\")\n    \n    # 验证第二个段落句子数量\n    if len(paragraphs) >= 2:\n        # 使用正则分割句子（保留结尾标点）\n        sentences = re.findall(r'[^。？！]+[。？！]', paragraphs[1])\n        if len(sentences) != 4:\n            errors.append(f\"第二段句子数量错误：要求4句，实际{len(sentences)}句\")\n    else:\n        errors.append(\"缺少第二段落\")\n    \n    # 验证关键词\n    keywords = [\"膳食纤维\", \"维生素\", \"血糖\"]\n    missing_keywords = [kw for kw in keywords if kw not in content]\n    if missing_keywords:\n        errors.append(f\"缺少关键词：{', '.join(missing_keywords)}\")\n    \n    # 验证所有句子长度\n    all_sentences = re.findall(r'[^。？！]+[。？！]', content)\n    for i, sent in enumerate(all_sentences, 1):\n        clean_sent = sent.replace(\" \", \"\").replace(\"\\n\", \"\")  # 去除空格和换行\n        if len(clean_sent) < 15 or len(clean_sent) > 20:\n            errors.append(f\"第{i}句长度错误：{len(clean_sent)}字（要求15-20字）\")\n    \n    # 验证第三个句子开头\n    if len(all_sentences) >= 3:\n        if not all_sentences[2].startswith(\"在当今社会\"):\n            errors.append(f\"第三句开头错误：应为'在当今社会'，实际'{all_sentences[2][:4]}'\")\n    else:\n        errors.append(\"句子总数不足3句\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于城市中的公共空间设计对社交互动的影响的文章，在文章中必须使用“社区”、“开放性”和“互动”这三个词语。请在文章中详细列出三个主要影响因素，并使用“&影响因素1&”、“&影响因素2&”和“&影响因素3&”作为占位符。请确保文章标题用$()$标记，如$(城市中的公共空间设计对社交互动的影响)$。文章只能有7个句子，每个句子用^作为分隔符号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证回答起始和结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"回答未以指定标记【答案开始】和【答案结束】包裹\"}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    # 验证标题格式\n    title_match = re.search(r'^\\s*\\$\\((.+?)\\)\\$\\s*', content)\n    if not title_match:\n        return {\"check_code\": False, \"reason\": \"标题未用$()$标记或标题为空\"}\n    title = title_match.group(0)\n    body = content[len(title):].strip()\n    \n    # 验证句子分隔符和数量\n    sentences = [s.strip() for s in body.split('^') if s.strip()]\n    if len(sentences) != 7:\n        return {\"check_code\": False, \"reason\": f\"句子数量错误（需要7句，实际{len(sentences)}句）\"}\n    \n    # 验证关键词存在性\n    keywords = {\"社区\", \"开放性\", \"互动\"}\n    missing_keywords = [kw for kw in keywords if kw not in content]\n    if missing_keywords:\n        return {\"check_code\": False, \"reason\": f\"缺少关键词：{', '.join(missing_keywords)}\"}\n    \n    # 验证占位符存在性\n    placeholders = {\"&影响因素1&\", \"&影响因素2&\", \"&影响因素3&\"}\n    missing_placeholders = [ph for ph in placeholders if ph not in body]\n    if missing_placeholders:\n        return {\"check_code\": False, \"reason\": f\"缺少占位符：{', '.join(missing_placeholders)}\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于食品安全的讨论文章，文章只能由25个句子（用中文句号或问号或感叹号分隔）组成，要求文章的每个句子（用中文句号或问号或感叹号分隔）至少18个字，最多25个字，并且包含“消费者”、“监管”这两个词。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义验证结果初始值\n    check_code = True\n    err_infos = []\n    \n    # 1. 检查【答案开始】和【答案结束】标记\n    if not response.startswith(\"【答案开始】\"):\n        check_code = False\n        err_infos.append(\"缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        check_code = False\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    if check_code:\n        content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n        \n        # 2. 检查是否重复指令要求\n        required_text = (\n            \"请写一篇关于食品安全的讨论文章，文章只能由25个句子（用中文句号或问号或感叹号分隔）组成，\"\n            \"要求文章的每个句子（用中文句号或问号或感叹号分隔）至少18个字，最多25个字，并且包含“消费者”、\"\n            \"“监管”这两个词。\"\n        )\n        \n        if not content.startswith(required_text):\n            check_code = False\n            err_infos.append(\"未按要求重复指令文本\")\n        else:\n            # 提取文章部分\n            article = content[len(required_text):].strip()\n            \n            # 3. 分句检查\n            sentences = re.split(r'[。？！]', article)\n            sentences = [s.strip() for s in sentences if s.strip()]\n            \n            # 检查句子数量\n            if len(sentences) != 25:\n                check_code = False\n                err_infos.append(f\"句子数量错误（实际：{len(sentences)}/要求：25）\")\n            \n            # 检查每个句子\n            for i, sent in enumerate(sentences):\n                # 检查长度\n                if len(sent) < 18 or len(sent) > 25:\n                    check_code = False\n                    err_infos.append(f\"第{i+1}句长度不符（{len(sent)}字）\")\n                \n                # 检查关键词\n                if \"消费者\" not in sent:\n                    check_code = False\n                    err_infos.append(f\"第{i+1}句缺少'消费者'\")\n                if \"监管\" not in sent:\n                    check_code = False\n                    err_infos.append(f\"第{i+1}句缺少'监管'\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": check_code,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }\n"}
{"prompt": "请撰写一篇关于“智能家居设备对日常生活的影响”的文章，请确保文章只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查响应是否包含答案标记\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"答案标记缺失\"}\n    \n    # 提取答案内容\n    start_index = response.find(\"【答案开始】\") + 6\n    end_index = response.find(\"【答案结束】\")\n    content = response[start_index:end_index].strip()\n    \n    # 检查多余内容\n    if \"【答案开始】\" in content or \"【答案结束】\" in content:\n        return {\"check_code\": False, \"reason\": \"答案内容包含额外标记\"}\n    \n    # 检查段落分隔\n    paragraphs = re.split(r'\\n{2,}', content)\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量错误（要求4段，实际{len(paragraphs)}段）\"}\n    \n    # 检查段落内容有效性\n    for i, para in enumerate(paragraphs):\n        if not para.strip():\n            return {\"check_code\": False, \"reason\": f\"第{i+1}段内容为空\"}\n        if re.search(r'^#{1,6}\\s+', para.strip()):  # 检测Markdown标题\n            return {\"check_code\": False, \"reason\": f\"第{i+1}段包含标题格式\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于环保措施在日常生活中的重要性的文章，要求文章中不要出现“污染”、“能源”、“环境”这几个词。请确保文章只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。要求第三个句子（用中文句号或问号或感叹号分隔）以“这是我们必须关注的”结尾。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    check_code = True\n    err_infos = []\n\n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        check_code = False\n        err_infos.append(\"缺少【答案开始】或【答案结束】标记\")\n        return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos)}\n\n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查答案分隔符\n    if \"******\" not in content:\n        check_code = False\n        err_infos.append(\"答案间缺少******分隔符\")\n        return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos)}\n    \n    answers = content.split(\"******\")\n    if len(answers) != 2:\n        check_code = False\n        err_infos.append(\"答案数量不等于2\")\n        return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos)}\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers):\n        ans = ans.strip()\n        local_errors = []\n        \n        # 检查段落分隔符\n        paragraphs = ans.split(\"\\n\\n\")\n        if len(paragraphs) != 4:\n            local_errors.append(f\"段落数量不为4（实际：{len(paragraphs)}）\")\n        \n        # 检查禁用词\n        forbidden_words = [\"污染\", \"能源\", \"环境\"]\n        for word in forbidden_words:\n            if word in ans:\n                local_errors.append(f\"包含禁用词：'{word}'\")\n        \n        # 检查第三个句子结尾\n        sentences = re.split(r'[。？！]', ans)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) < 3:\n            local_errors.append(\"句子数量不足3个\")\n        elif not sentences[2].endswith(\"这是我们必须关注的\"):\n            local_errors.append(f\"第三句不以指定内容结尾（实际：'{sentences[2][-10:]}'）\")\n        \n        if local_errors:\n            check_code = False\n            err_infos.append(f\"答案{i+1}错误: {'; '.join(local_errors)}\")\n    \n    return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos)}"}
{"prompt": "请撰写一篇关于“家庭厨房布局优化”的文章，文章必须以“家庭空间设计中”这几个字开头，讨论不同类型厨房的布局设计及优化建议。全文中“收纳”一词必须至少出现3次，“通风”一词必须恰好出现3次，“灯光”一词最多出现5次。文章只能有4个段落（不要出现标题），每段之间用“～～”符号分隔，其中第3段必须恰好由6个句子（用中文句号或问号或感叹号分隔）组成。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查全局标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答开头缺少'【答案开始】'标记\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答结尾缺少'【答案结束】'标记\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    if not content:\n        err_infos.append(\"未检测到有效答案内容\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 分割两个答案\n    answers = [ans.strip() for ans in content.split('@@@@@@') if ans.strip()]\n    if len(answers) != 2:\n        err_infos.append(f\"检测到{len(answers)}个答案，但要求必须是2个答案\")\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers):\n        ans_id = f\"答案{i+1}\"\n        \n        # 开头检查\n        if not ans.startswith(\"家庭空间设计中\"):\n            err_infos.append(f\"{ans_id}：未以'家庭空间设计中'开头\")\n        \n        # 关键词频率检查\n        if ans.count(\"收纳\") < 3:\n            err_infos.append(f\"{ans_id}：'收纳'出现次数不足3次\")\n        if ans.count(\"通风\") != 3:\n            err_infos.append(f\"{ans_id}：'通风'出现次数不等于3次\")\n        if ans.count(\"灯光\") > 5:\n            err_infos.append(f\"{ans_id}：'灯光'出现次数超过5次\")\n        \n        # 段落结构检查\n        paragraphs = [p.strip() for p in ans.split(\"～～\") if p.strip()]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"{ans_id}：段落数量为{len(paragraphs)}个，但要求必须是4段\")\n        elif i < len(answers):  # 仅当段落数正确时检查第3段\n            para3 = paragraphs[2]\n            # 中文标点分句（包括句号、问号、感叹号）\n            sentences = [s.strip() for s in re.split(r'[。？！]', para3) if s.strip()]\n            if len(sentences) != 6:\n                err_infos.append(f\"{ans_id}：第3段包含{len(sentences)}个句子，但要求必须是6个句子\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请撰写一篇关于“城市生活中的绿色空间”的文章，并以“在城市”这三个字开头。文章只能由16个句子组成，其中第9个句子的第4个汉字必须是“花”字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        errors.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 提取答案内容\n    start = response.find(\"【答案开始】\") + 6\n    end = response.find(\"【答案结束】\")\n    content = response[start:end].strip()\n    \n    # 检查开头\n    if not content.startswith(\"在城市\"):\n        errors.append(\"开头不是'在城市'\")\n    \n    # 分句处理\n    sentences = re.split(r'(?<=[。！？…])', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    # 检查句子数量\n    if len(sentences) != 16:\n        errors.append(f\"句子数量是{len(sentences)}不是16\")\n    \n    # 检查第9句第4个汉字\n    if len(sentences) >= 9:\n        ninth_sentence = sentences[8]\n        hanzi_count = 0\n        for char in ninth_sentence:\n            if '\\u4e00' <= char <= '\\u9fff':  # 汉字判断\n                hanzi_count += 1\n                if hanzi_count == 4:\n                    if char != \"花\":\n                        errors.append(f\"第9句第4个汉字是'{char}'不是'花'\")\n                    break\n        if hanzi_count < 4:\n            errors.append(\"第9句不足4个汉字\")\n    elif len(sentences) < 9 and len(sentences) != 16:\n        errors.append(\"缺少第9句\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \";\".join(errors) if errors else \"\"\n    }"}
{"prompt": "请写一篇关于高效时间管理方法在日常生活中的应用的文章，文章中必须出现“专注力”和“优先级”这两个词语。请确保文章标题用$()$标记，如$(xxx)$，并以“通过这些方法，您可以更好地掌控自己的时间。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    result = {\"check_code\": True, \"reason\": \"\"}\n    err_infos = []\n    \n    # 检查开头和结尾标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    if not response.startswith(start_marker):\n        err_infos.append(\"回答缺少开头标记【答案开始】\")\n    if not response.endswith(end_marker):\n        err_infos.append(\"回答缺少结尾标记【答案结束】\")\n    \n    # 提取内容区域\n    content = response[len(start_marker):-len(end_marker)] if response.startswith(start_marker) and response.endswith(end_marker) else \"\"\n    \n    # 检查标题标记\n    if not re.search(r'\\$\\(.*?\\)\\$', content):\n        err_infos.append(\"文章标题未用$()$标记\")\n    \n    # 检查关键词\n    if \"专注力\" not in content:\n        err_infos.append(\"文章缺少关键词'专注力'\")\n    if \"优先级\" not in content:\n        err_infos.append(\"文章缺少关键词'优先级'\")\n    \n    # 检查结尾语句\n    if not content.strip().endswith(\"通过这些方法，您可以更好地掌控自己的时间。\"):\n        err_infos.append(\"文章结尾未按要求结束\")\n    \n    # 检查多余内容\n    if response.find(start_marker) != 0:\n        err_infos.append(\"开头标记前有多余内容\")\n    if response.rfind(end_marker) != len(response) - len(end_marker):\n        err_infos.append(\"结尾标记后有多余内容\")\n    \n    if err_infos:\n        result[\"check_code\"] = False\n        result[\"reason\"] = \"; \".join(err_infos)\n    \n    return result"}
{"prompt": "请撰写一篇关于“家庭宠物的日常护理”的文章，请确保文章只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。请注意避免使用“健康”、“运动”、“疾病”这几个词。要求文章的每个句子（用中文句号或问号或感叹号分隔）至少15个字，最多25个字。请确保第二个句子（用中文句号或问号或感叹号分隔）以“在日常生活中”开头。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 原始指令要求\n    original_instruction = (\n        \"请撰写一篇关于“家庭宠物的日常护理”的文章，\"\n        \"请确保文章只出现4个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。\"\n        \"请注意避免使用“健康”、“运动”、“疾病”这几个词。\"\n        \"要求文章的每个句子（用中文句号或问号或感叹号分隔）至少15个字，最多25个字。\"\n        \"请确保第二个句子（用中文句号或问号或感叹号分隔）以“在日常生活中”开头。\"\n    )\n    \n    err_infos = []\n    \n    # 1. 检查指令重复部分\n    if not response.startswith(original_instruction):\n        err_infos.append(\"未正确重复指令要求\")\n    \n    # 2. 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"缺少答案标记【答案开始】/【答案结束】\")\n        return {\"check_code\": False, \"reason\": \",\".join(err_infos)}\n    \n    # 提取答案内容\n    start_idx = response.index(\"【答案开始】\") + 6\n    end_idx = response.index(\"【答案结束】\")\n    answer = response[start_idx:end_idx].strip()\n    \n    # 3. 检查段落数量\n    paragraphs = [p.strip() for p in answer.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误（实际:{len(paragraphs)}/要求:4）\")\n    \n    # 4. 检查禁用词\n    forbidden_words = [\"健康\", \"运动\", \"疾病\"]\n    for word in forbidden_words:\n        if word in answer:\n            err_infos.append(f\"包含禁用词: {word}\")\n            break\n    \n    # 5. 检查句子长度和格式\n    for i, para in enumerate(paragraphs):\n        # 分句（按中文句号/问号/感叹号）\n        sentences = re.split(r'(?<=[。？！])', para)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        # 检查每个句子长度\n        for j, sent in enumerate(sentences):\n            length = len(sent)\n            if length < 15 or length > 25:\n                err_infos.append(f\"第{i+1}段第{j+1}句长度不符({length}字)\")\n        \n        # 检查第二句开头\n        if len(sentences) >= 2:\n            if not sentences[1].startswith(\"在日常生活中\"):\n                err_infos.append(f\"第{i+1}段第二句未以'在日常生活中'开头\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \",\".join(err_infos) if err_infos else None\n    }"}
{"prompt": "请写一篇关于雨后城市景象的文章。文章应以“雨过天晴”这四个字开头，以“充满生机”这四个字结尾。文章只能有4个段落，每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“彩虹”这个词必须只出现两次。文章中的每个句子至少15个字，最多25个字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证回答是否包含正确的标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"回答缺少【答案开始】或【答案结束】标记\"}\n    \n    # 提取实际内容\n    start_index = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_index = response.find(\"【答案结束】\")\n    content = response[start_index:end_index].strip()\n    \n    # 验证开头和结尾\n    if not content.startswith(\"雨过天晴\"):\n        return {\"check_code\": False, \"reason\": \"回答没有以'雨过天晴'开头\"}\n    if not content.endswith(\"充满生机\"):\n        return {\"check_code\": False, \"reason\": \"回答没有以'充满生机'结尾\"}\n    \n    # 验证段落数量\n    paragraphs = [p.strip() for p in re.split(r'\\n\\n', content) if p.strip()]\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量应为4，实际为{len(paragraphs)}\"}\n    \n    # 验证第二段\"彩虹\"出现次数\n    rainbow_count = paragraphs[1].count(\"彩虹\")\n    if rainbow_count != 2:\n        return {\"check_code\": False, \"reason\": f\"第二段'彩虹'应出现2次，实际出现{rainbow_count}次\"}\n    \n    # 验证每个句子长度\n    for p_idx, para in enumerate(paragraphs):\n        # 使用正则拆分句子（考虑中文标点）\n        sentences = re.split(r'(?<=[。！？…])', para)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        for s_idx, sent in enumerate(sentences):\n            # 跳过空句子和仅含标点的句子\n            if not sent or re.fullmatch(r'[。！？…，、；：]+', sent):\n                continue\n                \n            # 计算有效字符数（排除空白字符）\n            clean_sent = re.sub(r'\\s', '', sent)\n            length = len(clean_sent)\n            \n            if length < 15 or length > 25:\n                return {\n                    \"check_code\": False,\n                    \"reason\": f\"第{p_idx+1}段第{s_idx+1}句长度不符（{length}字）: '{sent[:10]}...'\"\n                }\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于传统节日庆祝活动的文章，要求文章以“在每年的”这四个字开头。文章必须由38个句子（用中文句号或问号或感叹号分隔）组成，在文章中描述的庆祝活动中，不允许出现“烟花”、“灯笼”、“红包”这几个词。文章只能出现5个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第4个段落中，“传统”这个词务必至少出现两次。文章的每个句子（用中文句号或问号或感叹号分隔）至少有17个字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化验证结果\n    check_code = True\n    err_infos = []\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response or end_marker not in response:\n        check_code = False\n        err_infos.append(\"回答缺少【答案开始】或【答案结束】标记\")\n        return {\"check_code\": check_code, \"reason\": err_infos}\n    \n    content = response.split(start_marker)[1].split(end_marker)[0].strip()\n    \n    # 1. 检查开头\n    if not content.startswith(\"在每年的\"):\n        check_code = False\n        err_infos.append(\"文章没有以'在每年的'开头\")\n    \n    # 2. 检查段落结构\n    paragraphs = [p.strip() for p in re.split(r'\\n{2,}', content) if p.strip()]\n    if len(paragraphs) != 5:\n        check_code = False\n        err_infos.append(f\"段落数量应为5个，实际为{len(paragraphs)}个\")\n    \n    # 3. 检查句子数量\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) != 38:\n        check_code = False\n        err_infos.append(f\"句子数量应为38句，实际为{len(sentences)}句\")\n    \n    # 4. 检查禁用词\n    forbidden_words = [\"烟花\", \"灯笼\", \"红包\"]\n    for word in forbidden_words:\n        if word in content:\n            check_code = False\n            err_infos.append(f\"文章包含禁用词'{word}'\")\n            break\n    \n    # 5. 检查第四段\"传统\"出现次数\n    if len(paragraphs) >= 4:\n        para4 = paragraphs[3]\n        if para4.count(\"传统\") < 2:\n            check_code = False\n            err_infos.append(\"第4段落中'传统'出现次数不足2次\")\n    \n    # 6. 检查每句长度\n    for i, sentence in enumerate(sentences):\n        # 移除空格并统计中文字符数\n        char_count = len(re.sub(r'\\s', '', sentence))\n        if char_count < 17:\n            check_code = False\n            err_infos.append(f\"第{i+1}句只有{char_count}个字（要求≥17字）\")\n    \n    return {\"check_code\": check_code, \"reason\": err_infos}"}
{"prompt": "请撰写一篇关于“城市绿化与环境保护”的文章，探讨城市绿化在环境保护中的作用与挑战。请确保文章标题用$()$标记，如$(XXXX)$。文章需分为6个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第3段的第8个汉字必须是“林”字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查答案标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        err_infos.append(\"答案缺少开始/结束标记\")\n        return {\"check_code\": False, \"reason\": \"，\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 检查标题格式\n    title_match = re.search(r'\\$\\(.*?\\)\\$', content)\n    if not title_match:\n        err_infos.append(\"标题未用$()$标记\")\n    elif title_match.start() > 0:\n        err_infos.append(\"标题不在开头位置\")\n    \n    # 分割段落\n    segments = content.split('～～')\n    if len(segments) != 6:\n        err_infos.append(f\"段落数量错误(应为6段,实际{len(segments)}段)\")\n    \n    # 检查第三段第8个汉字\n    if len(segments) >= 3:\n        para3 = segments[2]\n        hanzi_count = 0\n        for char in para3:\n            if '\\u4e00' <= char <= '\\u9fff':  # 汉字Unicode范围\n                hanzi_count += 1\n                if hanzi_count == 8:\n                    if char != \"林\":\n                        err_infos.append(\"第三段第8个汉字不是'林'\")\n                    break\n        if hanzi_count < 8:\n            err_infos.append(\"第三段汉字不足8个\")\n    else:\n        err_infos.append(\"缺少第三段内容\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"，\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "首先，将下列文本中的“秀”字全部加上“**”，格式应该为“**秀**”；然后，将再将上一步修改过的文本中的“喜”字全部替换为“和”字；最后，将上一步修改过的文本中的开头3个汉字和最后3个汉字互换位置，保持原来的汉字先后顺序不变。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n喜剧电影在电影产业中占据着重要的地位，通过幽默和讽刺的方式，喜剧电影能够吸引大量观众并获得广泛的关注。喜剧电影的成功在于其能够在轻松愉快的氛围中传递深刻的思想和情感，使观众在欢笑中领悟生活的真谛。优秀的喜剧电影通常具有巧妙的剧情设计、鲜活的人物形象和精彩的对白，使得观众在观影过程中感受到愉悦和启迪。喜剧电影不仅是娱乐的工具，更是表达思想、传递文化和促进社会变革的重要媒介。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n\n    response = response.strip()\n\n    # 定义原始文本\n    original_text = \"喜剧电影在电影产业中占据着重要的地位，通过幽默和讽刺的方式，喜剧电影能够吸引大量观众并获得广泛的关注。喜剧电影的成功在于其能够在轻松愉快的氛围中传递深刻的思想和情感，使观众在欢笑中领悟生活的真谛。优秀的喜剧电影通常具有巧妙的剧情设计、鲜活的人物形象和精彩的对白，使得观众在观影过程中感受到愉悦和启迪。喜剧电影不仅是娱乐的工具，更是表达思想、传递文化和促进社会变革的重要媒介。\"\n    \n    # 验证步骤1：将\"秀\"替换为\"**秀**\"\n    step1_text = re.sub(r'秀', '**秀**', original_text)\n    \n    # 验证步骤2：将\"喜\"替换为\"和\"\n    step2_text = re.sub(r'喜', '和', step1_text)\n    \n    # 验证步骤3：交换开头和结尾的三个汉字\n    def is_chinese(char):\n        return '一' <= char <= '鿿'\n    \n    # 提取开头的三个汉字\n    first_three = []\n    index = 0\n    while len(first_three) < 3 and index < len(step2_text):\n        if is_chinese(step2_text[index]):\n            first_three.append(step2_text[index])\n        index += 1\n    first_three = ''.join(first_three)\n    \n    # 提取结尾的三个汉字\n    last_three = []\n    index = len(step2_text) - 1\n    while len(last_three) < 3 and index >= 0:\n        if is_chinese(step2_text[index]):\n            last_three.insert(0, step2_text[index])\n        index -= 1\n    last_three = ''.join(last_three)\n    \n    # 构建交换后的文本\n    start_idx = 0\n    end_idx = len(step2_text) - 1\n    count = 0\n    # 定位开头三个汉字结束位置\n    while count < 3 and start_idx < len(step2_text):\n        if is_chinese(step2_text[start_idx]):\n            count += 1\n        start_idx += 1\n    count = 0\n    # 定位结尾三个汉字开始位置\n    while count < 3 and end_idx >= 0:\n        if is_chinese(step2_text[end_idx]):\n            count += 1\n        end_idx -= 1\n    expected_text = last_three + step2_text[start_idx:end_idx+2] + first_three\n    \n    # 检查响应格式\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"响应缺少必要的标记\"}\n    \n    # 提取实际回答\n    try:\n        actual_text = response[7:-7].strip()\n    except ValueError:\n        return {\"check_code\": False, \"reason\": \"响应标记解析错误\"}\n    \n    # 验证内容是否匹配\n    if actual_text == expected_text:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": f\"内容不匹配，预期: {expected_text[:30]}...，实际: {actual_text[:30]}...\"}"}
{"prompt": "请写一篇关于“城市交通管理”的文章。文章以‘道路交通’这几个字开头。文章只出现三个段落，每个段落之间用“～～”符号分隔。其中，第2段的第50个汉字必须是“速”字。请确保模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        errors.append(\"缺少答案开始/结束标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取答案内容\n    start_idx = response.index(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.index(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查答案分隔符\n    if \"@@@@@@\" not in content:\n        errors.append(\"缺少答案分隔符@@@@@@\")\n    else:\n        answers = content.split(\"@@@@@@\")\n        if len(answers) != 2:\n            errors.append(f\"需要2个答案，实际找到{len(answers)}个\")\n        else:\n            # 验证每个答案\n            for i, ans in enumerate(answers, 1):\n                ans = ans.strip()\n                \n                # 检查开头\n                if not ans.startswith(\"道路交通\"):\n                    errors.append(f\"答案{i}未以'道路交通'开头\")\n                \n                # 检查段落分隔符\n                segments = ans.split(\"～～\")\n                if len(segments) != 3:\n                    errors.append(f\"答案{i}段落数量应为3，实际{len(segments)}段\")\n                else:\n                    # 检查第二段的第50个汉字\n                    if len(segments[1]) < 50:\n                        errors.append(f\"答案{i}第2段长度不足50字\")\n                    else:\n                        # 提取前50个字符中的汉字\n                        hanzi_list = [c for c in segments[1][:50] if '\\u4e00' <= c <= '\\u9fff']\n                        if len(hanzi_list) < 50:\n                            errors.append(f\"答案{i}第2段前50字符中汉字不足50个\")\n                        elif hanzi_list[49] != \"速\":  # 第50个汉字（索引49）\n                            errors.append(f\"答案{i}第2段第50个汉字应为'速'，实际是'{hanzi_list[49]}'\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "在现代社会中，城市中的公共交通系统扮演着至关重要的角色。它不仅影响着城市居民的日常生活，也对城市的经济发展和环境保护具有深远的影响。公共交通的类型主要包括地铁、公交车、有轨电车等，每种交通方式都有其独特的优势和挑战。地铁速度快、容量大，但建设成本高昂；公交车灵活性强，但容易受交通拥堵影响；有轨电车则兼具环保与经济优势，但其路线的规划需要经过严格的城市布局考量。随着技术的不断进步，智能交通系统也在逐渐普及，通过数据分析和智能调度，提高了公共交通的效率和舒适度。此外，公共交通的使用也与城市居民的生活方式密切相关，影响着他们的出行选择、时间管理和生活半径。因此，了解和优化公共交通系统，不仅有助于提升城市生活质量，也能促进可持续的城市发展。\n\n请撰写一篇关于城市公共交通系统的文章。文章应包含六个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第四个段落中，“效率”这个词务必至少出现两次。文章的第二段不能包含任何标点符号。在答案中避免使用“信号灯”这个词。此外，模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息列表\n    err_infos = []\n    \n    # 检查响应是否以指定标记开始和结束\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"响应未以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"响应未以【答案结束】结尾\")\n    \n    # 提取两个答案内容\n    content = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n    if not content:\n        err_infos.append(\"未找到有效的答案内容\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    content = content.group(1).strip()\n    answers = re.split(r\"\\s*\\*{6}\\s*\", content)\n    \n    # 检查答案数量\n    if len(answers) != 2:\n        err_infos.append(f\"需要两个答案，实际找到{len(answers)}个\")\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        # 检查段落分隔符\n        paragraphs = re.split(r'\\n\\n+', ans.strip())\n        if len(paragraphs) != 6:\n            err_infos.append(f\"答案{idx}段落数量错误（需6段，实际{len(paragraphs)}段）\")\n        \n        # 检查第二段标点符号\n        if len(paragraphs) >= 2:\n            second_para = paragraphs[1].replace(\" \", \"\").replace(\"\\n\", \"\")\n            if re.search(r'[,.?!;:，。？！；：“”‘’]', second_para):\n                err_infos.append(f\"答案{idx}第二段包含标点符号\")\n        \n        # 检查第四段\"效率\"出现次数\n        if len(paragraphs) >= 4:\n            count = paragraphs[3].count(\"效率\")\n            if count < 2:\n                err_infos.append(f\"答案{idx}第四段'效率'出现次数不足（需≥2次，实际{count}次）\")\n        \n        # 检查禁止词汇\"信号灯\"\n        if \"信号灯\" in ans:\n            err_infos.append(f\"答案{idx}包含禁止词汇'信号灯'\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“古代饮食文化中的礼仪与习俗”的文章，在文章中避免使用“传统”和“典雅”这两个词汇。文章只能有4个段落（不要出现标题），每个段落之间用“～～”符号分隔。第3段的第8个汉字必须是“宴”字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 定义原始指令文本\n    instruction = \"请撰写一篇关于“古代饮食文化中的礼仪与习俗”的文章，在文章中避免使用“传统”和“典雅”这两个词汇。文章只能有4个段落（不要出现标题），每个段落之间用“～～”符号分隔。第3段的第8个汉字必须是“宴”字。首先一字不差的重复上面的要求，然后直接给出答案。\"\n    \n    # 检查是否包含完整的答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \",\".join(err_infos)}\n    \n    # 提取答案部分\n    start_idx = response.index(\"【答案开始】\") + 6\n    end_idx = response.index(\"【答案结束】\")\n    answer_part = response[len(\"【答案开始】\"):-len(\"【答案开始】\")].strip()\n    \n    # 检查是否重复指令要求\n    if not answer_part.startswith(instruction):\n        return {\"check_code\": False, \"reason\": \"指令重复\"}\n    answer_part = answer_part.replace(instruction, \"\").strip()\n    \n    # 检查段落分隔符和数量\n    paragraphs = [k for k in answer_part.split(\"～～\") if k.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误: {len(paragraphs)}段\")\n    \n    # 检查第三段第八个汉字\n    if len(paragraphs) >= 3:\n        p3 = paragraphs[2].strip()\n        hanzi_count = 0\n        for char in p3:\n            if '一' <= char <= '鿿':  # 判断中文字符\n                hanzi_count += 1\n                if hanzi_count == 8:\n                    if char != \"宴\":\n                        err_infos.append(f\"第三段第8字应为'宴'实际为'{char}'\")\n                    break\n        if hanzi_count < 8:\n            err_infos.append(\"第三段不足8个汉字\")\n    else:\n        err_infos.append(\"无第三段可验证\")\n    \n    # 检查禁用词\n    for word in [\"传统\", \"典雅\"]:\n        if word in answer_part:\n            err_infos.append(f\"包含禁用词'{word}'\")\n    \n    # 检查是否存在标题\n    if any(char in answer_part for char in [\"#\", \"标题\", \"题目\", \"篇名\"]):\n        err_infos.append(\"包含标题内容\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \",\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "在现代社会，网络安全变得越来越重要。无论是个人用户还是企业，网络攻击的威胁都时刻存在。网络攻击不仅会导致经济损失，还可能危及个人隐私和国家安全。常见的网络攻击形式包括钓鱼攻击、恶意软件、DDoS攻击等。为了应对这些威胁，网络安全专家需要不断更新防御策略，使用最新的安全技术，如防火墙、入侵检测系统和加密技术。了解网络攻击的类型和防御措施对于每一个互联网用户来说都是至关重要的。\n\n请撰写一篇关于网络攻击与防御措施的文章。文章应包含以下特定要求：\n\n1. 全文至少包含400字，不超过600字。\n2. 文章必须包含“网络攻击”和“防御措施”两个词语。\n3. 文章应分为四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。\n4. 在第二个段落中，“钓鱼攻击”这个词务必至少出现两次。\n5. 在第三个段落中，段落必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。\n6. 文章最后一段以“因此，网络安全是每个人的责任。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    err_infos = []\n\n    # 检查标记格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"未正确使用答案标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n\n    # 检查字数要求\n    char_count = len(re.sub(r'\\s', '', content))\n    if char_count < 400:\n        err_infos.append(f\"字数不足400字（当前{char_count}字）\")\n    if char_count > 600:\n        err_infos.append(f\"字数超过600字（当前{char_count}字）\")\n\n    # 检查关键词\n    if \"网络攻击\" not in content:\n        err_infos.append(\"缺少关键词'网络攻击'\")\n    if \"防御措施\" not in content:\n        err_infos.append(\"缺少关键词'防御措施'\")\n\n    # 检查段落结构\n    paragraphs = [p.strip() for p in re.split(r'\\n{2,}', content) if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量应为4段（当前{len(paragraphs)}段）\")\n\n    # 检查第二段钓鱼攻击次数\n    if len(paragraphs) >= 2:\n        count = paragraphs[1].count(\"钓鱼攻击\")\n        if count < 2:\n            err_infos.append(f\"第二段'钓鱼攻击'出现次数不足2次（当前{count}次）\")\n\n    # 检查第三段句子数量\n    if len(paragraphs) >= 3:\n        sentences = [s for s in re.split(r'[。？！]', paragraphs[2]) if s.strip()]\n        if len(sentences) != 6:\n            err_infos.append(f\"第三段应为6个句子（当前{len(sentences)}句）\")\n\n    # 检查结尾句\n    if len(paragraphs) >= 4 and not paragraphs[3].endswith(\"因此，网络安全是每个人的责任。\"):\n        err_infos.append(\"最后一段未以指定句子结尾\")\n\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请写一篇关于城市交通变化的文章。文章只能有7个段落，每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“公共交通”这个词务必至少出现两次，“便利”这个词务必恰好出现一次。整篇文章总共包含15个句子（用中文句号或问号或感叹号分隔）。第三个句子要求以“随着科技的发展”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答开头缺少'【答案开始】'标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答结尾缺少'【答案结束】'标记\")\n    \n    # 提取文章内容\n    if not errors:\n        start_marker = \"【答案开始】\"\n        end_marker = \"【答案结束】\"\n        start_idx = response.find(start_marker) + len(start_marker)\n        end_idx = response.find(end_marker)\n        \n        if end_idx == -1:\n            errors.append(\"无法定位'【答案结束】'标记\")\n        else:\n            content = response[start_idx:end_idx].strip()\n            \n            # 检查段落数量\n            paragraphs = content.split('\\n\\n')\n            if len(paragraphs) != 7:\n                errors.append(f\"段落数量为{len(paragraphs)}而不是7个\")\n            \n            # 检查第二段落的关键词\n            if len(paragraphs) >= 2:\n                para2 = paragraphs[1]\n                if para2.count(\"公共交通\") < 2:\n                    errors.append(\"第二段落中'公共交通'出现次数不足2次\")\n                if para2.count(\"便利\") != 1:\n                    errors.append(\"第二段落中'便利'出现次数不是1次\")\n            else:\n                errors.append(\"无法获取第二段落内容\")\n            \n            # 检查句子总数\n            sentences = re.split(r'[。？！]', content)\n            # 过滤空字符串\n            sentences = [s.strip() for s in sentences if s.strip()]\n            if len(sentences) != 15:\n                errors.append(f\"总句子数为{len(sentences)}而不是15个\")\n            \n            # 检查第三句话\n            if len(sentences) >= 3:\n                if not sentences[2].startswith(\"随着科技的发展\"):\n                    errors.append(\"第三句话不是以'随着科技的发展'开头\")\n            else:\n                errors.append(\"无法获取第三句话\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于书店设计理念的文章。文章只能由四个段落组成（不要出现标题），每个段落之间用“～～”符号分隔，其中第三段必须恰好由六个句子（用中文句号或问号或感叹号分隔）组成。在文章中，避免使用“现代”、“数字化”和“舒适”这三个词语。文章必须恰好由15个句子组成，其中第七个句子必须以“在过去的几年中”这几个字开头。文章的内容不得少于120汉字，但不的超过300汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"未正确使用【答案开始】/【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取实际内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查禁用词\n    forbidden_words = [\"现代\", \"数字化\", \"舒适\"]\n    for word in forbidden_words:\n        if word in content:\n            err_infos.append(f\"包含了禁用词: '{word}'\")\n    \n    # 段落分隔检查\n    paragraphs = [p.strip() for p in content.split(\"～～\") if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量为{len(paragraphs)}而非4段\")\n    \n    # 第三段句子数检查\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2]\n        sentences = [s.strip() for s in re.split(r'[。？！]', third_para) if s.strip()]\n        if len(sentences) != 6:\n            err_infos.append(f\"第三段包含{len(sentences)}个句子而非6个\")\n    \n    # 总句子数和第七句检查\n    all_sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(all_sentences) != 15:\n        err_infos.append(f\"总句子数为{len(all_sentences)}而非15句\")\n    elif not all_sentences[6].startswith(\"在过去的几年中\"):\n        err_infos.append(\"第七个句子未以'在过去的几年中'开头\")\n    \n    # 字数统计\n    chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', content)\n    char_count = len(chinese_chars)\n    if char_count < 120 or char_count > 300:\n        err_infos.append(f\"文章长度{char_count}汉字，不符合120-300字要求\")\n    \n    return {\"check_code\": len(err_infos) == 0, \"reason\": err_infos}"}
{"prompt": "请写一篇关于如何在工作中提高效率的文章。文章的字数应在600字到800字之间，并以“在现代职场”这个短语开头。在文章中请包含以下三个原因：“【原因1】”、“【原因2】”和“【原因3】”。文章只能有4个段落，每个段落用两个换行符“\n\n”分隔开来。在第3个段落中，“时间管理”这个词务必至少出现两次。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息集合\n    err_infos = []\n    \n    # 检查响应是否包含答案开始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        err_infos.append(\"Missing or invalid answer markers\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[start_idx + len(start_marker):end_idx].strip()\n\n    begin = \"请写一篇关于如何在工作中提高效率的文章。文章的字数应在600字到800字之间，并以“在现代职场”这个短语开头。在文章中请包含以下三个原因：“【原因1】”、“【原因2】”和“【原因3】”。文章只能有4个段落，每个段落用两个换行符“\\n\\n”分隔开来。在第3个段落中，“时间管理”这个词务必至少出现两次。\"\n    if not content.startswith(begin):\n        err_infos.append(\"指令重复问题\")\n    content = content.replace(begin, \"\").strip()\n    \n    # 检查开头是否符合要求\n    if not content.startswith(\"在现代职场\"):\n        err_infos.append(\"Does not start with required phrase\")\n    \n    # 统计中文字数（排除标点符号和空格）\n    chinese_chars = re.findall(r'[一-龥]', content)\n    word_count = len(chinese_chars)\n    if word_count < 600 or word_count > 800:\n        err_infos.append(f\"Word count out of range ({word_count})\")\n    \n    # 检查是否包含三个原因标记\n    required_tags = [\"【原因1】\", \"【原因2】\", \"【原因3】\"]\n    for tag in required_tags:\n        if tag not in content:\n            err_infos.append(f\"Missing tag: {tag}\")\n    \n    # 检查段落结构和时间管理出现次数\n    paragraphs = [p.strip() for p in re.split('\\n\\n', content) if p.strip()]\n    \n    if len(paragraphs) != 4:\n        err_infos.append(f\"Invalid paragraph count ({len(paragraphs)})\")\n    elif len(paragraphs) >= 3:\n        third_para = paragraphs[2]\n        time_management_count = third_para.count(\"时间管理\")\n        if time_management_count < 2:\n            err_infos.append(f\"Insufficient '时间管理' in para3 ({time_management_count})\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请你撰写一篇关于“如何在现代城市中寻找安静空间”的文章，文章只能出现四个段落（不要出现标题），每个段落之间用“～～”符号分隔。第三段中不得出现任何标点符号。此外，内容中必须有“冥想”、“图书馆”这两个词语。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息收集列表\n    err_infos = []\n    \n    # 验证开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    if not content:\n        err_infos.append(\"答案内容为空\")\n    \n    # 分割两个答案\n    answers = [k for k in content.split(\"@@@@@@\") if k.strip()]\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量错误: 需要2个答案，实际{len(answers)}个\")\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers):\n        ans = ans.strip()\n        if not ans:\n            err_infos.append(f\"答案{i+1}内容为空\")\n            continue\n            \n        # 验证段落分隔符\n        paragraphs = ans.split(\"～～\")\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{i+1}段落数量错误: 需要4段，实际{len(paragraphs)}段\")\n        \n        # 验证第三段落标点符号\n        if len(paragraphs) >= 3:\n            para3 = paragraphs[2].strip()\n            if re.search(r'[,.!?;:，。！？；：、]', para3):\n                err_infos.append(f\"答案{i+1}第三段包含标点符号: '{para3[:20]}...'\")\n        \n        # 验证关键词\n        if \"冥想\" not in ans:\n            err_infos.append(f\"答案{i+1}缺少关键词'冥想'\")\n        if \"图书馆\" not in ans:\n            err_infos.append(f\"答案{i+1}缺少关键词'图书馆'\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇描述一次森林探险的文章。在文章中，要求尽量避免使用“危险”、“黑暗”、“迷路”这三个词语。同时，请确保“树木”、“阳光”和“动物”这三个词语至少各出现三次。文章应只出现四个段落，每个段落用两个换行符“\n\n”分隔开来。确保第二个段落不含任何标点符号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 验证答案标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取文章内容\n    content_match = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n    if not content_match:\n        err_infos.append(\"无法提取答案内容\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    content = content_match.group(1).strip()\n    \n    # 验证段落结构\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误（需要4段，实际{len(paragraphs)}段）\")\n    \n    # 验证第二段无标点\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1]\n        if re.search(r'[，。！？；：“”‘’（）【】、…—]', second_para):\n            err_infos.append(\"第二段落包含标点符号\")\n    \n    # 统计关键词频率\n    full_text = \"\".join(paragraphs)\n    word_counts = Counter(re.findall(r'树木|阳光|动物', full_text))\n    for word in ['树木', '阳光', '动物']:\n        if word_counts[word] < 3:\n            err_infos.append(f\"'{word}'出现次数不足（需要3次，实际{word_counts[word]}次）\")\n    \n    # 检查禁用词\n    forbidden_words = re.findall(r'危险|黑暗|迷路', full_text)\n    if forbidden_words:\n        err_infos.append(f\"包含禁用词: {', '.join(set(forbidden_words))}\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在现代社会中，咖啡文化已经成为日常生活的一部分。无论是清晨的提神饮品，还是社交场合的必备品，咖啡的角色都无可替代。然而，关于咖啡的起源、种类以及冲泡方式，很多人并不了解。咖啡的历史可以追溯到9世纪的埃塞俄比亚，传说牧羊人发现羊群在食用了一种神秘的红色果实后变得异常活跃。随后，这种果实传播到阿拉伯世界，并逐渐发展出各种不同的冲泡和饮用方式。如今，从意大利浓缩咖啡到土耳其咖啡，每种咖啡都有其独特的风味和制作工艺。了解这些差异不仅能丰富我们的知识，还能提升我们的品味和生活质量。\n\n请撰写一篇关于咖啡文化的文章。文章只能包含6个段落（不要出现标题），每个段落之间用“～～”符号分隔。在第二个段落中，“咖啡”这个词至少出现两次，“文化”这个词务必恰好只出现一次。你可以从咖啡的历史、不同国家的咖啡文化、咖啡对现代社会的影响等方面进行探索和描述。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化检查结果\n    check_code = True\n    err_infos = []\n    \n    # 1. 检查是否包含正确的起始和结束标记\n    if \"【答案开始】\" not in response:\n        check_code = False\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if \"【答案结束】\" not in response:\n        check_code = False\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    if not check_code:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容\n    start_index = response.find(\"【答案开始】\") + 6\n    end_index = response.find(\"【答案结束】\")\n    content = response[start_index:end_index].strip()\n    \n    # 2. 检查段落分隔符和段落数量\n    paragraphs = [p.strip() for p in content.split(\"～～\") if p.strip()]\n    if len(paragraphs) != 6:\n        check_code = False\n        err_infos.append(f\"段落数量应为6，实际为{len(paragraphs)}\")\n    \n    # 3. 检查第二段的关键词要求\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1]\n        coffee_count = len(re.findall(r\"咖啡\", second_para))\n        culture_count = len(re.findall(r\"文化\", second_para))\n        \n        if coffee_count < 2:\n            check_code = False\n            err_infos.append(f\"第二段'咖啡'出现次数应为≥2，实际为{coffee_count}\")\n        if culture_count != 1:\n            check_code = False\n            err_infos.append(f\"第二段'文化'出现次数应为=1，实际为{culture_count}\")\n    \n    return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos) if not check_code else \"\"}"}
{"prompt": "请为一个即将举行的虚拟音乐节撰写一段描述，内容必须包含“音符”、“节奏”和“和声”这三个词语，其中“音符”至少出现三次，“节奏”必须只出现一次，“和声”最多出现四次。描述应当至少包含150个汉字但不超过200个汉字，并且文章只出现四个段落（不要出现标题），每个段落之间用'～～'符号分隔。第三个段落不能含有任何标点符号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import defaultdict\n    \n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答必须包含【答案开始】和【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查段落分隔符\n    paragraphs = [p.strip() for p in content.split('～～')]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"需要4个段落，实际找到{len(paragraphs)}个\")\n    \n    # 检查第三段落标点\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2]\n        if re.search(r'[,.!?;:，。！？；：、…]', third_para):\n            err_infos.append(\"第三段落包含标点符号\")\n    \n    # 关键词统计\n    word_count = defaultdict(int)\n    for word in [\"音符\", \"节奏\", \"和声\"]:\n        word_count[word] = len(re.findall(word, content))\n    \n    if word_count[\"音符\"] < 3:\n        err_infos.append(f\"'音符'出现次数不足3次（实际:{word_count['音符']}）\")\n    if word_count[\"节奏\"] != 1:\n        err_infos.append(f\"'节奏'必须出现1次（实际:{word_count['节奏']}）\")\n    if word_count[\"和声\"] > 4 or word_count[\"和声\"] < 1:\n        err_infos.append(f\"'和声'应出现1-4次（实际:{word_count['和声']}）\")\n    \n    # 检查汉字数量\n    hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', content))\n    if hanzi_count < 150 or hanzi_count > 200:\n        err_infos.append(f\"描述应含150-200个汉字（实际:{hanzi_count}）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请随机生成一个中国高中学生的课程安排，按照表格格式列出每周的课程时间表，注意不要在表格格式之外添加任何其他内容。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    # 验证响应格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"缺少开始/结束标记\"}\n    \n    # 提取表格内容\n    content = response[6:-6].strip()  # 去除标记和首尾空白\n    if not content:\n        return {\"check_code\": False, \"reason\": \"表格内容为空\"}\n    \n    # 验证是否包含非表格内容\n    lines = content.splitlines()\n    for i, line in enumerate(lines):\n        stripped_line = line.strip()\n        if not stripped_line:\n            return {\"check_code\": False, \"reason\": f\"第{i+1}行为空行\"}\n        if not stripped_line.startswith('|') or not stripped_line.endswith('|'):\n            return {\"check_code\": False, \"reason\": f\"第{i+1}行不符合表格格式\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在全球化的背景下，越来越多的企业在进行跨文化交流时面临挑战。不同的文化背景可能导致沟通误解，从而影响商业合作的成功。跨文化交流不仅仅是语言的障碍，还包括文化习俗、工作方式和价值观的差异等方面。为了更好地理解这些挑战，我们需要探索跨文化交流中的几个关键因素。\n\n此外，请撰写一篇关于“跨文化交流”的文章，说明跨文化交流中可能存在的三种主要挑战，并使用“&挑战1&”、“&挑战2&”和“&挑战3&”作为这些挑战的占位符。文章由4个段落（不要出现标题）组成，每个段落之间用'～～'符号分隔。其中第3段的第8个汉字必须是“合”字。文章应包含12个句子（用中文句号或问号或感叹号分隔），并确保第7个句子多于15个汉字。模型需要回复两个不同的答案，请确保两个答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查响应格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"响应缺少开始/结束标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 分割两个答案\n    answers = [ans.strip() for ans in content.split(\"@@@@@@\") if ans.strip()]\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量应为2个，实际为{len(answers)}个\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        # 检查段落结构\n        paragraphs = [p.strip() for p in ans.split(\"～～\") if p.strip()]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{idx}段落数量应为4个，实际为{len(paragraphs)}个\")\n            continue\n        \n        # 检查句子数量\n        sentences = []\n        for p in paragraphs:\n            sentences.extend([s.strip() for s in re.split(r'[。？！]', p) if s.strip()])\n        if len(sentences) != 12:\n            err_infos.append(f\"答案{idx}句子数量应为12个，实际为{len(sentences)}个\")\n        \n        # 检查第7句长度\n        if len(sentences) >= 7:\n            ch_count = len(re.findall(r'[\\u4e00-\\u9fff]', sentences[6]))\n            if ch_count <= 15:\n                err_infos.append(f\"答案{idx}第7句仅{ch_count}个汉字，应大于15个\")\n        \n        # 检查第三段第8个汉字\n        if len(paragraphs) >= 3:\n            ch_chars = re.findall(r'[\\u4e00-\\u9fff]', paragraphs[2])\n            if len(ch_chars) < 8:\n                err_infos.append(f\"答案{idx}第三段汉字不足8个\")\n            elif ch_chars[7] != \"合\":\n                err_infos.append(f\"答案{idx}第三段第8字应为'合'，实际为'{ch_chars[7]}'\")\n        \n        # 检查挑战占位符\n        for marker in [\"&挑战1&\", \"&挑战2&\", \"&挑战3&\"]:\n            if marker not in ans:\n                err_infos.append(f\"答案{idx}缺少占位符{marker}\")\n    \n    # 检查答案差异性\n    if answers[0] == answers[1]:\n        err_infos.append(\"两个答案内容重复\")\n    \n    return {\"check_code\": len(err_infos) == 0, \"reason\": \"; \".join(err_infos) if err_infos else \"\"}"}
{"prompt": "首先，将下列文本中的第2个句子的“加”字删除；然后，再将上一步修改过的文本中第1个句子的汉字和标点符号按照倒序排列；最后，在上一步修改过的文本中的第8个汉字和第9个汉字之间插入汉字“说”。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n量子力学是研究微观粒子行为的科学，它颠覆了经典物理学的许多理论。量子叠加态和不确定性原理是其核心概念，揭示了自然界的复杂性。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 定义预期结果（经过三步处理后的文本）\n    expected = \"。论理多许的学理物说典经了覆颠它，学科的为行子粒观微究研是学力子量量子叠态和不确定性原理是其核心概念，揭示了自然界的复杂性。\"\n    \n    # 检查标记是否完整\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"答案标记不完整\"}\n    \n    # 提取标记间的内容\n    pattern = r\"【答案开始】(.*?)【答案结束】\"\n    match = re.search(pattern, response, re.DOTALL)\n    \n    if not match:\n        return {\"check_code\": False, \"reason\": \"未找到答案内容\"}\n    \n    actual = match.group(1).strip()\n    \n    # 验证内容是否完全匹配\n    if actual == expected:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": f\"返回文本不符。预期长度:{len(expected)}，实际长度:{len(actual)}\"}"}
{"prompt": "请撰写一篇关于如何在日常生活中有效管理时间的文章，请确保文章标题用《》标记。内容不能出现中文逗号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查开头标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答没有以【答案开始】开头\")\n    \n    # 检查结尾标记\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答没有以【答案结束】结尾\")\n    \n    # 仅当标记正确时检查内容\n    if not errors:\n        content = response[5:-5].strip()  # 移除标记并去除空白\n        \n        # 检查标题格式\n        title_match = re.search(r'《(.*?)》', content)\n        if not title_match or not title_match.group(1).strip():\n            errors.append(\"标题未用《》标记或标题为空\")\n        else:\n            # 检查中文逗号（仅检查标题后的内容）\n            title_end = title_match.end()\n            article_body = content[title_end:]\n            if \"，\" in article_body:\n                errors.append(\"内容中出现了中文逗号\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"，\".join(errors) if errors else \"\"\n    }"}
{"prompt": "请写一篇关于海洋环保的重要性的文章。文章中禁止出现“污染”和“垃圾”这两个词语。文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由七个句子（用中文句号或问号或感叹号分隔）组成。请在回复中详细解释并列出其中三种主要原因，使用“【原因A】”、“【原因B】”和“【原因C】”作为主要原因的占位符。文章的每个句子（用中文句号或问号或感叹号分隔）至少15个字，最多25个字。要求第四个句子（用中文句号或问号或感叹号分隔）以‘这是不容忽视的’结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取实际内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or end_idx <= start_idx:\n        errors.append(\"无法定位有效回答内容\")\n        return {\"check_code\": False, \"reason\": errors}\n    \n    content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 检查禁止词\n    if \"污染\" in content:\n        errors.append(\"内容包含禁止词'污染'\")\n    if \"垃圾\" in content:\n        errors.append(\"内容包含禁止词'垃圾'\")\n    \n    # 检查段落结构\n    paragraphs = content.split('\\n\\n')\n    if len(paragraphs) != 4:\n        errors.append(f\"段落数量应为4，实际为{len(paragraphs)}\")\n    \n    # 检查句子长度和总数\n    all_sentences = []\n    for i, para in enumerate(paragraphs):\n        # 用中文标点分割句子\n        sentences = re.split(r'[。？！]', para)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        if i == 2:  # 第三段落特殊检查\n            if len(sentences) != 7:\n                errors.append(f\"第三段句子数量应为7，实际为{len(sentences)}\")\n            \n            # 检查原因占位符\n            if \"【原因A】\" not in para:\n                errors.append(\"第三段缺少【原因A】\")\n            if \"【原因B】\" not in para:\n                errors.append(\"第三段缺少【原因B】\")\n            if \"【原因C】\" not in para:\n                errors.append(\"第三段缺少【原因C】\")\n        \n        # 检查每个句子长度\n        for j, sent in enumerate(sentences):\n            length = len(sent)\n            if length < 15 or length > 25:\n                errors.append(f\"第{i+1}段第{j+1}句长度{length}不符合要求(15-25字)：'{sent}'\")\n        \n        all_sentences.extend(sentences)\n    \n    # 检查第四句结尾\n    if len(all_sentences) >= 4:\n        if not all_sentences[3].endswith('这是不容忽视的'):\n            errors.append(f\"第四句未以'这是不容忽视的'结尾：'{all_sentences[3]}'\")\n    else:\n        errors.append(f\"总句子数不足4，无法检查第四句要求\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": errors if errors else \"所有验证通过\"\n    }"}
{"prompt": "请撰写一篇关于现代城市交通挑战及解决方案的文章。文章应包含5个段落，每个段落之间用'～～'符号分隔。在第二个段落中，“交通拥堵”这个词需至少出现两次。在文章中详细解释并列出其中三种主要解决方案，使用“&方案1&”、“&方案2&”和“&方案3&”作为占位符。要求第四个句子（用中文句号或问号或感叹号分隔）以‘随着城市化进程加快’开头。并且，第二个句子（用中文句号或问号或感叹号分隔）以‘这种趋势令人担忧’结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_index = response.find(start_marker)\n    end_index = response.find(end_marker)\n    \n    if start_index == -1 or end_index == -1 or start_index >= end_index:\n        return {\"check_code\": False, \"reason\": \"答案标记缺失\"}\n    \n    content = response[start_index + len(start_marker):end_index].strip()\n    err_infos = []\n\n    # 条件1: 段落数量验证\n    paragraphs = re.split(r'\\s*～～\\s*', content)\n    if len(paragraphs) != 5:\n        err_infos.append(f\"段落数量错误({len(paragraphs)}≠5)\")\n\n    # 条件2: 第二段\"交通拥堵\"出现次数\n    if len(paragraphs) >= 2:\n        congestion_count = paragraphs[1].count(\"交通拥堵\")\n        if congestion_count < 2:\n            err_infos.append(f\"第二段'交通拥堵'出现次数不足({congestion_count}<2)\")\n    else:\n        err_infos.append(\"无法验证第二段条件\")\n\n    # 条件3: 解决方案占位符验证\n    solution_tags = [\"&方案1&\", \"&方案2&\", \"&方案3&\"]\n    missing_tags = [tag for tag in solution_tags if tag not in content]\n    if missing_tags:\n        err_infos.append(f\"缺失解决方案占位符:{','.join(missing_tags)}\")\n\n    # 条件4和5: 句子结构验证\n    sentences = re.findall(r'.*?[。？！]', content)  # 分割所有句子\n    if len(sentences) < 4:\n        err_infos.append(\"总句子数不足4句\")\n    else:\n        # 验证第四个句子开头\n        if not sentences[3].startswith('随着城市化进程加快'):\n            err_infos.append(f\"第四句开头错误:'{sentences[3][:10]}...'\")\n        \n        # 验证第二个句子结尾\n        if len(sentences) >= 2:\n            clean_sentence = sentences[1].strip()\n            if not (clean_sentence.endswith('这种趋势令人担忧。') or \n                    clean_sentence.endswith('这种趋势令人担忧！') or \n                    clean_sentence.endswith('这种趋势令人担忧？')):\n                err_infos.append(f\"第二句结尾错误:'...{clean_sentence[-10:]}'\")\n        else:\n            err_infos.append(\"无法验证第二句条件\")\n\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\" + \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“如何通过有效沟通提高团队协作效率”的文章。请确保文章标题用$()$标记，如$(xxx)$。文章必须恰好由12个句子（用中文句号或问号或感叹号分隔）组成，其中第7个句子必须至少15个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答必须以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答必须以【答案结束】结尾\")\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案开始】\")].strip()  # 移除【答案开始】和【答案结束】\n    \n    # 检查标题格式\n    title_match = re.search(r'\\$\\([^$]*\\)\\$', content)\n    if not title_match:\n        err_infos.append(\"标题未使用$()$标记\")\n    elif title_match.group() not in content.splitlines()[0]:\n        err_infos.append(\"标题必须位于文章开头\")\n    \n    # 分句检查\n    sentences = []\n    for line in content.splitlines():\n        if re.match(r'\\$\\(.*\\)\\$', line.strip()):  # 跳过标题行\n            continue\n        # 按中文标点分句\n        line_sentences = re.split(r'([。？！])', line)\n        # 重组带标点的句子\n        combined = []\n        for i in range(0, len(line_sentences)-1, 2):\n            if line_sentences[i] or line_sentences[i+1]:\n                combined.append(line_sentences[i] + line_sentences[i+1])\n        sentences.extend([s.strip() for s in combined if s.strip()])\n    \n    # 验证句子数量\n    if len(sentences) != 12:\n        err_infos.append(f\"文章必须恰好12个句子，实际{len(sentences)}句\")\n    \n    # 验证第7句长度\n    if len(sentences) >= 7:\n        seventh_sentence = re.sub(r'[^一-龥]', '', sentences[6])  # 只保留汉字\n        if len(seventh_sentence) < 15:\n            err_infos.append(f\"第7句需≥15汉字，实际{len(seventh_sentence)}字\")\n    elif len(sentences) < 7:\n        err_infos.append(\"文章不足7个句子，无法验证第7句长度\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"所有验证通过\"\n    }"}
{"prompt": "将下列文本中的标点符号全部删除，并将每四个字作为一组，组与组之间用“||”分隔，直接返回修改后的文本，不要出现其他多余的内容。\n\n美国在国际事务中有举足轻重的地位。自二十世纪初以来，逐渐成为全球的军事、经济和文化超级大国。它拥有世界上最强大的军事力量，并且是北约的主要成员国之一，负责维护全球的安全与稳定。在外交上，美国积极参与联合国事务，并在全球范围内推广自由民主、市场经济等价值观。与此同时，美国也是全球化的主要推动者之一，对国际贸易、科技合作和气候变化等议题有着广泛的影响。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 原始文本\n    original_text = \"美国在国际事务中有举足轻重的地位。自二十世纪初以来，逐渐成为全球的军事、经济和文化超级大国。它拥有世界上最强大的军事力量，并且是北约的主要成员国之一，负责维护全球的安全与稳定。在外交上，美国积极参与联合国事务，并在全球范围内推广自由民主、市场经济等价值观。与此同时，美国也是全球化的主要推动者之一，对国际贸易、科技合作和气候变化等议题有着广泛的影响。\"\n    \n    # 删除原始文本中的标点符号\n    cleaned_text = re.sub(r'[^\\w\\s]', '', original_text)  # 移除非字母数字和空格字符\n    cleaned_text = cleaned_text.replace(' ', '')  # 移除所有空格\n    \n    # 生成期望结果：每四个字分组并用||分隔\n    groups = [cleaned_text[i:i+4] for i in range(0, len(cleaned_text), 4)]\n    expected_output = '||'.join(groups)\n    \n    # 检查响应格式\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    if not response.startswith(start_marker) or not response.endswith(end_marker):\n        return {\n            \"check_code\": False,\n            \"reason\": \"响应缺少开始/结束标记\"\n        }\n    \n    # 提取响应内容\n    content = response[len(start_marker):-len(end_marker)]\n    \n    # 验证内容\n    if content != expected_output:\n        return {\n            \"check_code\": False,\n            \"reason\": f\"内容验证失败。预期长度:{len(expected_output)}，实际长度:{len(content)}\"\n        }\n    \n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请撰写一篇关于“城市生活中的环保行动”的短文。短文需包含以下要求：以“城市居民”开头，包含“低碳”这个词。在文中详细解释并列出其中三种主要环保行动，使用“&行动1&”、“&行动2&”和“&行动3&”作为主要行动的占位符。请确保文章有3个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第2段的第8个汉字必须是“绿”字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查整体结构\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    content = response[5:-5].strip()  # 去除【答案开始/结束】标记\n    if \"@@@@@@\" not in content:\n        err_infos.append(\"答案缺少分隔符@@@@@@\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量应为2个，实际为{len(answers)}个\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        if not ans.startswith(\"城市居民\"):\n            err_infos.append(f\"答案{i}未以'城市居民'开头\")\n        if \"低碳\" not in ans:\n            err_infos.append(f\"答案{i}缺少'低碳'关键词\")\n        \n        # 检查占位符\n        placeholders = [\"&行动1&\", \"&行动2&\", \"&行动3&\"]\n        for ph in placeholders:\n            if ph not in ans:\n                err_infos.append(f\"答案{i}缺少占位符{ph}\")\n        \n        # 检查段落\n        paragraphs = re.split(r'～～+', ans)\n        if len(paragraphs) != 3:\n            err_infos.append(f\"答案{i}段落数量应为3段，实际为{len(paragraphs)}段\")\n        elif len(paragraphs) >= 2:\n            para2 = paragraphs[1].strip()\n            hanzi_count = 0\n            for char in para2:\n                if '\\u4e00' <= char <= '\\u9fff':  # 中文字符范围\n                    hanzi_count += 1\n                    if hanzi_count == 8:\n                        if char != \"绿\":\n                            err_infos.append(f\"答案{i}第2段第8个汉字应为'绿'，实际为'{char}'\")\n                        break\n            if hanzi_count < 8:\n                err_infos.append(f\"答案{i}第2段汉字数量不足8个\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于城市交通拥堵问题的文章，内容至少800字，至多1100字。文章只能有32个句子（用中文句号或问号或感叹号分隔）。文章中需包含以下词语：“高峰时段”、“公共交通”和“解决方案”。请在回复中详细解释并列出其中三种主要原因，使用“【原因1】”、“【原因2】”和“【原因3】”作为主要原因的占位符。要求文章的第五个句子以“为了缓解”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n\n    err_infos = []\n    \n    # 检查答案标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 检查字数\n    char_count = len(content)\n    if char_count < 800 or char_count > 1100:\n        err_infos.append(f\"字数不符({char_count}字)\")\n    \n    # 检查句子数量\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) != 32:\n        err_infos.append(f\"句子数量不符({len(sentences)}句)\")\n    \n    # 检查关键词\n    keywords = [\"高峰时段\", \"公共交通\", \"解决方案\"]\n    missing = [kw for kw in keywords if kw not in content]\n    if missing:\n        err_infos.append(f\"缺少关键词:{','.join(missing)}\")\n    \n    # 检查原因标记\n    reason_tags = [f\"【原因{i}】\" for i in range(1,4)]\n    missing_tags = [tag for tag in reason_tags if tag not in content]\n    if missing_tags:\n        err_infos.append(f\"缺少原因标记:{','.join(missing_tags)}\")\n    \n    # 检查第五句开头\n    if len(sentences) >= 5:\n        if not sentences[4].startswith(\"为了缓解\"):\n            err_infos.append(\"第五句不以'为了缓解'开头\")\n    else:\n        err_infos.append(\"不足5个句子\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "随着全球气候变化的加剧，极端天气事件变得越来越频繁，对农业生产的影响显著增加。干旱、洪水和飓风等气候灾害不仅威胁到粮食安全，还影响到全球的经济和社会稳定。因此，了解和预测气候变化对农业的具体影响，以及探索应对策略，变得尤为重要。在这方面，新兴技术如人工智能、遥感技术以及大数据分析提供了新的解决方案。这些技术不仅可以帮助预测天气变化，还能提供农业生产的实时监控和优化方案。此外，全球各地的科学家和农业专家正在积极合作，开发更加耐旱、耐涝的农作物品种，以增强农业体系的韧性。了解这些科技和创新的进展，能为我们提供更清晰的未来农业图景，并指导我们采取更有效的措施来应对气候挑战。\n\n请撰写一篇关于气候变化对农业生产影响的文章。文章内容至少500字至多700字。文章应只出现四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“技术”这个词务必至少出现两次。在第三个段落中，必须由8个句子（用中文句号或问号或感叹号分隔）组成。注意，文中不允许出现“灾害”和“危机”这两个词语。文章请以“面对这些挑战，我们必须尽快找到可持续发展的道路。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 提取答案内容\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    start_idx = response.find(start_tag)\n    end_idx = response.find(end_tag)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        return {\"check_code\": False, \"reason\": \"未找到答案标记\"}\n    \n    content = response[start_idx+len(start_tag):end_idx].strip()\n    \n    # 1. 字数检查（500-700字）\n    char_count = len(content)\n    if char_count < 500 or char_count > 700:\n        err_infos.append(f\"字数不符合要求（当前{char_count}字）\")\n    \n    # 2. 段落结构检查\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误（当前{len(paragraphs)}段）\")\n    else:\n        # 3. 第二段\"技术\"出现次数\n        tech_count = paragraphs[1].count(\"技术\")\n        if tech_count < 2:\n            err_infos.append(f\"第二段'技术'出现不足2次（当前{tech_count}次）\")\n        \n        # 4. 第三段句子数量\n        if len(paragraphs) >= 3:\n            sentences = re.split(r'[。？！]', paragraphs[2])\n            # 过滤空字符串\n            sentences = [s.strip() for s in sentences if s.strip()]\n            if len(sentences) != 8:\n                err_infos.append(f\"第三段句子数量错误（当前{len(sentences)}句）\")\n    \n    # 5. 禁用词检查\n    forbidden_words = [\"灾害\", \"危机\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        err_infos.append(f\"包含禁用词: {','.join(found_words)}\")\n    \n    # 6. 结尾检查\n    if not content.endswith(\"面对这些挑战，我们必须尽快找到可持续发展的道路。\"):\n        err_infos.append(\"结尾不符合要求\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“音乐对情感表达的影响”的文章，请确保文章只出现3个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第2段的第8个汉字必须是“声”字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[6:-6].strip()  # 移除标记\n    \n    # 检查段落分隔符和数量\n    paragraphs = re.split(r'～～', content)\n    if len(paragraphs) != 3:\n        errors.append(f\"段落数量错误：找到{len(paragraphs)}段，需要3段\")\n    \n    # 检查第二段第8个汉字\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1]\n        # 提取汉字序列（过滤非汉字字符）\n        hanzi_chars = [char for char in second_para if '\\u4e00' <= char <= '\\u9fff']\n        if len(hanzi_chars) < 8:\n            errors.append(\"第二段汉字数量不足8个\")\n        elif hanzi_chars[7] != '声':\n            errors.append(f\"第二段第8个汉字是'{hanzi_chars[7]}'，不是'声'\")\n    \n    # 检查多余内容\n    if content and not re.fullmatch(r'[^～]*～～[^～]*～～[^～]*', content):\n        errors.append(\"存在多余内容或分隔符使用错误\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请写一篇关于城市交通中使用电动滑板车的体验分享。文章应包含4个段落，每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“方便”这个词务必至少出现两次，“问题”这个词务必恰好只出现三次。文章应只出现15个句子（用中文句号或问号或感叹号分隔）。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证整体格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"缺少答案标记\"}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    answers = content.split(\"******\")\n    \n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": \"答案数量不正确\"}\n    \n    err_infos = []\n    \n    for i, ans in enumerate(answers, 1):\n        # 验证段落结构\n        paragraphs = ans.split(\"\\n\\n\")\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{i}段落数不足4段\")\n            continue\n        \n        # 验证第二段关键词\n        p2 = paragraphs[1]\n        convenience_count = p2.count(\"方便\")\n        problem_count = p2.count(\"问题\")\n        \n        if convenience_count < 2:\n            err_infos.append(f\"答案{i}第二段'方便'出现次数不足(需≥2，实际{convenience_count})\")\n        if problem_count != 3:\n            err_infos.append(f\"答案{i}第二段'问题'次数错误(需=3，实际{problem_count})\")\n        \n        # 验证总句子数\n        sentences = re.split(r'[。？！]', ans)\n        valid_sentences = [s.strip() for s in sentences if s.strip()]\n        if len(valid_sentences) != 15:\n            err_infos.append(f\"答案{i}句子数错误(需=15，实际{len(valid_sentences)})\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于城市公共交通的文章，要求文章的每个句子（用中文句号或问号或感叹号分隔）的最后一个字使用“也”字作为结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"回答未包含【答案开始】或【答案结束】标记\"}\n    \n    # 提取实际回答内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    if not content:\n        return {\"check_code\": False, \"reason\": \"实际回答内容为空\"}\n    \n    # 使用正则表达式分割句子（保留分隔符）\n    sentences = re.split(r'([。？！])', content)\n    valid_sentences = []\n    \n    # 重组句子（将分隔符附加到前一句）\n    current_sentence = \"\"\n    for part in sentences:\n        if not part:  # 跳过空字符串\n            continue\n        if part in \"。？！\":\n            if current_sentence:\n                valid_sentence = current_sentence + part\n                valid_sentences.append(valid_sentence)\n                current_sentence = \"\"\n        else:\n            current_sentence = part\n    \n    # 处理最后一个未闭合的句子\n    if current_sentence:\n        valid_sentences.append(current_sentence)\n    \n    # 检查每个句子的最后一个字（不包括标点）\n    errors = []\n    for i, sent in enumerate(valid_sentences):\n        # 跳过仅包含标点的\"句子\"\n        if sent in \"。？！\":\n            continue\n            \n        # 获取句子的实际结尾字（去掉标点）\n        clean_sent = sent.rstrip(\"。？！\")\n        if not clean_sent:  # 处理只有标点的情况\n            continue\n            \n        last_char = clean_sent[-1]\n        if last_char != '也':\n            errors.append(f\"第{i+1}句「{sent}」结尾字「{last_char}」不符合要求\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \"；\".join(errors)}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请描述一个热闹的集市场景，要求在描述中必须只出现“摊贩”、“吆喝”和“人群”三个词语，但每个词语出现不多于三次。请以“当我走进”这几个字开头，并撰写一篇关于“集市中的食物”的文章，请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第3段至少要150个汉字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    # 检查答案起止标记\n    if not response.startswith(start_marker) or end_marker not in response:\n        err_infos.append(\"答案起止标记缺失\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    content = response.split(start_marker)[1].split(end_marker)[0].strip()\n    answers = content.split(\"@@@@@@\")\n    \n    # 检查答案数量\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量错误：需要2个，实际{len(answers)}个\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        # 检查开头\n        if not ans.startswith(\"当我走进\"):\n            err_infos.append(f\"答案{idx}: 未以'当我走进'开头\")\n        \n        # 检查段落分隔符\n        paragraphs = ans.split(\"～～\")\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{idx}: 段落数量错误（需要4段，实际{len(paragraphs)}段）\")\n        else:\n            # 检查第三段长度\n            third_para = paragraphs[2]\n            hanzi_count = len(re.findall(r'[\\u4e00-\\u9fff]', third_para))\n            if hanzi_count < 150:\n                err_infos.append(f\"答案{idx}: 第3段仅{hanzi_count}汉字（需要≥150）\")\n            \n            # 检查全文字数限制\n            full_text = \"\".join(paragraphs)\n            for word in [\"摊贩\", \"吆喝\", \"人群\"]:\n                count = full_text.count(word)\n                if count > 3:\n                    err_infos.append(f\"答案{idx}: '{word}'出现{count}次（需≤3次）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos if err_infos else []\n    }"}
{"prompt": "法国巴黎是一个历史悠久的城市，以其丰富的文化遗产和艺术氛围闻名于世。巴黎有许多著名的地标，包括艾菲尔铁塔、卢浮宫和凯旋门等。除此之外，巴黎的街头艺术也是一道独特的风景线。街头艺术不仅包括涂鸦和壁画，还包括各种形式的表演艺术，如街头音乐、舞蹈和戏剧等。这些艺术形式不仅丰富了城市的文化氛围，也吸引了大量游客前来参观和体验。巴黎街头艺术的发展有其历史背景，从20世纪60年代的反文化运动到今天，街头艺术逐渐成为城市文化不可或缺的一部分。\n\n\n请你写一篇关于巴黎街头艺术的文章，要求在描述中不要使用“现代”、“创新”、“技术”这几个词。文章的第三个句子必须以“在巴黎的街头”开头。第四个句子必须以“这是一种独特的体验”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息列表\n    err_infos = []\n    \n    # 检查标记完整性\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答开头缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答结尾缺少【答案结束】标记\")\n    \n    # 提取实际回答内容\n    content_match = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n    if not content_match:\n        err_infos.append(\"无法提取标记之间的内容\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    content = content_match.group(1).strip()\n    \n    # 检查禁用词\n    forbidden_words = [\"现代\", \"创新\", \"技术\"]\n    for word in forbidden_words:\n        if word in content:\n            err_infos.append(f\"文章包含禁用词: '{word}'\")\n    \n    # 分割句子\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    \n    # 检查句子数量\n    if len(sentences) < 4:\n        err_infos.append(\"文章少于4个句子\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 检查第三个句子开头\n    if not sentences[2].startswith(\"在巴黎的街头\"):\n        err_infos.append(f\"第三个句子开头不符合要求: '{sentences[2][:10]}...'\")\n    \n    # 检查第四个句子结尾\n    if not sentences[3].endswith(\"这是一种独特的体验\"):\n        err_infos.append(f\"第四个句子结尾不符合要求: '...{sentences[3][-10:]}'\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请撰写一篇关于“城市交通与智能优化”的文章，探讨在现代城市中使用人工智能技术优化交通流量的可能性。文章必须恰好由15个句子组成（以中文句号或问号或感叹号分隔），其中第10个句子的第4个汉字必须是“速”字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息收集列表\n    err_infos = []\n    \n    # 验证起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    answers = content.split(\"@@@@@@\")\n    \n    # 验证答案数量\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量错误：需要2个答案，实际{len(answers)}个\")\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        # 分割句子\n        sentences = [s.strip() for s in re.split(r'[。？！]', ans) if s.strip()]\n        \n        # 验证句子数量\n        if len(sentences) != 15:\n            err_infos.append(f\"答案{idx}句子数量错误：需要15句，实际{len(sentences)}句\")\n            continue\n        \n        # 验证第10句第4个汉字\n        if len(sentences) >= 10:\n            tenth = sentences[9]\n            hanzi_count = 0\n            found = False\n            for char in tenth:\n                if '\\u4e00' <= char <= '\\u9fff':  # 判断汉字字符\n                    hanzi_count += 1\n                    if hanzi_count == 4:\n                        found = (char == \"速\")\n                        break\n            \n            if hanzi_count < 4:\n                err_infos.append(f\"答案{idx}第10句汉字不足4个\")\n            elif not found:\n                err_infos.append(f\"答案{idx}第10句第4个汉字不是'速'字\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于宠物对人类心理健康影响的文章。文章应只有7个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“幸福”这个词务必至少出现两次。文章的第四个句子（用中文句号或问号或感叹号分隔）必须以“许多人认为”开头。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证整体结构\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案未使用指定标记\"}\n\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 分割两个答案\n    answers = [ans.strip() for ans in content.split(\"******\", 1)]\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": \"答案分隔符错误\"}\n\n    err_infos = []\n    \n    for i, ans in enumerate(answers):\n        # 验证段落数量\n        paragraphs = [p.strip() for p in ans.split(\"\\n\\n\") if p.strip()]\n        if len(paragraphs) != 7:\n            err_infos.append(f\"答案{i+1}段落数量错误\")\n\n        # 验证第二段\"幸福\"次数\n        if len(paragraphs) >= 2:\n            count = paragraphs[1].count(\"幸福\")\n            if count < 2:\n                err_infos.append(f\"答案{i+1}第二段'幸福'出现{count}次\")\n\n        # 验证第四句开头\n        sentences = re.split(r'[。？！]', ans)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) >= 4:\n            if not sentences[3].startswith(\"许多人认为\"):\n                err_infos.append(f\"答案{i+1}第四句不以'许多人认为'开头\")\n        else:\n            err_infos.append(f\"答案{i+1}句子数量不足\")\n\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \",\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请将下列文本中的所有标点符号删去，再将每8个字作为一组，组与组之间用符号“>”进行分割，然后将位于最中间的那组文字进行倒序排列。直接返回修改后的文本，不要出现其他多余的内容。\n\n冰激凌的制作过程精细而充满乐趣，它结合了科学与艺术，使得最终产品既美味又绵滑。制作冰激凌的核心步骤包括混合、冷冻以及搅拌。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    import string\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"回答格式错误：缺少开始或结束标记\"}\n    \n    # 提取中间内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    # 检查是否包含其他多余内容\n    if \"答案开始\" in content or \"答案结束\" in content:\n        return {\"check_code\": False, \"reason\": \"回答格式错误：内容区包含多余标记\"}\n    \n    # 检查是否包含标点符号\n    chinese_punctuation = \"，。！？；：‘’“”【】（）《》——…、\"\n    all_punctuation = string.punctuation + chinese_punctuation\n    if any(char in all_punctuation for char in content):\n        return {\"check_code\": False, \"reason\": \"内容包含标点符号\"}\n    \n    # 检查分组格式\n    groups = content.split('>')\n    if not groups:\n        return {\"check_code\": False, \"reason\": \"分组格式错误：无有效分组\"}\n    \n    # 检查每组长度\n    for i, group in enumerate(groups):\n        if i < len(groups) - 1 and len(group) != 8:\n            return {\"check_code\": False, \"reason\": f\"第{i+1}组长度不为8字（实际长度:{len(group)}）\"}\n    \n    # 检查中间组倒序\n    n = len(groups)\n    if n == 0:\n        return {\"check_code\": False, \"reason\": \"无有效分组\"}\n    \n    mid_index = n // 2\n    mid_group = groups[mid_index]\n    expected_reversed = mid_group[::-1]\n    \n    if mid_group != expected_reversed:\n        return {\"check_code\": False, \"reason\": f\"中间组（第{mid_index+1}组）未倒序排列\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请描述如果一个人在日常生活中突然失去味觉，他可以尝试哪些简单的方法来恢复或适应这种变化？请完全用拼音来回答，不要使用汉字或其他文字形式。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        return {\"check_code\": False, \"reason\": \"开头缺少【答案开始】标记\"}\n    if not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"结尾缺少【答案结束】标记\"}\n    \n    # 提取答案内容\n    start_tag = \"【答案开始】\"\n    end_tag = \"【答案结束】\"\n    content = response[len(start_tag):-len(end_tag)]\n    \n    # 验证内容是否为纯拼音（允许空格和常见中文标点）\n    content = content.replace(\"\\n\", \"\")\n    allowed_chars = r\"^[ a-z,，.。?？!！、:：;；'‘\\\"“”()（）]*$\"\n    if not re.match(allowed_chars, content):\n        # 检测非法字符\n        illegal_chars = set()\n        for char in content:\n            if char >= '0' and char <= '9':\n                continue\n            if not re.match(r'[ a-z,，.。?？!！、:：;；\\'‘\"“”()（）]', char):\n                illegal_chars.add(char)\n                return {\"check_code\": False, \"reason\": f\"包含非拼音字符：{''.join(illegal_chars)}\"}\n                break  # 发现一个非法字符即终止\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请描述一下你认为自动驾驶技术如何改变未来城市交通系统的运作方式。文章内容最少200字，最多400字。请在回复中详细解释并列出其中三种主要原因，使用“【原因1】”、“【原因2】”和“【原因3】”作为主要原因的占位符。同时，要求第二个句子（用中文句号或问号或感叹号分隔）以‘这将大大提升效率’结尾。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 验证起始结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"答案缺少起始/结束标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取内容主体\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 验证答案分隔符\n    answers = [ans.strip() for ans in content.split(\"******\") if ans.strip()]\n    if len(answers) != 2:\n        err_infos.append(f\"需要2个答案，实际{len(answers)}个\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers, 1):\n        # 字数检查（200-400字）\n        if not (200 <= len(ans) <= 400):\n            err_infos.append(f\"答案{i}字数不符({len(ans)}字)\")\n        \n        # 原因标记检查\n        for tag in [\"【原因1】\", \"【原因2】\", \"【原因3】\"]:\n            if tag not in ans:\n                err_infos.append(f\"答案{i}缺少{tag}\")\n        \n        # 第二句结尾检查\n        sentences = re.split(r'[。？！]', ans)\n        valid_sentences = [s.strip() for s in sentences if s.strip()]\n        \n        if len(valid_sentences) < 2:\n            err_infos.append(f\"答案{i}句子数量不足\")\n        else:\n            second_sentence = valid_sentences[1]\n            if not second_sentence.endswith(\"这将大大提升效率\"):\n                err_infos.append(f\"答案{i}第二句结尾不符合要求\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "首先，将下列文本中的每个句子开头加上“==多少”；然后，再将上一步修改过的文本中第7个句子和第4个句子的顺序调换；然后，再将上一步修改过的文本中的第1个句子的第11个汉字删除；最后，在上一步修改过的文本中的第58个汉字和第59个汉字之间插入汉字“首”。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n乙型肝炎作为一种传染性疾病，其传播途径多样且防治难度较大。乙肝病毒可以通过血液、体液和母婴传播，感染后可能导致慢性肝病甚至肝癌。为了有效预防乙肝，接种乙肝疫苗是最主要的措施。疫苗能够刺激机体产生免疫反应，从而在病毒入侵时提供保护。对于已经感染乙肝病毒的患者，抗病毒药物治疗可以抑制病毒复制，减缓疾病进展，降低传染性。乙肝的防治还需要加强公共卫生宣传，促进健康教育，提高人们的自我保护意识。通过多方努力，可以有效减少乙肝的传播，改善患者的生活质量。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    # 定义原始文本\n    original_text = \"乙型肝炎作为一种传染性疾病，其传播途径多样且防治难度较大。乙肝病毒可以通过血液、体液和母婴传播，感染后可能导致慢性肝病甚至肝癌。为了有效预防乙肝，接种乙肝疫苗是最主要的措施。疫苗能够刺激机体产生免疫反应，从而在病毒入侵时提供保护。对于已经感染乙肝病毒的患者，抗病毒药物治疗可以抑制病毒复制，减缓疾病进展，降低传染性。乙肝的防治还需要加强公共卫生宣传，促进健康教育，提高人们的自我保护意识。通过多方努力，可以有效减少乙肝的传播，改善患者的生活质量。\"\n    \n    # 验证标记格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案缺少开始/结束标记\"}\n    \n    # 提取实际答案\n    actual_answer = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    \n    # 标准处理流程\n    # 步骤1: 每个句子开头加\"==多少\"\n    sentences = [s.strip() for s in original_text.split('。') if s.strip()]\n    step1 = [\"==多少\" + s + \"。\" for s in sentences]\n    \n    # 步骤2: 交换第4和第7个句子\n    step2 = step1.copy()\n    step2[3], step2[6] = step2[6], step2[3]\n    \n    # 步骤3: 删除第1个句子第11个汉字\n    step3 = step2.copy()\n    s0 = step3[0]\n    step3[0] = s0[:10] + s0[11:]\n    \n    # 步骤4: 第58个汉字后插入\"首\"\n    merged_text = ''.join(step3)\n    if len(merged_text) >= 57:\n        step4 = merged_text[:57] + \"首\" + merged_text[57:]\n    else:\n        step4 = merged_text\n    \n    # 预期结果\n    expected = step4\n    \n    # 验证结果\n    if actual_answer == expected:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": f\"结果不匹配，预期长度:{len(expected)}，实际长度:{len(actual_answer)}\"}"}
{"prompt": "请写一篇关于宠物护理的文章，详细解释并列出其中三种主要方法，使用“【方法1】”、“【方法2】”和“【方法3】”作为主要方法的占位符。文章只能由30个句子（用中文句号或问号或感叹号分隔）组成，只出现8个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第4个段落中，“健康”这个词务必至少出现两次。要求文章的第五个句子（用中文句号或问号或感叹号分隔）以‘在现代社会’开头。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from typing import List, Tuple\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 尝试提取答案部分\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    # 检查答案标记是否存在\n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        return {\"check_code\": False, \"reason\": \"答案标记缺失或位置错误\"}\n    \n    # 提取答案内容（排除标记本身）\n    answer = response[start_idx+len(start_marker):end_idx].strip()\n\n    begin = \"请写一篇关于宠物护理的文章，详细解释并列出其中三种主要方法，使用“【方法1】”、“【方法2】”和“【方法3】”作为主要方法的占位符。文章只能由30个句子（用中文句号或问号或感叹号分隔）组成，只出现8个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。在第4个段落中，“健康”这个词务必至少出现两次。要求文章的第五个句子（用中文句号或问号或感叹号分隔）以‘在现代社会’开头。\"\n    if not answer.startswith(begin):\n        err_infos.append(\"指令重复错误\")\n    answer = answer.replace(begin,\"\").strip()\n    \n    # 验证段落结构\n    paragraphs = [p.strip() for p in answer.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 8:\n        err_infos.append(f\"段落数量错误: {len(paragraphs)}≠8\")\n    \n    # 验证总句子数（使用中文标点分割）\n    all_sentences = []\n    for para in paragraphs:\n        # 使用正则分割句子（保留分隔符以验证位置）\n        sentences = re.split(r'([。？！])', para)\n        # 重组完整句子（分隔符与句子合并）\n        cleaned = []\n        for i in range(0, len(sentences)-1, 2):\n            if sentences[i] or sentences[i+1]:\n                cleaned.append(sentences[i] + sentences[i+1])\n        all_sentences.extend(cleaned)\n    \n    # 验证句子总数\n    if len(all_sentences) != 30:\n        err_infos.append(f\"句子总数错误: {len(all_sentences)}≠30\")\n    \n    # 验证第五个句子开头\n    if len(all_sentences) >= 5:\n        fifth_sentence = all_sentences[4].strip()\n        if not fifth_sentence.startswith(\"在现代社会\"):\n            err_infos.append(f\"第五句不以'在现代社会'开头: '{fifth_sentence[:10]}...'\")\n    else:\n        err_infos.append(\"句子不足5句，无法验证第五句\")\n    \n    # 验证第四个段落的健康词频\n    if len(paragraphs) >= 4:\n        health_count = paragraphs[3].count(\"健康\")\n        if health_count < 2:\n            err_infos.append(f\"第四段'健康'出现次数不足: {health_count}<2\")\n    else:\n        err_infos.append(\"段落不足4段，无法验证健康词频\")\n    \n    # 验证方法占位符存在性\n    required_tags = [\"【方法1】\", \"【方法2】\", \"【方法3】\"]\n    missing_tags = [tag for tag in required_tags if tag not in answer]\n    if missing_tags:\n        err_infos.append(f\"缺失方法标签: {','.join(missing_tags)}\")\n    \n    # 返回最终验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "描述一个独特的烹饪体验，分享你对这次体验的详细看法。在文章中，避免使用“美味”、“香气”、“色泽”这三个词。请在回复中详细解释并列出其中三种主要影响因素，使用“&因素1&”、“&因素2&”和“&因素3&”作为影响因素的占位符。文章应包含4个段落（不要出现标题），每个段落之间用'～～'符号分隔。在第二个段落中，“食材”这个词务必恰好只出现两次。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 1. 检查答案标记完整性\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 2. 检查段落分隔符\n    paragraphs = content.split(\"～～\")\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误（应为4段，实际{len(paragraphs)}段）\")\n    \n    # 3. 检查禁用词使用\n    forbidden_words = [\"美味\", \"香气\", \"色泽\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        err_infos.append(f\"使用了禁用词：{', '.join(found_words)}\")\n    \n    # 4. 检查影响因素占位符\n    placeholders = [\"&因素1&\", \"&因素2&\", \"&因素3&\"]\n    missing_ph = [ph for ph in placeholders if ph not in content]\n    if missing_ph:\n        err_infos.append(f\"缺少影响因素占位符：{', '.join(missing_ph)}\")\n    \n    # 5. 检查第二段\"食材\"出现次数\n    if len(paragraphs) >= 2:\n        ingredient_count = paragraphs[1].count(\"食材\")\n        if ingredient_count != 2:\n            err_infos.append(f\"第二段'食材'出现次数错误（应为2次，实际{ingredient_count}次）\")\n    \n    # 6. 检查多余内容\n    if response.count(\"【答案开始】\") > 1 or response.count(\"【答案结束】\") > 1:\n        err_infos.append(\"存在多余标记符\")\n    if content.strip() != content:\n        err_infos.append(\"存在多余空白字符\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"验证通过\"\n    }"}
{"prompt": "请以“家庭电器的选购策略”为主题的文章。文章内容必须恰好由10个句子（用中文句号或问号或感叹号分隔）组成。文章必须出现“预算”、“品牌”和“环保”这三个词。文章内容中需详细解释三个主要选购因素，并使用“&因素1&”、“&因素2&”和“&因素3&”作为主要选购因素的占位符。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查响应格式\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"响应开头缺少'【答案开始】'标记\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"响应结尾缺少'【答案结束】'标记\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\", 1).replace(\"【答案结束】\", \"\").strip()\n    \n    # 验证指令重复部分\n    required_repetition = \"请以“家庭电器的选购策略”为主题的文章。文章内容必须恰好由10个句子（用中文句号或问号或感叹号分隔）组成。文章必须出现“预算”、“品牌”和“环保”这三个词。文章内容中需详细解释三个主要选购因素，并使用“&因素1&”、“&因素2&”和“&因素3&”作为主要选购因素的占位符。\"\n    if not content.startswith(required_repetition):\n        err_infos.append(\"未正确重复指令要求\")\n    \n    # 提取文章内容（移除重复的指令部分）\n    article = content[len(required_repetition):].strip()\n    \n    # 验证句子数量\n    sentences = [s.strip() for s in re.split(r'[。？！]', article) if s.strip()]\n    if len(sentences) != 10:\n        err_infos.append(f\"句子数量为{len(sentences)}而非10个\")\n    \n    # 验证关键词\n    required_keywords = {\"预算\", \"品牌\", \"环保\"}\n    missing_keywords = [kw for kw in required_keywords if kw not in article]\n    if missing_keywords:\n        err_infos.append(f\"缺少关键词：{', '.join(missing_keywords)}\")\n    \n    # 验证占位符\n    required_placeholders = {\"&因素1&\", \"&因素2&\", \"&因素3&\"}\n    missing_placeholders = [ph for ph in required_placeholders if ph not in article]\n    if missing_placeholders:\n        err_infos.append(f\"缺少占位符：{', '.join(missing_placeholders)}\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "首先，将下列文本的标点符号全部删除；然后，再将上一步修改过的文本中的文字按照每10个汉字组成一个部分，每个部分之间用“--”分隔，如果分隔到最后汉字数量不够，将剩下的汉字组成一个部分即可；最后，将上一步修改过的文本中的第5个汉字和第14个汉字互换位置。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n总体经济政策对国家经济的稳定和增长具有重要作用。请评估某一国家在经济危机期间采取的总体经济政策，并分析其效果和局限性。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "import re\n\ndef check_response(response):\n    # 定义问题文本\n    text = \"总体经济政策对国家经济的稳定和增长具有重要作用。请评估某一国家在经济危机期间采取的总体经济政策，并分析其效果和局限性。\"\n    \n    # 处理文本函数\n    def process_text(t):\n        # 1. 删除所有非汉字字符（包括标点、空格等）\n        clean_str = re.sub(r'[^\\u4e00-\\u9fff]', '', t)\n        n = len(clean_str)\n        \n        # 2. 按每10个汉字分组，用\"--\"连接\n        parts = [clean_str[i:i+10] for i in range(0, n, 10)]\n        grouped_str = \"--\".join(parts)\n        \n        # 3. 如果汉字数量>=14，交换第5和第14个汉字\n        if n >= 14:\n            # 定位汉字位置（忽略分隔符）\n            count = 0\n            index1, index2 = -1, -1\n            i = 0\n            lst = list(grouped_str)\n            length = len(lst)\n            \n            while i < length:\n                if lst[i] == '-':\n                    i += 2  # 跳过分隔符\n                    continue\n                count += 1\n                if count == 5:\n                    index1 = i\n                if count == 14:\n                    index2 = i\n                    break\n                i += 1\n            \n            # 执行交换\n            if index1 != -1 and index2 != -1:\n                lst[index1], lst[index2] = lst[index2], lst[index1]\n                grouped_str = ''.join(lst)\n        return grouped_str\n\n    # 生成预期答案\n    expected = process_text(text)\n    \n    # 从response中提取实际答案\n    pattern = r'【答案开始】(.*?)【答案结束】'\n    match = re.search(pattern, response, re.DOTALL)\n    if not match:\n        return {\"check_code\": False, \"reason\": \"答案部分未找到或格式错误\"}\n    \n    actual = match.group(1).strip()\n    \n    # 验证答案\n    if actual == expected:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": f\"答案内容不正确，预期: '{expected}'，实际: '{actual}'\"}"}
{"prompt": "写一篇关于夏季海滩度假的文章，文章应只出现四个段落（不要出现标题），文章至少500字最多700字。文章内容不能出现中文逗号。每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由7个句子（用中文句号或问号或感叹号分隔）组成。文章中必须包含“阳光”和“沙滩”这两个词语。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 初始化检查结果\n    check_code = True\n    err_infos = []\n    \n    # 检查答案标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker) or not response.endswith(end_marker):\n        check_code = False\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 检查答案分隔符\n    answers = content.split(\"******\")\n    if len(answers) != 2:\n        check_code = False\n        err_infos.append(\"答案分隔符数量错误\")\n        return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos)}\n    \n    # 验证每个答案\n    for idx, answer in enumerate(answers, 1):\n        # 检查段落结构\n        paragraphs = answer.split(\"\\n\\n\")\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{idx}段落数量错误\")\n            check_code = False\n            continue\n            \n        # 检查字数\n        full_text = ''.join(paragraphs)\n        char_count = len(re.findall(r'[\\u4e00-\\u9fa5]', full_text))\n        if not 500 <= char_count <= 700:\n            err_infos.append(f\"答案{idx}字数不符({char_count}字)\")\n            check_code = False\n            \n        # 检查中文逗号\n        if \"，\" in full_text:\n            err_infos.append(f\"答案{idx}包含中文逗号\")\n            check_code = False\n            \n        # 检查第三段句子数量\n        if idx <= len(paragraphs):  # 确保有第三段\n            sentences = re.split(r'[。？！]', paragraphs[2])\n            sentences = [s.strip() for s in sentences if s.strip()]\n            if len(sentences) != 7:\n                err_infos.append(f\"答案{idx}第三段句子数量不符({len(sentences)}句)\")\n                check_code = False\n                \n        # 检查关键词\n        if \"阳光\" not in full_text or \"沙滩\" not in full_text:\n            err_infos.append(f\"答案{idx}缺少关键词\")\n            check_code = False\n            \n    return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos) if err_infos else \"\"}"}
{"prompt": "请撰写一篇关于城市交通拥堵问题的文章，文章需包含“城市发展”和“交通管理”这两个词。文章应以“城市发展”这四个字开头，并在内容中包含对交通管理策略的三个主要挑战的详细解释，使用“【挑战1】”、“【挑战2】”和“【挑战3】”作为挑战的占位符。文章应由四个段落组成，每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好有六个句子。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化检查结果\n    check_code = True\n    err_infos = []\n    \n    # 1. 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        check_code = False\n        err_infos.append(\"回答未以'【答案开始】'开头\")\n    if not response.endswith(\"【答案结束】\"):\n        check_code = False\n        err_infos.append(\"回答未以'【答案结束】'结尾\")\n    \n    # 提取实际回答内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[6:-6].strip()\n    \n    # 2. 检查开头\n    if not content.startswith(\"城市发展\"):\n        check_code = False\n        err_infos.append(\"文章开头不是'城市发展'\")\n    \n    # 3. 检查关键词\n    if \"城市发展\" not in content:\n        check_code = False\n        err_infos.append(\"缺少关键词'城市发展'\")\n    if \"交通管理\" not in content:\n        check_code = False\n        err_infos.append(\"缺少关键词'交通管理'\")\n    \n    # 4. 检查挑战标记\n    challenge_markers = [\"【挑战1】\", \"【挑战2】\", \"【挑战3】\"]\n    for marker in challenge_markers:\n        if marker not in content:\n            check_code = False\n            err_infos.append(f\"缺少挑战标记{marker}\")\n    \n    # 5. 段落结构检查\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 4:\n        check_code = False\n        err_infos.append(f\"段落数量错误，应为4段，实际为{len(paragraphs)}段\")\n    \n    # 6. 检查第三段句子数量\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2].strip()\n        # 按中文标点分割句子\n        sentences = re.split(r'[。？！]', third_para)\n        # 过滤空字符串\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            check_code = False\n            err_infos.append(f\"第三段应为6个句子，实际为{len(sentences)}句\")\n    elif len(paragraphs) < 3:\n        check_code = False\n        err_infos.append(\"段落不足3段，无法检查第三段句子数量\")\n    \n    # 返回结果\n    return {\n        \"check_code\": check_code,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于“城市生活中的绿色空间”的文章。文章应只由4个段落组成（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“公园”这个词至少出现两次。要求文章的每个句子（用中文句号或问号或感叹号分隔）最多20个字。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查首尾标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content = response[5:-5].strip()  # 移除首尾标记\n    if not content:\n        err_infos.append(\"答案内容为空\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 分割两个答案\n    answers = content.split(\"******\", 1)\n    if len(answers) != 2:\n        err_infos.append(\"答案分隔符错误：必须使用******分隔两个答案\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 验证每个答案\n    for ans_idx, answer in enumerate(answers, 1):\n        # 检查段落分隔\n        paragraphs = [p.strip() for p in re.split(r'\\n{2,}', answer.strip()) if p.strip()]\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{ans_idx}段落数错误：需要4段，实际{len(paragraphs)}段\")\n            continue\n        \n        # 检查第二段\"公园\"出现次数\n        park_count = paragraphs[1].count(\"公园\")\n        if park_count < 2:\n            err_infos.append(f\"答案{ans_idx}第二段'公园'出现次数不足：需要≥2次，实际{park_count}次\")\n        \n        # 检查每段句子长度\n        for p_idx, para in enumerate(paragraphs, 1):\n            # 拆分句子时保留分隔符确保正确计数\n            sentences = re.split(r'([。？！])', para)\n            sentences = [s.strip() for s in sentences if s.strip() and s not in \"。？！\"]\n            \n            for s_idx, sent in enumerate(sentences, 1):\n                if len(sent) > 20:\n                    err_infos.append(\n                        f\"答案{ans_idx}第{p_idx}段第{s_idx}句超长：\"\n                        f\"{len(sent)}字>20字（{sent[:10]}...）\"\n                    )\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“城市夜市中的独特职业”的文章，要求文章中必须出现“摊主”、“灯光”和“喧嚣”这三个词语，并且每个词语必须至少使用3次。文章只能有5个段落（不要出现标题），每个段落之间用“～～”符号分隔，其中第2段不能有任何标点符号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    start_index = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_index = response.find(\"【答案结束】\")\n    content = response[start_index:end_index].strip()\n    \n    # 检查段落分隔符和段落数量\n    paragraphs = [p.strip() for p in content.split(\"～～\") if p.strip()]\n    if len(paragraphs) != 5:\n        err_infos.append(f\"段落数量错误: 需要5段，实际{len(paragraphs)}段\")\n    \n    # 检查第二段标点符号\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1]\n        if re.search(r'[，。！？；：“”‘’（）【】、,.!?;:\\'\\\"()\\[\\]{}]', second_para):\n            err_infos.append(\"第2段包含标点符号\")\n    \n    # 检查关键词出现次数\n    keywords = {\"摊主\": 0, \"灯光\": 0, \"喧嚣\": 0}\n    full_text = \"\".join(paragraphs)\n    for word in keywords:\n        count = full_text.count(word)\n        keywords[word] = count\n        if count < 3:\n            err_infos.append(f\"'{word}'出现次数不足: 需要3次，实际{count}次\")\n    \n    # 返回验证结果\n    if not err_infos:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}"}
{"prompt": "请撰写一篇关于如何在家庭环境中有效利用空间进行植物栽培的文章。请确保文章标题用$()$标记，如$(xxx)$。文章只能恰好由9个句子组成，每个句子之间用“^”作为分隔符号。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义必须重复的指令文本\n    required_text = \"请撰写一篇关于如何在家庭环境中有效利用空间进行植物栽培的文章。请确保文章标题用$()$标记，如$(xxx)$。文章只能恰好由9个句子组成，每个句子之间用“^”作为分隔符号。\"\n    \n    # 初始化错误列表\n    err_infos = []\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答缺少结束标记【答案结束】\")\n    \n    # 提取核心内容（去除标记）\n    content = response[len(\"【答案开始】\"):-len(\"【答案开始】\")].strip()\n    \n    # 检查是否重复指令要求\n    if not content.startswith(required_text):\n        err_infos.append(\"未一字不差重复指令要求\")\n    \n    # 提取答案部分（指令文本之后的内容）\n    answer_part = content.replace(required_text, \"\").strip()\n    \n    # 检查标题格式\n    title_match = re.search(r'\\$\\((.+?)\\)\\$', answer_part)\n    if not title_match:\n        err_infos.append(\"未找到$()$格式的标题\")\n    else:\n        # 检查标题后是否紧跟内容\n        title_end = title_match.end()\n        if title_end >= len(answer_part) or answer_part[title_end] in '^':\n            err_infos.append(\"标题后缺少文章内容\")\n    \n    # 检查句子分隔符和数量\n    sentences = []\n    if '^' in answer_part:\n        parts = answer_part.split('^')\n        # 从标题后开始分割句子（跳过标题）\n        if title_match:\n            title_end_index = answer_part.find('^', title_match.end())\n            if title_end_index != -1:\n                sentences = answer_part[title_end_index+1:].split('^')\n            else:\n                err_infos.append(\"标题后缺少内容分隔符\")\n        else:\n            sentences = parts\n    else:\n        err_infos.append(\"未找到句子分隔符^\")\n    \n    # 验证句子数量\n    if len(sentences) != 9:\n        err_infos.append(f\"句子数量错误（实际：{len(sentences)}，需要：9）\")\n    else:\n        # 检查句子有效性\n        for i, sent in enumerate(sentences):\n            if not sent.strip():\n                err_infos.append(f\"第{i+1}个句子为空\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于乡村旅游发展的文章，要求包含以下特定内容：文章需要以“最近几年”开头，文章中不能出现“城市”、“现代化”、“高科技”这三个词，且必须包含“自然”、“文化”、“生态”这三个词。文章需包含15个句子（用中文句号或问号或感叹号分隔）。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查是否包含答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        errors.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \",\".join(errors)}\n    \n    # 提取答案内容\n    start_idx = response.index(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.index(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查是否重复要求\n    required_text = \"请写一篇关于乡村旅游发展的文章，要求包含以下特定内容：文章需要以“最近几年”开头，文章中不能出现“城市”、“现代化”、“高科技”这三个词，且必须包含“自然”、“文化”、“生态”这三个词。文章需包含15个句子（用中文句号或问号或感叹号分隔）。\"\n    if required_text not in content:\n        errors.append(\"未重复要求\")\n    \n    # 提取文章部分（重复要求后的内容）\n    article_start = content.find(required_text) + len(required_text)\n    article = content[article_start:].strip()\n    \n    # 检查文章开头\n    if not article.startswith(\"最近几年\"):\n        errors.append(\"开头不是'最近几年'\")\n    \n    # 检查禁用词\n    forbidden_words = [\"城市\", \"现代化\", \"高科技\"]\n    for word in forbidden_words:\n        if word in article:\n            errors.append(f\"包含禁用词'{word}'\")\n    \n    # 检查必备词\n    required_words = [\"自然\", \"文化\", \"生态\"]\n    for word in required_words:\n        if word not in article:\n            errors.append(f\"缺少必备词'{word}'\")\n    \n    # 检查句子数量\n    sentences = [s.strip() for s in re.split(r'[。？！]', article) if s.strip()]\n    if len(sentences) != 15:\n        errors.append(f\"句子数量为{len(sentences)}非15句\")\n    \n    return {\"check_code\": len(errors)==0, \"reason\": \",\".join(errors) if errors else \"\"}"}
{"prompt": "请撰写一篇关于“家庭节能减排措施”的文章，必须刚好由30个句子（用中文句号或问号或感叹号分隔）组成，要求文章只出现5个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。同时，请避免使用“高科技”、“智能”、“自动化”这三个词。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义预期的指令内容\n    expected_instruction = \"请撰写一篇关于“家庭节能减排措施”的文章，必须刚好由30个句子（用中文句号或问号或感叹号分隔）组成，要求文章只出现5个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。同时，请避免使用“高科技”、“智能”、“自动化”这三个词。\"\n    # 错误信息列表\n    err_infos = []\n    \n    # 1. 检查是否以预期指令开头\n    if not response.startswith(expected_instruction):\n        err_infos.append(\"开头未正确重复指令要求\")\n    \n    # 2. 定位答案标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    # 检查答案标记完整性\n    if start_idx == -1:\n        err_infos.append(\"缺少【答案开始】标记\")\n    if end_idx == -1:\n        err_infos.append(\"缺少【答案结束】标记\")\n    if start_idx != -1 and end_idx != -1 and end_idx <= start_idx:\n        err_infos.append(\"标记顺序错误或嵌套异常\")\n    \n    # 如果有标记错误则跳过后续内容检查\n    if any(\"标记\" in err for err in err_infos):\n        return {\n            \"check_code\": False,\n            \"reason\": \"; \".join(err_infos)\n        }\n    \n    # 提取答案内容\n    answer_content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 3. 段落结构验证\n    paragraphs = [p.strip() for p in answer_content.split('\\n\\n') if p.strip()]\n    if len(paragraphs) != 5:\n        err_infos.append(f\"段落数量错误（需要5段，实际{len(paragraphs)}段）\")\n    \n    # 4. 句子数量验证\n    sentences = re.findall(r'[^。？！]*[。？！]', answer_content)\n    if len(sentences) != 30:\n        err_infos.append(f\"句子数量错误（需要30句，实际{len(sentences)}句）\")\n    \n    # 5. 禁用词检查\n    forbidden_words = [\"高科技\", \"智能\", \"自动化\"]\n    found_words = [word for word in forbidden_words if word in answer_content]\n    if found_words:\n        err_infos.append(f\"包含禁用词：{','.join(found_words)}\")\n    \n    # 返回最终结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于城市绿色建筑设计的重要性的文章，要求文章的每个句子（用中文句号或问号或感叹号分隔）至少20个字，最多25个字。同时，第三个句子必须以“对环境友好”为结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    response = response.strip(\"【答案开始】\").strip(\"【答案结束】\").strip()\n    sentences = re.split('[。？！]', response)\n    sentences = [s for s in sentences if s]\n    if len(sentences) < 3:\n        return {\n            \"check_code\": False,\n            \"reason\": \"句子数量不足\"\n        }\n    for i, sentence in enumerate(sentences):\n        if len(sentence) < 20 or len(sentence) > 25:\n            return {\n                \"check_code\": False,\n                \"reason\": f\"第{i+1}个句子长度不符合要求\"\n            }\n    if not sentences[2].endswith(\"对环境友好\"):\n        return {\n            \"check_code\": False,\n            \"reason\": \"第三个句子未以‘对环境友好’结尾\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请列出五种常见的家庭清洁工具，并用 Markdown 格式详细描述它们的使用方法和优缺点。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n\n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取核心内容\n    content = re.search(r\"【答案开始】(.*)【答案结束】\", response, re.DOTALL)\n    if not content:\n        err_infos.append(\"未找到有效内容区间\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    content = content.group(1).strip()\n    \n    # 检查内容结构\n    sections = re.findall(r\"#+\\s*([^\\n]+)|(\\d+\\.\\s*[^\\n]+)\", content)\n    if len(sections) < 5:\n        err_infos.append(f\"清洁工具数量不足5种（实际{len(sections)}种）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }\n"}
{"prompt": "请撰写一篇关于城市绿化对居民心理健康影响的文章。要求在文章中至少出现“绿化”、“健康”和“城市”三个词语，并且“绿化”至少出现三次，“健康”必须刚好出现两次，“城市”最多出现四次。请确保文章标题用$()$标记，如$(xxx)$。文章结尾必须以“因此，绿色空间在现代城市中不可或缺。”这句话结束。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查整体格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"未正确使用【答案开始】/【答案结束】标记\")\n        return {\"check_code\": False, \"reason\": \" | \".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 分割两个答案\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        err_infos.append(\"答案分隔符错误，必须使用六个@符号分隔\")\n        return {\"check_code\": False, \"reason\": \" | \".join(err_infos)}\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        local_errors = []\n        \n        # 检查标题格式\n        title_match = re.search(r'\\$\\((.+?)\\)\\$', ans)\n        if not title_match:\n            local_errors.append(\"标题未用$()$标记\")\n        \n        # 检查结尾格式\n        if not ans.endswith(\"因此，绿色空间在现代城市中不可或缺。\"):\n            local_errors.append(\"结尾未按要求结束\")\n        \n        # 检查关键词次数\n        lvhua_count = ans.count(\"绿化\")\n        jiankang_count = ans.count(\"健康\")\n        chengshi_count = ans.count(\"城市\")\n        \n        if lvhua_count < 3:\n            local_errors.append(f\"绿化出现次数不足（需≥3次，实际{lvhua_count}次）\")\n        if jiankang_count != 2:\n            local_errors.append(f\"健康出现次数错误（需=2次，实际{jiankang_count}次）\")\n        if chengshi_count > 4:\n            local_errors.append(f\"城市出现次数超限（需≤4次，实际{chengshi_count}次）\")\n        \n        # 检查关键词完整性\n        if \"绿化\" not in ans or \"健康\" not in ans or \"城市\" not in ans:\n            local_errors.append(\"缺失必要关键词（绿化/健康/城市）\")\n        \n        # 汇总当前答案错误\n        if local_errors:\n            err_infos.append(f\"答案{idx}：{'；'.join(local_errors)}\")\n    \n    # 返回最终验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \" | \".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于城市公共交通发展的文章，文章应包括两个段落（不要出现标题），每个段落之间用‘～～’符号分隔。在第一个段落中，必须刚好由四个句子组成。请确保文章的字数不超过80个汉字，并以“随着”这两个字开头。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义必须重复的指令文本\n    required_instruction = \"请撰写一篇关于城市公共交通发展的文章，文章应包括两个段落（不要出现标题），每个段落之间用‘～～’符号分隔。在第一个段落中，必须刚好由四个句子组成。请确保文章的字数不超过80个汉字，并以“随着”这两个字开头。\"\n    \n    # 错误信息收集列表\n    err_infos = []\n    \n    # 1. 检查【答案开始/结束】标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"开头缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"结尾缺少【答案结束】标记\")\n    \n    # 如果标记错误则直接返回\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容（去除标记）\n    content = response[5:-5]  # 移除【答案开始/结束】各5字符\n    \n    # 2. 检查指令重复部分\n    if not content.startswith(required_instruction):\n        err_infos.append(\"未正确重复题目要求\")\n    \n    # 3. 提取文章部分（去除重复指令）\n    article_part = content[len(required_instruction):].strip()\n    \n    # 4. 检查文章开头\n    if not article_part.startswith(\"随着\"):\n        err_infos.append(\"文章开头未使用'随着'\")\n    \n    # 5. 检查段落分隔符\n    if \"~~\" not in article_part:\n        err_infos.append(\"缺少段落分隔符'~~'\")\n    else:\n        paragraphs = article_part.split(\"~~\", 1)  # 分割成两段\n        if len(paragraphs) < 2:\n            err_infos.append(\"段落分隔符数量不足\")\n        else:\n            # 6. 检查第一段句子数量\n            first_para = paragraphs[0].replace('\\n', '')\n            # 使用正则分割句子（按中文句号、问号、感叹号）\n            sentences = re.split(r'[。？！]', first_para)\n            # 过滤空句子\n            valid_sentences = [s.strip() for s in sentences if s.strip()]\n            if len(valid_sentences) != 4:\n                err_infos.append(f\"第一段包含{len(valid_sentences)}个句子(非4个)\")\n    \n    # 7. 检查汉字字数\n    hanzi_chars = re.findall(r'[一-龥]', article_part)\n    if len(hanzi_chars) > 80:\n        err_infos.append(f\"文章汉字数({len(hanzi_chars)}字)超过80字\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请描述一次难忘的音乐会体验。文章应只出现4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“音乐”这个词务必至少出现四次。此外，要求文章的第五个句子（用中文句号或问号或感叹号分隔）以‘当时的情景’开头，文章的第三个句子（用中文句号或问号或感叹号分隔）以‘令人难以忘怀’结尾。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义指令要求的完整字符串\n    instruction_str = \"请描述一次难忘的音乐会体验。文章应只出现4个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。在第二个段落中，“音乐”这个词务必至少出现四次。此外，要求文章的第五个句子（用中文句号或问号或感叹号分隔）以‘当时的情景’开头，文章的第三个句子（用中文句号或问号或感叹号分隔）以‘令人难以忘怀’结尾。\"\n    \n    # 验证标记完整性\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案缺少开始/结束标记\"}\n    \n    # 提取答案主体内容\n    answer_body = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 验证指令重复部分\n    if not answer_body.startswith(instruction_str):\n        return {\"check_code\": False, \"reason\": \"未正确重复指令要求\"}\n    \n    # 提取文章内容\n    article = answer_body[len(instruction_str):].strip()\n    \n    # 验证段落数量\n    paragraphs = [p.strip() for p in article.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量应为4，实际为{len(paragraphs)}\"}\n    \n    # 验证第二段\"音乐\"出现次数\n    if len(paragraphs) < 2:\n        return {\"check_code\": False, \"reason\": \"缺少第二段落\"}\n    \n    music_count = paragraphs[1].count(\"音乐\")\n    if music_count < 4:\n        return {\"check_code\": False, \"reason\": f\"第二段'音乐'应至少出现4次，实际出现{music_count}次\"}\n    \n    # 验证全文句子\n    all_sentences = [s.strip() for s in re.split(r'[。？！]', article) if s.strip()]\n    \n    if len(all_sentences) < 5:\n        return {\"check_code\": False, \"reason\": f\"文章句子总数不足5句，实际{len(all_sentences)}句\"}\n    \n    # 验证第三个句子结尾\n    if not all_sentences[2].endswith('令人难以忘怀'):\n        return {\"check_code\": False, \"reason\": f\"第三个句子不以'令人难以忘怀'结尾：'{all_sentences[2]}'\"}\n    \n    # 验证第五个句子开头\n    if not all_sentences[4].startswith('当时的情景'):\n        return {\"check_code\": False, \"reason\": f\"第五个句子不以'当时的情景'开头：'{all_sentences[4]}'\"}\n    \n    return {\"check_code\": True, \"reason\": \"所有验证通过\"}"}
{"prompt": "在现代社会中，睡眠质量对人们的健康有着至关重要的影响。研究表明，缺乏优质睡眠会导致注意力不集中、记忆力减退、情绪不稳定，甚至增加患慢性疾病的风险。为了帮助人们改善睡眠质量，许多专家提出了不同的建议，如保持规律的作息时间、营造舒适的睡眠环境、避免摄入刺激性食物等。然而，如何在日常生活中真正落实这些建议，仍然是很多人面临的难题。近年来，随着科技的发展，智能睡眠设备逐渐进入市场，如智能床垫、睡眠追踪器、白噪音机等，这些设备号称可以帮助用户更好地入睡并监测睡眠质量。然而，这些设备的实际效果如何？是否真的能显著改善我们的睡眠质量？这些问题仍然值得进一步探讨。\n\n请根据以上背景信息，写一篇关于如何改善睡眠质量的文章。要求文章刚好由10个句子（用中文句号或问号或感叹号分隔）组成，每个句子的字数在15到25字之间。文章中不能使用“智能”、“设备”、“科技”这三个词，且文章需以“睡眠质量的提升，离不开我们的努力。”这句话结尾。同时，请在文章中详细解释并列出改善睡眠质量的三种主要方法，使用“【方法1】”、“【方法2】”和“【方法3】”作为主要方法的占位符。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 初始化错误信息\n    err_infos = []\n    \n    # 1. 检查响应格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"响应格式错误：缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 2. 检查结尾句\n    if not content.endswith(\"睡眠质量的提升，离不开我们的努力。\"):\n        err_infos.append(\"结尾句不符合要求\")\n    \n    # 3. 分句检查\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) != 10:\n        err_infos.append(f\"句子数量错误：要求10句，实际{len(sentences)}句\")\n    \n    # 4. 检查每句字数\n    word_counts = []\n    for i, s in enumerate(sentences, 1):\n        # 移除占位符后统计字数\n        clean_s = re.sub(r'【方法\\d】', '', s)\n        count = len(clean_s)\n        word_counts.append(count)\n        if count < 15 or count > 25:\n            err_infos.append(f\"第{i}句字数不符（{count}字）\")\n    \n    # 5. 检查禁止词\n    forbidden_words = [\"智能\", \"设备\", \"科技\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        err_infos.append(f\"包含禁用词：{','.join(found_words)}\")\n    \n    # 6. 检查方法占位符\n    method_tags = [\"【方法1】\", \"【方法2】\", \"【方法3】\"]\n    missing_tags = [tag for tag in method_tags if tag not in content]\n    if missing_tags:\n        err_infos.append(f\"缺失方法标记：{','.join(missing_tags)}\")\n    \n    # 7. 检查方法顺序\n    if all(tag in content for tag in method_tags):\n        indexes = [content.find(tag) for tag in method_tags]\n        if indexes != sorted(indexes):\n            err_infos.append(\"方法标记顺序错误\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于古代丝绸之路如何影响现代商业贸易的文章，文章内容不少于100个汉字且不超过200汉字。请确保每个句子（用中文句号或问号或感叹号分隔）的最后一个字是“之”。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查起始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1:\n        err_infos.append(\"未找到答案开始标记\")\n    if end_idx == -1:\n        err_infos.append(\"未找到答案结束标记\")\n    if start_idx != -1 and end_idx != -1 and start_idx > end_idx:\n        err_infos.append(\"答案开始标记在答案结束标记之后\")\n    \n    # 提取答案内容\n    content = \"\"\n    if start_idx != -1 and end_idx != -1 and start_idx < end_idx:\n        content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 检查字数\n    if content:\n        hanzi_chars = re.findall(r'[一-龥]', content)\n        hanzi_count = len(hanzi_chars)\n        if hanzi_count < 100:\n            err_infos.append(f\"文章字数不足100汉字（实际{hanzi_count}字）\")\n        if hanzi_count > 200:\n            err_infos.append(f\"文章字数超过200汉字（实际{hanzi_count}字）\")\n    else:\n        err_infos.append(\"无法提取文章内容\")\n    \n    # 检查句子结尾\n    if content:\n        sentences = re.split(r'[。？！]', content)\n        valid_sentences = [s.strip() for s in sentences if s.strip()]\n        \n        for i, sent in enumerate(valid_sentences):\n            if not sent.endswith('之'):\n                err_infos.append(f\"第{i+1}句结尾不是'之'字：'{sent}...'\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "在现代社会，人类行为和习惯受到心理学的深刻影响。心理学不仅帮助我们理解自己的行为，也为我们解决生活中的问题提供了理论支持。例如，认知偏差是心理学中的一个重要概念，指人们在信息加工过程中由于先入为主的观念或经验而产生的系统性错误。这种偏差可能会影响我们的决策和判断，如在购物时过分依赖品牌效应，或在工作中因为先前的印象而忽略新的信息。了解认知偏差能帮助我们更理性地看待问题，提高生活质量。\n\n请撰写一篇关于“认知偏差如何影响日常决策”的文章。请确保文章只出现3个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第3段至少150个汉字。请确保文章恰好由11个句子（用中文句号或问号或感叹号分隔）组成。其中第4个句子的第8个汉字必须是“误”字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from typing import List\n\n    errors: List[str] = []\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n\n    # 提取答案内容\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        errors.append(\"未找到有效的答案标记\")\n        return {\"check_code\": False, \"reason\": errors}\n    \n    content = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 验证段落结构和分隔符\n    paragraphs = [p.strip() for p in content.split('～～')]\n    if len(paragraphs) != 3:\n        errors.append(f\"段落数量错误：需要3段，实际{len(paragraphs)}段\")\n    \n    # 验证第三段长度\n    if len(paragraphs) >= 3:\n        para3 = re.sub(r'[^\\u4e00-\\u9fa5]', '', paragraphs[2])  # 只保留汉字\n        if len(para3) < 150:\n            errors.append(f\"第三段汉字数不足：需要≥150字，实际{len(para3)}字\")\n    \n    # 分句验证\n    sentences = []\n    temp = \"\"\n    for char in content:\n        temp += char\n        if char in {'。', '？', '！'}:\n            sentences.append(temp.strip())\n            temp = \"\"\n    if temp:  # 处理最后未结束的句子\n        sentences.append(temp.strip())\n    \n    if len(sentences) != 11:\n        errors.append(f\"句子数量错误：需要11句，实际{len(sentences)}句\")\n    \n    # 验证第4句第8个汉字\n    if len(sentences) >= 4:\n        hanzi_count = 0\n        for char in sentences[3]:\n            if '\\u4e00' <= char <= '\\u9fff':  # 汉字判断\n                hanzi_count += 1\n                if hanzi_count == 8:\n                    if char != '误':\n                        errors.append(f\"第4句第8字应为'误'，实际是'{char}'\")\n                    break\n        if hanzi_count < 8:\n            errors.append(f\"第4句汉字不足8个，实际{hanzi_count}字\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": errors if errors else []\n    }"}
{"prompt": "请描述一次你在博物馆参观的经历，文章以“我记得”这三个字开头。在描述中请详细解释并列出其中三个主要展品，使用“【展品1】”、“【展品2】”和“【展品3】”作为主要展品的占位符。描述中只能出现6个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第四个段落中，“历史”这个词务必至少出现两次。在第五个段落中，请确保不含任何标点符号。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查答案开始和结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"回答缺少开始/结束标记\"}\n    \n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查答案分隔符\n    if \"******\" not in content:\n        return {\"check_code\": False, \"reason\": \"答案间缺少分隔符******\"}\n    \n    answers = content.split(\"******\")\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": \"答案数量不是两个\"}\n    \n    error_infos = []\n    \n    for idx, ans in enumerate(answers, 1):\n        ans = ans.strip()\n        errors = []\n        \n        # 检查开头\n        if not ans.startswith(\"我记得\"):\n            errors.append(f\"答案{idx}未以'我记得'开头\")\n        \n        # 检查段落结构\n        paragraphs = re.split(r'\\n\\n+', ans)\n        if len(paragraphs) != 6:\n            errors.append(f\"答案{idx}段落数量不是6个\")\n        else:\n            # 检查展品占位符\n            placeholders = {\"【展品1】\", \"【展品2】\", \"【展品3】\"}\n            if any(ph not in ans for ph in placeholders):\n                errors.append(f\"答案{idx}缺少展品占位符\")\n            \n            # 检查第四段落历史词频\n            hist_count = paragraphs[3].count(\"历史\")\n            if hist_count < 2:\n                errors.append(f\"答案{idx}第四段落'历史'出现次数不足\")\n            \n            # 检查第五段落标点\n            if re.search(r'[，。！？；：“”‘’（）【】、]', paragraphs[4]):\n                errors.append(f\"答案{idx}第五段落包含标点符号\")\n        \n        if errors:\n            error_infos.append(f\"答案{idx}错误: {', '.join(errors)}\")\n    \n    if error_infos:\n        return {\"check_code\": False, \"reason\": \" | \".join(error_infos)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "撰写一篇关于城市绿化对社区生活影响的文章，要求文中避免使用“环保”、“生态”、“自然”这几个词。文章需包含“城市发展”这个词，并且第三个句子（用中文句号或问号或感叹号分隔）以“这对居民有很大的好处”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证是否包含正确的标记\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"回答格式错误：缺少答案开始/结束标记\"}\n    \n    # 提取答案内容\n    start_idx = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.find(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查禁止词\n    forbidden_words = [\"环保\", \"生态\", \"自然\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        return {\"check_code\": False, \"reason\": f\"包含禁止词：{', '.join(found_words)}\"}\n    \n    # 检查必须词\n    if \"城市发展\" not in content:\n        return {\"check_code\": False, \"reason\": \"未包含'城市发展'\"}\n    \n    # 分句并检查第三个句子\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    if len(sentences) < 3:\n        return {\"check_code\": False, \"reason\": \"句子数量不足三个\"}\n    \n    if not sentences[2].endswith(\"这对居民有很大的好处\"):\n        return {\"check_code\": False, \"reason\": \"第三个句子未以'这对居民有很大的好处'结尾\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在古代，许多国家都有自己独特的货币体系，这些货币不仅在经济上发挥了重要作用，也在文化和社会中留下了深刻的影响。古代货币的种类繁多，有贝壳、金属铸币、纸币等形式，反映出一个国家的经济实力和文化交流。不同的货币设计和使用方式也往往体现出当时的政治背景和社会习俗。例如，中国的铜钱不仅用于交易，还被用作护身符和装饰品；而在古罗马，硬币上刻有统治者的肖像，以加强其权威和影响力。在古代，货币不仅是经济活动的载体，也是文化交流的媒介。通过研究古代货币，我们可以窥见当时的社会结构、贸易网络和文化交流。因此，了解古代货币不仅有助于经济史的研究，还能加深我们对古代文化的理解。\n\n请撰写一篇关于“古代货币与文化”的文章。文章应满足以下要求：\n\n1. 描述古代货币的不同种类和它们在文化中的作用，但不可使用“经济”、“贸易”、“财富”这三个词。\n2. 文章需包含5段（不要出现标题），每段之间用'～～'符号分隔。第二段的第70个汉字必须是“金”字。\n3. 文章需由10个句子组成，其中第5个句子不少于19个汉字。\n4. 每个句子（用中文句号或问号或感叹号分隔）的最后一个字必须是“也”字。\n5. 模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证结果初始化\n    err_infos = []\n    check_code = True\n    \n    # 1. 检查响应格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"答案格式错误：缺少开始/结束标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 2. 检查答案数量\n    answers = content.split('@@@@@@')\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量错误：应为2个，实际{len(answers)}个\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 验证每个答案\n    for ans_idx, ans in enumerate(answers, 1):\n        ans_errors = []\n        \n        # 3. 检查段落结构\n        paragraphs = ans.split('～～')\n        if len(paragraphs) != 5:\n            ans_errors.append(f\"段落数量错误：应为5段，实际{len(paragraphs)}段\")\n        \n        # 4. 检查句子数量\n        sentences = re.split(r'[。？！]', ans)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 10:\n            ans_errors.append(f\"句子数量错误：应为10句，实际{len(sentences)}句\")\n        \n        # 5. 检查每个句子结尾\n        for i, sent in enumerate(sentences):\n            if not sent: continue\n            if sent[-1] != '也':\n                ans_errors.append(f\"第{i+1}句结尾不是'也'字：'{sent[-1]}'\")\n        \n        # 6. 检查第五句长度\n        if len(sentences) >= 5:\n            s5 = re.sub(r'[^\\u4e00-\\u9fa5]', '', sentences[4])  # 只保留汉字\n            if len(s5) < 19:\n                ans_errors.append(f\"第5句汉字不足19个（实际{len(s5)}个）\")\n        \n        # 7. 检查第二段第70字\n        if len(paragraphs) >= 2:\n            hanzi_list = re.findall(r'[\\u4e00-\\u9fa5]', paragraphs[1])\n            if len(hanzi_list) < 70:\n                ans_errors.append(f\"第二段汉字不足70个（实际{len(hanzi_list)}个）\")\n            elif hanzi_list[69] != '金':\n                ans_errors.append(f\"第二段第70字应为'金'（实际'{hanzi_list[69]}'）\")\n        \n        # 8. 检查禁用词\n        forbidden_words = ['经济', '贸易', '财富']\n        for word in forbidden_words:\n            if word in ans:\n                ans_errors.append(f\"包含禁用词'{word}'\")\n        \n        # 记录当前答案错误\n        if ans_errors:\n            check_code = False\n            err_infos.append(f\"答案{ans_idx}错误：\" + \"; \".join(ans_errors))\n    \n    return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos)}"}
{"prompt": "在现代生活中，健康饮食变得越来越重要。健康饮食不仅能帮助我们保持身体健康，还能预防各种疾病。随着人们对健康的重视，越来越多的人开始关注饮食中的营养成分和健康搭配。然而，很多人对健康饮食的具体实践还存在一些误区。为了帮助大家更好地理解和实践健康饮食，我们需要了解什么样的饮食习惯对身体最有益。健康饮食不仅仅是简单地减少高热量食物的摄入，还需要科学地选择食材，合理搭配膳食，保证营养均衡。\n\n请写一篇关于如何在日常生活中实践健康饮食的文章，要求文章的每个句子（用中文句号或问号或感叹号分隔）刚好都是25个字。文章应包括以下内容：1. 健康饮食的重要性；2. 如何选择健康的食材；3. 如何合理搭配膳食；4. 日常饮食中的注意事项。请确保文章内容具体、实用，并能够为读者提供切实可行的建议。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有正确的开始或结束标记。\"\n        }\n    content = response[6:-6].strip()\n    # 正则表达式模式：匹配中文句号、问号、感叹号中的任意一个\n    pattern = r'[。？！]'\n\n    # 使用正则表达式分割文本\n    raw_sentences = re.split(pattern, content)\n\n    # 过滤分割结果中的空字符串（处理文本开头/结尾有标点或连续标点的情况）\n    sentences = [sentence.strip() for sentence in raw_sentences if sentence.strip()]\n    for sentence in sentences:\n        if len(sentence) != 25:\n            return {\n                \"check_code\": False,\n                \"reason\": \"句子长度不符合要求。\"\n            }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }\n"}
{"prompt": "在城市化进程中，越来越多的人选择居住在高楼大厦中。然而，高楼的火灾隐患也逐渐成为社会关注的焦点。随着建筑技术的进步，高层建筑的防火措施也在不断提升，包括使用防火材料、安装自动灭火系统以及设置逃生通道等。但是，即便如此，高楼火灾一旦发生，仍然会造成巨大的财产损失和人员伤亡。因此，了解并掌握高楼火灾的预防和应对措施是每个高层建筑居住者的必备技能。\n\n请你撰写一篇关于高楼火灾预防和应对措施的文章，文章需要包含以下特定要求：\n\n1. **关键词**：文章中必须包含“灭火器”和“逃生通道”这两个词。\n2. **段落数量**：文章应分为4个段落，并用两个换行符“\n\n”分隔开来。\n3. **句子结尾**：文章的第三个句子（用中文句号或问号或感叹号分隔）必须以“安全第一”结尾。\n\n请确保文章结构清晰，内容具体详细，并提供实际可操作的建议。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息列表\n    err_infos = []\n    \n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"缺少答案开始/结束标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    start_idx = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.find(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查关键词\n    keywords = [\"灭火器\", \"逃生通道\"]\n    missing_keys = [k for k in keywords if k not in content]\n    if missing_keys:\n        err_infos.append(f\"缺少关键词：{','.join(missing_keys)}\")\n    \n    # 检查段落结构\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量应为4段，实际为{len(paragraphs)}段\")\n    \n    # 检查第三个句子\n    # 使用正则表达式分句（考虑中文标点）\n    sentences = re.split(r'[。？！]', content)\n    # 过滤空句子\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    if len(sentences) < 3:\n        err_infos.append(\"文章句子数量不足3句\")\n    else:\n        third_sentence = sentences[2]\n        if not third_sentence.endswith('安全第一'):\n            # 检查带标点的情况（如句尾有标点但分割时被去除）\n            if not re.search(r'安全第一[。？！]$', third_sentence + \"。\"):\n                err_infos.append(f\"第三句应以'安全第一'结尾，实际为：'{third_sentence[-10:] if len(third_sentence) > 10 else third_sentence}'\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于如何高效管理时间的文章，要求在文章中包含“计划表”和“优先级”这两个词，并且在文章中详细解释并列出其中三种主要策略，使用“【策略1】”、“【策略2】”和“【策略3】”作为主要策略的占位符。每个答案的第四个句子都要以“这是管理时间的关键”结尾。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查开始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 检查指令重复部分\n    instruction = \"请写一篇关于如何高效管理时间的文章，要求在文章中包含“计划表”和“优先级”这两个词，并且在文章中详细解释并列出其中三种主要策略，使用“【策略1】”、“【策略2】”和“【策略3】”作为主要策略的占位符。每个答案的第四个句子都要以“这是管理时间的关键”结尾。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\"\n    \n    if not content.startswith(instruction):\n        err_infos.append(\"回答未一字不差重复指令要求\")\n    \n    # 提取实际答案部分\n    answers_part = content.replace(instruction, \"\", 1).strip()\n    \n    # 检查答案分隔符\n    if \"******\" not in answers_part:\n        err_infos.append(\"答案之间缺少六个星号分隔符\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 分割两个答案\n    answers = [a.strip() for a in answers_part.split(\"******\", 1) if a.strip()]\n    \n    # 检查答案数量\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量错误，应为2个实际为{len(answers)}个\")\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        # 检查关键词\n        if \"计划表\" not in ans:\n            err_infos.append(f\"答案{idx}缺少关键词'计划表'\")\n        if \"优先级\" not in ans:\n            err_infos.append(f\"答案{idx}缺少关键词'优先级'\")\n        \n        # 检查策略占位符\n        for i in range(1, 4):\n            if f\"【策略{i}】\" not in ans:\n                err_infos.append(f\"答案{idx}缺少策略占位符【策略{i}】\")\n        \n        # 检查第四个句子结尾\n        sentences = re.split(r'(?<=[。！？])', ans)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        if len(sentences) < 4:\n            err_infos.append(f\"答案{idx}句子数量不足4个\")\n        elif not sentences[3].endswith(\"这是管理时间的关键\"):\n            err_infos.append(f\"答案{idx}的第四个句子结尾不符合要求\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请写一篇关于“如何在日常生活中进行有效时间管理”的文章，并且在文章中必须包含“效率”、“计划”这两个词。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义需要验证的条件\n    conditions = {\n        \"start_marker\": False,\n        \"end_marker\": False,\n        \"exact_repetition\": False,\n        \"contains_efficiency\": False,\n        \"contains_plan\": False\n    }\n    err_infos = []\n    \n    # 预定义指令要求的标准文本\n    instruction_text = (\n        '请写一篇关于“如何在日常生活中进行有效时间管理”的文章，并且在文章中必须包含“效率”、“计划”这两个词。'\n    )\n    \n    # 检查开始和结束标记\n    if response.startswith(\"【答案开始】\"):\n        conditions[\"start_marker\"] = True\n    else:\n        err_infos.append(\"缺少【答案开始】标记\")\n    \n    if response.endswith(\"【答案结束】\"):\n        conditions[\"end_marker\"] = True\n    else:\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取标记间的内容\n    content = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n    if not content:\n        return {\"check_code\": False, \"reason\": \"无法提取答案内容\"}\n    \n    content = content.group(1).strip()\n    \n    # 检查是否一字不差重复要求\n    if content.startswith(instruction_text):\n        conditions[\"exact_repetition\"] = True\n        # 提取重复要求后的文章内容\n        article = content[len(instruction_text):].strip()\n    else:\n        err_infos.append(\"未正确重复指令要求\")\n        article = content  # 尝试继续检查剩余条件\n    \n    # 检查关键词是否存在\n    if \"效率\" in article:\n        conditions[\"contains_efficiency\"] = True\n    else:\n        err_infos.append(\"文章中缺少'效率'一词\")\n    \n    if \"计划\" in article:\n        conditions[\"contains_plan\"] = True\n    else:\n        err_infos.append(\"文章中缺少'计划'一词\")\n    \n    # 检查额外内容\n    if not conditions[\"start_marker\"] or not conditions[\"end_marker\"]:\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 检查答案开始前是否有额外内容\n    if not response.startswith(\"【答案开始】\"):\n        preamble = response.split(\"【答案开始】\")[0].strip()\n        if preamble:\n            err_infos.append(\"【答案开始】前存在额外内容\")\n    \n    # 汇总验证结果\n    if all(conditions.values()) and not err_infos:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}"}
{"prompt": "请用拼音描述一下你心目中理想的旅行目的地，不要使用汉字或其他文字形式。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息\n    err_infos = []\n    \n    # 检查是否包含【答案开始】和【答案结束】标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response:\n        err_infos.append(\"缺少【答案开始】标记\")\n    if end_marker not in response:\n        err_infos.append(\"缺少【答案结束】标记\")\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取标记之间的内容\n    start_idx = response.find(start_marker) + len(start_marker)\n    end_idx = response.find(end_marker)\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查标记之外是否有额外内容\n    before_start = response[:response.find(start_marker)].strip()\n    after_end = response[end_idx+len(end_marker):].strip()\n    if before_start:\n        err_infos.append(f\"【答案开始】前存在额外内容: '{before_start[:10]}...'\")\n    if after_end:\n        err_infos.append(f\"【答案结束】后存在额外内容: '{after_end[:10]}...'\")\n    \n    # 验证内容是否为纯拼音（允许空格和标点）\n    if content:\n        # 检查是否包含汉字\n        if re.search(r'[一-鿿]', content):\n            err_infos.append(\"内容包含汉字\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    return {\"check_code\": True, \"reason\": \"\"}\n"}
{"prompt": "请根据以下宠物护理要点，按照表格格式列出不同宠物的喂养要求、每日活动需求和常见健康问题，注意不要在表格格式之外添加任何其他内容。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查响应是否包含指定的开始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    if not response.startswith(start_marker):\n        err_infos.append(\"响应缺少起始标记【答案开始】\")\n    if not response.endswith(end_marker):\n        err_infos.append(\"响应缺少结束标记【答案结束】\")\n    \n    # 提取标记之间的内容\n    content = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 检查是否存在表格内容\n    if not content:\n        err_infos.append(\"表格内容缺失\")\n    else:\n        # 验证是否为纯表格格式（无额外文本）\n        lines = content.split('\\n')\n        if any(not re.match(r'^\\|.*\\|$', line.strip()) for line in lines if line.strip()):\n            err_infos.append(\"表格外存在额外文本内容\")\n        \n        # 验证表格结构\n        table_pattern = r'^\\|(.+)\\|$'\n        table_rows = [line.strip() for line in lines if re.match(table_pattern, line.strip())]\n        \n        if len(table_rows) < 2:\n            err_infos.append(\"表格行数不足，至少需要表头和数据行\")\n        else:\n            # 验证表头格式\n            header = table_rows[0]\n            if not re.search(r'喂养要求', header):\n                err_infos.append(\"表头缺少'喂养要求'列\")\n            if not re.search(r'每日活动需求', header):\n                err_infos.append(\"表头缺少'每日活动需求'列\")\n            if not re.search(r'常见健康问题', header):\n                err_infos.append(\"表头缺少'常见健康问题'列\")\n            \n            # 验证分隔线格式\n            separator = table_rows[1]\n            if not re.fullmatch(r'\\|(\\s*:?-+:?\\s*\\|)+', separator):\n                err_infos.append(\"表格分隔线格式不符合要求\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "在全球化的背景下，地方文化的独特性往往成为吸引游客的重要因素之一。请设想一个虚构的偏远小镇，这里以其独特的文化活动和传统习俗而闻名。假设这个小镇每年都会举办一个盛大的节日庆典，吸引了世界各地的游客。这个节日以其独特的民间音乐和传统舞蹈而著称，此外还有各式各样的手工艺品展览和当地美食摊位。请详细描述这个节日的氛围、活动安排以及游客的体验，尤其是那些可能与众不同或令人惊喜的方面。请注意，在描述中避免使用“传统”、“文化”、“节日”这三个词。\n\n任务要求：请撰写一篇描述上述情境的文章。文章应包含4个段落，每个段落之间用'～～'符号分隔。在第二个段落中，“惊喜”这个词必须至少出现两次，而在第四个段落中，“游客”这个词最多只能出现一次。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化检查结果\n    check_code = True\n    err_infos = []\n    \n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        check_code = False\n        err_infos.append(\"回答未包含【答案开始】和【答案结束】标记\")\n        return {\"check_code\": check_code, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查禁止词\n    forbidden_words = [\"传统\", \"文化\", \"节日\"]\n    for word in forbidden_words:\n        if word in content:\n            check_code = False\n            err_infos.append(f\"包含了禁止词'{word}'\")\n    \n    # 分割段落\n    paragraphs = [p.strip() for p in content.split('～～') if p.strip()]\n    \n    # 检查段落数量\n    if len(paragraphs) != 4:\n        check_code = False\n        err_infos.append(f\"段落数量为{len(paragraphs)}而不是4\")\n    else:\n        # 检查第二段\"惊喜\"次数\n        second_para = paragraphs[1]\n        surprise_count = second_para.count(\"惊喜\")\n        if surprise_count < 2:\n            check_code = False\n            err_infos.append(f\"第二段'惊喜'出现次数为{surprise_count}次(要求至少2次)\")\n        \n        # 检查第四段\"游客\"次数\n        fourth_para = paragraphs[3]\n        visitor_count = fourth_para.count(\"游客\")\n        if visitor_count > 1:\n            check_code = False\n            err_infos.append(f\"第四段'游客'出现次数为{visitor_count}次(要求最多1次)\")\n    \n    return {\n        \"check_code\": check_code,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“数字化教育在乡村地区的实施挑战”的文章。请确保文章不超过500个字，只有15个句子，并且只出现2个段落，每个段落用两个换行符“\n\n”分隔开来。要求文章的第五个句子（用中文句号或问号或感叹号分隔）以“在这过程中”开头。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义指令要求字符串\n    req_str = '请撰写一篇关于“数字化教育在乡村地区的实施挑战”的文章。请确保文章不超过500个字，只有15个句子，并且只出现2个段落，每个段落用两个换行符“\\\\n\\\\n”分隔开来。要求文章的第五个句子（用中文句号或问号或感叹号分隔）以“在这过程中”开头。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\\n\\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。'\n    \n    # 检查基本标记\n    if not response.startswith(\"【答案开始】\"):\n        return {\"check_code\": False, \"reason\": \"回答未以【答案开始】开头\"}\n    if \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"回答未包含【答案结束】标记\"}\n    \n    # 提取答案内容\n    start_idx = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.find(\"【答案结束】\")\n    answer_content = response[start_idx:end_idx].strip()\n    \n    # 检查要求重复部分\n    if not answer_content.startswith(req_str):\n        return {\"check_code\": False, \"reason\": \"未正确重复指令要求\"}\n    \n    # 提取文章内容\n    article_content = answer_content[len(req_str):].strip()\n    err_infos = []\n    \n    # 检查字数\n    if len(article_content) > 500:\n        err_infos.append(f\"文章超过500字（实际{len(article_content)}字）\")\n    \n    # 分句检查\n    sentences = [s.strip() for s in re.split(r'[。？！]', article_content) if s.strip()]\n    if len(sentences) != 15:\n        err_infos.append(f\"句子数量不符（实际{len(sentences)}句）\")\n    \n    # 检查段落\n    paragraphs = [p.strip() for p in article_content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 2:\n        err_infos.append(f\"段落数量不符（实际{len(paragraphs)}段）\")\n    \n    # 检查第五个句子\n    if len(sentences) >= 5:\n        fifth_sentence = sentences[4]\n        if not fifth_sentence.startswith(\"在这过程中\"):\n            err_infos.append(\"第五个句子不以'在这过程中'开头\")\n    elif len(sentences) < 5:\n        err_infos.append(\"句子数量不足，无法检查第五句\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于传统工艺在现代设计中的应用的文章。文章中不能使用“创新”、“现代化”、“数字化”这几个词。请确保文章标题用$()$标记，如$(xxx)$。文章应由9个句子（每个句子之间用～作为分隔符号）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 定义错误信息列表\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 如果有标记错误，直接返回\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查禁止词\n    forbidden_words = [\"创新\", \"现代化\", \"数字化\"]\n    for word in forbidden_words:\n        if word in content:\n            err_infos.append(f\"包含禁止词'{word}'\")\n    \n    # 检查标题格式\n    title_match = re.search(r'^\\$([^$]+)\\$', content)\n    if not title_match:\n        err_infos.append(\"标题未用$()$标记或格式错误\")\n    elif not title_match.group(1).strip():\n        err_infos.append(\"标题内容为空\")\n    \n    # 检查句子数量和分隔符\n    if \"～\" not in content:\n        err_infos.append(\"缺少句子分隔符～\")\n    else:\n        # 分割句子（包括标题部分）\n        parts = content.split('～')\n        \n        # 检查总部分数量（标题+9个句子）\n        if len(parts) != 10:\n            err_infos.append(f\"句子数量错误（需要10部分：标题+9句子，实际{len(parts)}部分）\")\n        else:\n            # 检查每个句子非空\n            for i, part in enumerate(parts):\n                if not part.strip():\n                    err_infos.append(f\"第{i+1}部分内容为空\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请描述一个独特的餐厅概念，不能出现“美食”、“厨师”、“菜单”这几个词。请确保文章中的每个句子（用中文句号或问号或感叹号分隔）至少15个字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义指令要求的完整字符串\n    instruction_str = \"请描述一个独特的餐厅概念，不能出现“美食”、“厨师”、“菜单”这几个词。请确保文章中的每个句子（用中文句号或问号或感叹号分隔）至少15个字。\"\n    \n    # 验证标记完整性\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案缺少开始/结束标记\"}\n    \n    # 提取答案主体内容\n    answer_body = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 验证指令重复部分\n    if not answer_body.startswith(instruction_str):\n        return {\"check_code\": False, \"reason\": \"未正确重复指令要求\"}\n    \n    # 提取文章内容\n    article = answer_body[len(instruction_str):].strip()\n    \n    # 验证禁止词\n    forbidden_words = [\"美食\", \"厨师\", \"菜单\"]\n    for word in forbidden_words:\n        if word in article:\n            return {\"check_code\": False, \"reason\": f\"文章包含禁止词'{word}'\"}\n    \n    # 验证句子长度\n    sentences = [s.strip() for s in re.split(r'[。？！]', article) if s.strip()]\n    for i, sentence in enumerate(sentences, 1):\n        if len(sentence) < 15:\n            return {\"check_code\": False, \"reason\": f\"第{i}句只有{len(sentence)}字：'{sentence}'\"}\n    \n    return {\"check_code\": True, \"reason\": \"所有验证通过\"}"}
{"prompt": "请撰写一段恰好只包含7个句子（每个句子之间用^作为分隔符号）的小故事，主题为一位探险家在沙漠中的奇遇。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义验证所需的常量\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    required_instruction = \"请撰写一段恰好只包含7个句子（每个句子之间用^作为分隔符号）的小故事，主题为一位探险家在沙漠中的奇遇。\"\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(start_marker):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(end_marker):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 如果有标记错误，直接返回结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取标记间的内容\n    content = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 检查指令重复部分\n    if not content.startswith(required_instruction):\n        err_infos.append(\"指令重复部分不匹配\")\n    \n    # 提取故事部分（指令重复后的内容）\n    story_part = content[len(required_instruction):].strip()\n    \n    # 验证故事结构\n    if story_part == \"\":\n        err_infos.append(\"故事部分为空\")\n    else:\n        # 检查分隔符数量\n        if story_part.count('^') != 6:\n            err_infos.append(f\"分隔符^数量应为6个，实际为{story_part.count('^')}个\")\n        \n        # 检查句子数量\n        sentences = [s.strip() for s in story_part.split('^') if s.strip() != '']\n        if len(sentences) != 7:\n            err_infos.append(f\"句子数量应为7个，实际为{len(sentences)}个\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请描述一个美丽的花园场景，要求在描述中“花朵”至少出现4次，“蝴蝶”必须出现2次，“阳光”至多出现3次。整个描述需以“清晨时分”开头，并以“宁静祥和。”结尾。文章必须刚好由五个句子（用中文句号或问号或感叹号分隔）组成。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n\n    # 检查标记格式\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    start_idx = response.index(\"【答案开始】\") + 6\n    end_idx = response.index(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n\n    # 检查开头结尾\n    if not content.startswith(\"清晨时分\"):\n        err_infos.append(\"开头应为'清晨时分'\")\n    if not content.endswith(\"宁静祥和。\"):\n        err_infos.append(\"结尾应为'宁静祥和。'\")\n    \n    # 分割句子并计数\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 5:\n        err_infos.append(f\"应为5个句子，实际{len(sentences)}个\")\n    \n    # 关键词计数\n    flower_count = content.count(\"花朵\")\n    butterfly_count = content.count(\"蝴蝶\")\n    sun_count = content.count(\"阳光\")\n    \n    if flower_count < 4:\n        err_infos.append(f\"'花朵'应≥4次，实际{flower_count}次\")\n    if butterfly_count != 2:\n        err_infos.append(f\"'蝴蝶'应=2次，实际{butterfly_count}次\")\n    if sun_count > 3:\n        err_infos.append(f\"'阳光'应≤3次，实际{sun_count}次\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) or \"所有验证通过\"\n    }"}
{"prompt": "请写一篇关于现代城市生活中共享经济的发展的文章，要求文章中包含“便利”这个词，并以“共享经济的未来充满希望。”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    if not response.startswith('【答案开始】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开头\"\n        }\n    if not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案结束】'结尾\"\n        }\n    content = response[7:-7].strip()\n    if '便利' not in content:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章中没有包含'便利'这个词\"\n        }\n    if not content.endswith('共享经济的未来充满希望。'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章没有以'共享经济的未来充满希望。'结尾\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }\n}"}
{"prompt": "在现代社会，随着科技的进步和生活水平的提高，人们对健康的关注日益增加。特别是在城市中，快节奏的生活方式和不规律的饮食习惯使得许多人面临不同程度的健康问题。保持健康的生活方式不仅仅是个人的选择，更是对社会的一种责任。通过合理的饮食、适量的运动以及良好的心理状态，人们可以更好地应对生活中的压力和挑战。\n\n请撰写一篇关于保持健康生活方式的文章，要求第四个句子（用中文句号或问号或感叹号分隔）以‘在日常生活中’开头。文章应包括以下几个方面的内容：1) 饮食习惯的重要性；2) 适量运动的益处；3) 心理健康的维护。请结合实际例子和科学依据来支持你的论点，确保文章内容丰富且有说服力。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义检查结果初始值\n    err_infos = []\n    check_code = True\n    \n    # 检查起始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    if not response.startswith(start_marker):\n        err_infos.append(\"回答缺少起始标记【答案开始】\")\n        check_code = False\n    if end_marker not in response:\n        err_infos.append(\"回答缺少结束标记【答案结束】\")\n        check_code = False\n    \n    # 提取实际回答内容\n    content = \"\"\n    if start_marker in response and end_marker in response:\n        content = response.split(start_marker)[1].split(end_marker)[0].strip()\n    \n    # 检查第四个句子\n    if content:\n        # 使用正则分句（按中文句号、问号、感叹号分割）\n        sentences = re.split(r'(?<=[。？！])', content)\n        # 过滤空句子\n        sentences = [s.strip() for s in sentences if s.strip()]\n        \n        if len(sentences) < 4:\n            err_infos.append(\"回答句子数量不足4句\")\n            check_code = False\n        else:\n            fourth_sentence = sentences[3]\n            if not fourth_sentence.startswith(\"在日常生活中\"):\n                err_infos.append(f\"第四个句子不以'在日常生活中'开头: '{fourth_sentence[:20]}...'\")\n                check_code = False\n    \n    # 检查内容要点\n    required_keywords = {\n        \"饮食习惯\": [\"饮食\", \"营养\", \"食物\", \"健康饮食\"],\n        \"适量运动\": [\"运动\", \"锻炼\", \"活动\", \"健身\"],\n        \"心理健康\": [\"心理\", \"情绪\", \"压力\", \"心态\"]\n    }\n    \n    for topic, keywords in required_keywords.items():\n        if not any(keyword in content for keyword in keywords):\n            err_infos.append(f\"缺少'{topic}'相关内容\")\n            check_code = False\n    \n    # 检查实例和科学依据\n    if not any(kw in content for kw in [\"例如\", \"比如\", \"如\", \"举例\", \"研究\", \"数据\", \"表明\", \"显示\"]):\n        err_infos.append(\"缺少实际例子或科学依据\")\n        check_code = False\n    \n    return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos) if err_infos else \"\"}"}
{"prompt": "请写一篇关于家庭烹饪如何影响健康饮食习惯的文章。请确保文章标题用$()$标记，如$(xxx)$。内容不能出现中文逗号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    stripped_response = response.strip()\n    \n    # 检查开头和结尾标记\n    if not stripped_response.startswith(\"【答案开始】\"):\n        errors.append(\"开头缺少【答案开始】标记\")\n    if not stripped_response.endswith(\"【答案结束】\"):\n        errors.append(\"结尾缺少【答案结束】标记\")\n    \n    # 提取内容部分（如果标记正确）\n    content = \"\"\n    if stripped_response.startswith(\"【答案开始】\") and stripped_response.endswith(\"【答案结束】\"):\n        content_start = len(\"【答案开始】\")\n        content_end = len(stripped_response) - len(\"【答案结束】\")\n        content = stripped_response[content_start:content_end].strip()\n        \n        # 检查标题格式\n        if not re.search(r'\\$\\([^)]+\\)\\$', content):\n            errors.append(\"标题未用$()$标记或标题为空\")\n        \n        # 检查中文逗号\n        if '，' in content:\n            errors.append(\"内容包含中文逗号\")\n    \n    # 汇总验证结果\n    if not errors:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": \", \".join(errors)}"}
{"prompt": "在当今的数字化时代，人工智能技术迅速发展，并在许多领域产生了深远的影响。尤其是在教育领域，AI被广泛应用于个性化学习、教育资源管理以及课堂管理等方面，旨在提升教育质量和效率。随着技术的进步，AI在教育中的应用不仅改变了传统的教学模式，还为学生和教师带来了全新的互动方式。然而，AI在教育领域的广泛应用也带来了诸如隐私问题、数据安全以及人机互动伦理等新的挑战。为了更好地理解和应对这些问题，我们需要深入探讨AI对教育的具体影响、可能的未来发展方向，以及如何在教育中有效地应用AI技术。\n请撰写一篇文章，详细探讨人工智能在教育领域的应用现状及其可能带来的挑战。文章应只有4个段落，每个段落用两个换行符“\n\n”分隔开来。请在文章中详细解释并列出三种主要挑战，使用“【挑战1】”、“【挑战2】”和“【挑战3】”作为主要挑战的占位符。在第二个段落中，“技术”这个词务必刚好出现两次。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 检查段落数量\n    paragraphs = re.split(r'\\n\\n+', content)\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量应为4段，实际为{len(paragraphs)}段\")\n    \n    # 检查第二个段落中\"技术\"出现次数\n    if len(paragraphs) > 1:\n        tech_count = paragraphs[1].count(\"技术\")\n        if tech_count != 2:\n            err_infos.append(f\"第二段中'技术'应出现2次，实际出现{tech_count}次\")\n    \n    # 检查挑战占位符\n    challenge_tags = [\"【挑战1】\", \"【挑战2】\", \"【挑战3】\"]\n    for tag in challenge_tags:\n        if tag not in content:\n            err_infos.append(f\"缺少挑战占位符{tag}\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "将下列文本中的“电”字全部替换为“紫”字；最后，在上一步修改过的文本中的第12个汉字和第13个汉字之间插入汉字“厄”。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n电影《肖申克的救赎》通过深刻的人性描绘和震撼的情节设计，探讨了自由与希望的主题，成为影史上备受赞誉的经典之作。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 定义原始文本\n    original_text = \"电影《肖申克的救赎》通过深刻的人性描绘和震撼的情节设计，探讨了自由与希望的主题，成为影史上备受赞誉的经典之作。\"\n    \n    # 验证回答格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"回答格式错误，未包含正确的标记\"}\n    \n    # 提取实际回答内容\n    answer = response[len(\"【答案开始】\"):-len(\"【答案开始】\")].strip()\n    \n    # 检查内容长度\n    if len(answer) == 0:\n        return {\"check_code\": False, \"reason\": \"回答内容为空\"}\n    \n    # 第一步验证：替换所有\"电\"为\"紫\"\n    replaced_text = original_text.replace(\"电\", \"紫\")\n    \n    # 第二步验证：在第12和第13个汉字间插入\"厄\"\n    hanzi_list = re.findall(r'[一-龥]', replaced_text)\n    if len(hanzi_list) < 13:\n        return {\"check_code\": False, \"reason\": \"替换后文本汉字不足13个\"}\n    \n    # 构建预期结果\n    target_text = \"\"\n    count = 0\n    for char in replaced_text:\n        if '一' <= char <= '鿿':\n            count += 1\n            if count == 12:\n                target_text += char + \"厄\"\n            else:\n                target_text += char\n        else:\n            target_text += char\n    \n    # 验证回答内容\n    if answer != target_text:\n        return {\n            \"check_code\": False,\n            \"reason\": f\"内容不匹配。预期: '{target_text}'，实际: '{answer}'\"\n        }\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于“城市中的夜晚与声音”的文章，在文章中必须使用“街灯”、“回响”和“静谧”这三个词语，每个词语必须至少出现2次。在描述中需要列出三种声音的来源，并用“&来源1&”、“&来源2&”和“&来源3&”作为占位符进行标记。文章只能有4个段落（不要出现标题），每个段落用“～～”符号分隔，第2段不能出现任何标点符号。文章必须以“在夜晚的城市中”这几个字开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        errors.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取答案内容\n    start_index = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_index = response.find(\"【答案结束】\")\n    answer = response[start_index:end_index].strip()\n    \n    # 检查开头\n    if not answer.startswith(\"在夜晚的城市中\"):\n        errors.append(\"回答未以'在夜晚的城市中'开头\")\n    \n    # 检查关键词出现次数\n    keywords = [\"街灯\", \"回响\", \"静谧\"]\n    for word in keywords:\n        count = answer.count(word)\n        if count < 2:\n            errors.append(f\"词语'{word}'出现次数不足（需要2次，实际{count}次）\")\n    \n    # 检查声音来源标记\n    markers = [\"&来源1&\", \"&来源2&\", \"&来源3&\"]\n    for marker in markers:\n        if marker not in answer:\n            errors.append(f\"缺少声音来源标记{marker}\")\n    \n    # 检查段落结构\n    paragraphs = [p.strip() for p in answer.split(\"～～\") if p.strip()]\n    if len(paragraphs) != 4:\n        errors.append(f\"段落数量错误（需要4段，实际{len(paragraphs)}段）\")\n    else:\n        # 检查第二段落标点符号\n        if re.search(r'[，。、；：？！“”‘’（）【】]', paragraphs[1]):\n            errors.append(\"第2段落包含标点符号\")\n    \n    # 检查声音标记格式\n    if not errors:\n        markers_found = re.findall(r'&来源\\d+&', answer)\n        if len(markers_found) != 3 or len(set(markers_found)) != 3:\n            errors.append(\"声音来源标记格式错误或数量不足\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于“如何在现代生活中保持心理健康”的文章，文章应只出现五个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。确保第四个段落不含任何标点符号。文章长度应至少为700字，至多为800字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    import string\n    \n    # 定义错误信息列表\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if \"【答案结束】\" not in response:\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 如果标记错误直接返回\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容\n    start_idx = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.find(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查段落分隔\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 5:\n        err_infos.append(f\"段落数量错误: 需要5段, 实际{len(paragraphs)}段\")\n    \n    # 检查第四段落标点符号\n    if len(paragraphs) >= 4:\n        para4 = paragraphs[3].strip()\n        # 中英文标点符号集合\n        punctuation_ch = \"，。！？；：“”‘’（）【】《》…—\"\n        all_punctuation = set(string.punctuation + punctuation_ch)\n        has_punctuation = any(char in all_punctuation for char in para4)\n        \n        if has_punctuation:\n            err_infos.append(\"第四段落包含标点符号\")\n    \n    # 检查字数（700-800字）\n    char_count = len(re.sub(r'\\s', '', content))  # 去除所有空白字符\n    if char_count < 700:\n        err_infos.append(f\"字数不足: 需要≥700字, 实际{char_count}字\")\n    elif char_count > 800:\n        err_infos.append(f\"字数超限: 需要≤800字, 实际{char_count}字\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“城市夜晚”的短文，描述城市在夜晚的变化和氛围。要求在描述中至少出现“灯光”一词五次，必须刚好出现“安静”一词三次，至多出现“繁忙”一词两次。短文需由9个句子（用中文句号或问号或感叹号分隔）组成，其中第5个句子的第3个汉字必须是“星”字。此外，第2个句子不少于25个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n\n    # 初始化检查结果\n    check_code = True\n    err_infos = []\n\n    # 检查起始标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if start_marker not in response:\n        err_infos.append(\"缺失起始标记【答案开始】\")\n        check_code = False\n    if end_marker not in response:\n        err_infos.append(\"缺失结束标记【答案结束】\")\n        check_code = False\n    \n    if not check_code:\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    start_idx = response.index(start_marker) + len(start_marker)\n    end_idx = response.index(end_marker)\n    content = response[start_idx:end_idx].strip()\n\n    # 1. 关键词频率检查\n    light_count = content.count(\"灯光\")\n    quiet_count = content.count(\"安静\")\n    busy_count = content.count(\"繁忙\")\n    \n    if light_count < 5:\n        err_infos.append(f\"'灯光'出现{light_count}次，要求至少5次\")\n    if quiet_count != 3:\n        err_infos.append(f\"'安静'出现{quiet_count}次，要求刚好3次\")\n    if busy_count > 2:\n        err_infos.append(f\"'繁忙'出现{busy_count}次，要求至多2次\")\n\n    # 2. 句子结构检查\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    \n    # 2.1 句子数量检查\n    if len(sentences) != 9:\n        err_infos.append(f\"共有{len(sentences)}个句子，要求9个句子\")\n    else:\n        # 2.2 第二句长度检查\n        second_sentence = sentences[1]\n        hanzi_count = sum(1 for char in second_sentence if '\\u4e00' <= char <= '\\u9fff')\n        if hanzi_count < 25:\n            err_infos.append(f\"第2句仅{hanzi_count}个汉字，要求不少于25字\")\n        \n        # 2.3 第五句特定位置检查\n        fifth_sentence = sentences[4]\n        hanzi_chars = [char for char in fifth_sentence if '\\u4e00' <= char <= '\\u9fff']\n        if len(hanzi_chars) < 3:\n            err_infos.append(\"第5句不足3个汉字\")\n        elif hanzi_chars[2] != \"星\":\n            err_infos.append(f\"第5句第3字应为'星'，实际为'{hanzi_chars[2]}'\")\n\n    # 汇总检查结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在现代社会中，科技的飞速发展为我们的日常生活带来了极大的便利，但也伴随着一些新的挑战和问题。例如，人工智能技术的快速普及在提高生产效率的同时，也引发了对隐私安全和职业替代的担忧。此外，环境问题和资源短缺依然是全球各国面临的重大挑战，尤其是在城市化进程加快的背景下，如何实现可持续发展成为亟待解决的课题。在这样的背景下，越来越多的人开始重视环保和节能，并尝试通过各种方式为地球的未来贡献力量。\n\n请撰写一篇关于“绿色生活方式与可持续发展”的文章。文章的每个句子（用中文句号或问号或感叹号分隔）的最后一个字必须是“也”字。请确保文章由5个段落（不要出现标题）构成，每个段落之间用“～～”符号分隔。其中，第2段的第28个汉字必须是“绿”字。文章应由30个句子组成，其中第5个句子的第3个汉字为“节”字。内容长度至少为150个汉字，不超过300个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查响应格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"答案未按要求使用标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 段落分隔检查\n    paragraphs = [p.strip() for p in content.split(\"～～\")]\n    if len(paragraphs) != 5:\n        err_infos.append(f\"段落数量错误:{len(paragraphs)}段\")\n    \n    # 汉字内容提取\n    all_text = re.sub(r\"\\s+\", \"\", content)  # 去空格\n    hanzi_list = re.findall(r'[一-龥]', all_text)  # 汉字列表\n    \n    # 长度检查\n    if not (150 <= len(hanzi_list) <= 300):\n        err_infos.append(f\"汉字数超限:{len(hanzi_list)}字\")\n    \n    # 句子分割检查\n    sentences = [s.strip() for s in re.split(r'[。？！]', all_text) if s.strip()]\n    if len(sentences) != 30:\n        err_infos.append(f\"句子数量错误:{len(sentences)}句\")\n    \n    # 第5句第3字检查\n    if len(sentences) >= 5:\n        fifth_sentence = re.sub(r\"\\s+\", \"\", sentences[4])\n        hanzi_in_fifth = re.findall(r'[一-龥]', fifth_sentence)\n        if len(hanzi_in_fifth) < 3 or hanzi_in_fifth[2] != \"节\":\n            err_infos.append(\"第5句第3字非'节'\")\n    \n    # 第2段第28字检查\n    if len(paragraphs) >= 2:\n        second_para = re.sub(r\"\\s+\", \"\", paragraphs[1])\n        hanzi_in_second = re.findall(r'[一-龥]', second_para)\n        if len(hanzi_in_second) < 28 or hanzi_in_second[27] != \"绿\":\n            err_infos.append(\"第2段第28字非'绿'\")\n    \n    # 句末字检查\n    for i, sent in enumerate(sentences):\n        clean_sent = re.sub(r\"\\s+\", \"\", sent)\n        if clean_sent and clean_sent[-1] != \"也\":\n            err_infos.append(f\"第{i+1}句末字非'也'\")\n            break  # 发现错误即停\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"所有验证通过\"\n    }"}
{"prompt": "首先，将下列文本的标点符号全部删除；然后，再将上一步修改过的文本中的文字按照每8个汉字组成一个部分，每个部分之间用“--”分隔，如果分隔到最后汉字数量不够，将剩下的汉字组成一个部分即可；最后，在上一步修改过的文本中的第13个汉字和第14个汉字之间插入汉字“骑”。直接返回最终修改后的文本，不要换行，不要出现任何其他多余的内容。\n\n发育生理学是一门研究生物体在发育过程中生理变化的科学。它涵盖了从受精卵到个体成熟的所有阶段，包括细胞分裂、分化和组织形成等过程。发育生理学研究的重点是了解生物体在形态上的变化以及内在生理功能的演变和调节。通过研究发育生理学，人们可以揭示基因表达、细胞信号传导和组织相互作用的复杂机制。在医学领域，发育生理学的研究有助于揭示遗传性疾病的病因，为诊断和治疗提供新思路。发育生理学的进展依赖于现代生物技术的发展，如基因组学、蛋白质组学和显微成像技术等，为深入理解生命现象提供了先进的工具和方法。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 定义原始文本\n    raw_text = \"发育生理学是一门研究生物体在发育过程中生理变化的科学。它涵盖了从受精卵到个体成熟的所有阶段，包括细胞分裂、分化和组织形成等过程。发育生理学研究的重点是了解生物体在形态上的变化以及内在生理功能的演变和调节。通过研究发育生理学，人们可以揭示基因表达、细胞信号传导和组织相互作用的复杂机制。在医学领域，发育生理学的研究有助于揭示遗传性疾病的病因，为诊断和治疗提供新思路。发育生理学的进展依赖于现代生物技术的发展，如基因组学、蛋白质组学和显微成像技术等，为深入理解生命现象提供了先进的工具和方法。\"\n    \n    # 步骤1: 删除所有标点符号（只保留汉字）\n    s1 = re.sub(r'[^一-龥]', '', raw_text)\n    \n    # 步骤2: 每8个汉字分组并用\"--\"连接\n    parts = [s1[i:i+8] for i in range(0, len(s1), 8)]\n    s2 = \"--\".join(parts)\n    \n    # 步骤3: 在第13和第14个汉字间插入\"骑\"\n    count = 0\n    new_s = []\n    for char in s2:\n        if '一' <= char <= '鿿':  # 判断是否为汉字\n            count += 1\n            new_s.append(char)\n            if count == 13:\n                new_s.append(\"骑\")\n        else:\n            new_s.append(char)\n    s3 = \"\".join(new_s)\n    \n    # 检查响应格式和内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    if not response.startswith(start_marker) or end_marker not in response:\n        return {\"check_code\": False, \"reason\": \"答案标记缺失\"}\n    \n    start_idx = response.find(start_marker) + len(start_marker)\n    end_idx = response.find(end_marker)\n    user_answer = response[start_idx:end_idx].strip()\n    \n    # 验证实际内容\n    if user_answer != s3:\n        return {\"check_code\": False, \"reason\": \"答案内容错误\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在当代快节奏的生活中，许多人面临着工作和家庭之间的压力平衡问题。尤其是在大城市，职场的竞争激烈和生活成本的上升，使得不少人感到焦虑和疲惫。近年来，心理健康逐渐成为社会关注的重要议题之一，越来越多的人开始重视心理健康的维护。与此同时，如何通过合理的时间管理和有效的沟通来缓解家庭与工作的双重压力，也成为许多职场人士讨论的热点话题。\n\n请撰写一篇关于“心理健康与时间管理”的文章。文章只能由15个句子组成（用中文句号或问号或感叹号分隔）。其中第10个句子的第4个汉字必须是“心”字。文章应探讨心理健康的重要性，以及如何通过科学的时间管理技巧来改善个人的生活质量和职业表现。请引用至少一项关于心理健康或时间管理的最新研究，以增强文章的说服力。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 验证标记完整性\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker):\n        err_infos.append(\"缺少【答案开始】标记\")\n    if not response.endswith(end_marker):\n        err_infos.append(\"缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    content = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 验证句子数量\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) != 15:\n        err_infos.append(f\"句子数量为{len(sentences)}而非15个\")\n    \n    # 验证第10句第4字为\"心\" (如果存在第10句)\n    if len(sentences) >= 10:\n        tenth_sentence = sentences[9]\n        if len(tenth_sentence) >= 4:\n            fourth_char = tenth_sentence[3]\n            if fourth_char != \"心\":\n                err_infos.append(f\"第10句第4字应为'心'，实际为'{fourth_char}'\")\n        else:\n            err_infos.append(\"第10句长度不足4个字符\")\n    \n    # 验证主题覆盖\n    required_themes = {\n        \"心理健康\": [\"心理健康\", \"心理状态\", \"心理压力\", \"心理问题\", \"精神健康\"],\n        \"时间管理\": [\"时间管理\", \"时间规划\", \"时间分配\", \"时间安排\", \"番茄工作法\"],\n        \"研究引用\": [\"研究\", \"调查\", \"报告\", \"数据\", \"显示\", \"表明\"]\n    }\n    \n    word_freq = Counter(re.findall(r'[\\u4e00-\\u9fa5]+', content))\n    theme_checks = []\n    \n    for theme, keywords in required_themes.items():\n        found = any(keyword in word_freq for keyword in keywords)\n        if not found:\n            theme_checks.append(theme)\n    \n    if theme_checks:\n        err_infos.append(f\"缺少主题: {', '.join(theme_checks)}\")\n    \n    # 生成最终结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请用简洁的语言描述一次在书店浏览书籍的经历。文章只能由6个段落组成（不要出现标题），每个段落用“～～”符号分隔。其中第五段中，“时间”一词必须出现至少两次。文章中必须出现“书架”和“灯光”这两个词，同时避免使用“网络”和“屏幕”这两个词。文章内容不得少于300个汉字。但不得超过600个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    err_infos = []\n    \n    # 提取答案部分\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 段落分隔符验证\n    paragraphs = [p.strip() for p in content.split(\"～～\") if p.strip()]\n    if len(paragraphs) != 6:\n        err_infos.append(f\"段落数量错误: 要求6段, 实际{len(paragraphs)}段\")\n    \n    # 第五段\"时间\"次数验证\n    if len(paragraphs) >= 5:\n        time_count = paragraphs[4].count(\"时间\")\n        if time_count < 2:\n            err_infos.append(f\"第五段'时间'出现次数不足: 要求≥2次, 实际{time_count}次\")\n    \n    # 关键词检查\n    if \"书架\" not in content:\n        err_infos.append(\"缺少必要词: '书架'\")\n    if \"灯光\" not in content:\n        err_infos.append(\"缺少必要词: '灯光'\")\n    if \"网络\" in content:\n        err_infos.append(\"包含禁用词: '网络'\")\n    if \"屏幕\" in content:\n        err_infos.append(\"包含禁用词: '屏幕'\")\n    \n    # 字数统计\n    hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', content))\n    if hanzi_count < 300:\n        err_infos.append(f\"字数不足300字: 实际{hanzi_count}字\")\n    if hanzi_count > 600:\n        err_infos.append(f\"字数超过600字: 实际{hanzi_count}字\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“智能家居对生活方式的影响”的文章，确保文章字数不少于200个字，不超过300个字，并分为2个段落，用两个换行符“\n\n”分隔开。请注意，文章的第二个句子（用中文句号或问号或感叹号分隔）必须以“随着技术的进步”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查答案标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker):\n        errors.append(\"缺少起始标记【答案开始】\")\n    if end_marker not in response:\n        errors.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    content_start = response.find(start_marker) + len(start_marker)\n    content_end = response.find(end_marker)\n    if content_start == -1 or content_end == -1 or content_end <= content_start:\n        errors.append(\"答案标记位置错误\")\n        return {\"check_code\": False, \"reason\": \", \".join(errors)}\n    \n    content = response[content_start:content_end].strip()\n    \n    # 检查字数\n    word_count = len(content)\n    if word_count < 200:\n        errors.append(f\"字数不足200字（当前：{word_count}字）\")\n    elif word_count > 300:\n        errors.append(f\"字数超过300字（当前：{word_count}字）\")\n    \n    # 检查段落分隔\n    paragraphs = content.split(\"\\n\\n\")\n    if len(paragraphs) != 2:\n        errors.append(f\"段落数量错误（当前：{len(paragraphs)}段）\")\n    else:\n        if not paragraphs[0].strip() or not paragraphs[1].strip():\n            errors.append(\"存在空段落\")\n    \n    # 检查第二个句子\n    sentences = re.split(r'(?<=[。？！])', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    if len(sentences) < 2:\n        errors.append(\"有效句子数量不足\")\n    else:\n        second_sentence = sentences[1]\n        if not second_sentence.startswith(\"随着技术的进步\"):\n            errors.append(\"第二个句子未以'随着技术的进步'开头\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \", \".join(errors)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一篇关于如何有效管理时间的文章，并以‘时间管理’这四个字开头。文章应详细解释并列出其中三种主要方法，使用“【方法1】”、“【方法2】”和“【方法3】”作为主要方法的占位符。文章应包含4个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“计划”这个词务必至少出现两次。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    reason = []\n    \n    # 检查答案开始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_index = response.find(start_marker)\n    end_index = response.find(end_marker)\n    \n    if start_index == -1 or end_index == -1 or start_index >= end_index:\n        reason.append(\"缺少或错误的答案标记\")\n        return {\"check_code\": False, \"reason\": reason}\n    \n    # 提取答案内容\n    content = response[start_index + len(start_marker):end_index].strip()\n    \n    # 检查是否以\"时间管理\"开头\n    if not content.startswith(\"时间管理\"):\n        reason.append(\"回答未以'时间管理'开头\")\n    \n    # 检查段落数量\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        reason.append(f\"段落数量应为4，实际为{len(paragraphs)}\")\n    \n    # 检查方法标记\n    required_methods = [\"【方法1】\", \"【方法2】\", \"【方法3】\"]\n    for method in required_methods:\n        if method not in content:\n            reason.append(f\"缺少{method}标记\")\n    \n    # 检查第二个段落中\"计划\"出现次数\n    if len(paragraphs) >= 2:\n        plan_count = paragraphs[1].count(\"计划\")\n        if plan_count < 2:\n            reason.append(f\"第二段落中'计划'出现次数不足（至少2次，实际{plan_count}次）\")\n    else:\n        reason.append(\"无法检查第二段落（段落数量不足）\")\n    \n    return {\n        \"check_code\": len(reason) == 0,\n        \"reason\": reason if reason else []\n    }"}
{"prompt": "请撰写一篇关于家庭聚会的重要性的文章。文章只能出现40个句子，由6个段落组成，每个段落用两个换行符“\n\n”分隔开来。文章中必须包含\"团聚\"和 \"亲情''这两个词语，在第二个段落中，“团聚”这个词至少出现两次，并且“亲情”这个词必须只出现三次。文章长度应至少为1000字，至多为1200字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 原始指令文本\n    original_instruction = '请撰写一篇关于家庭聚会的重要性的文章。文章只能出现40个句子，由6个段落组成，每个段落用两个换行符“\\n\\n”分隔开来。文章中必须包含\"团聚\"和 \"亲情''这两个词语，在第二个段落中，“团聚”这个词至少出现两次，并且“亲情”这个词必须只出现三次。文章长度应至少为1000字，至多为1200字。'\n    \n    err_infos = []\n    \n    # 检查标记是否存在\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 提取答案内容\n    start_idx = response.index(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.index(\"【答案结束】\")\n    answer_content = response[start_idx:end_idx].strip()\n    \n    # 检查指令重复\n    if not answer_content.startswith(original_instruction):\n        err_infos.append(\"指令重复不完整\")\n    \n    # 提取文章部分（移除重复的指令）\n    article_start = len(original_instruction)\n    article_content = answer_content[article_start:].strip()\n    \n    # 检查段落结构\n    paragraphs = re.split(r'\\n{2,}', article_content)\n    if len(paragraphs) != 6:\n        err_infos.append(f\"段落数量错误（实际：{len(paragraphs)}）\")\n    \n    # 检查句子数量\n    sentences = re.split(r'[。！？…]+', article_content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 40:\n        err_infos.append(f\"句子数量错误（实际：{len(sentences)}）\")\n    \n    # 检查关键词存在\n    if \"团聚\" not in article_content:\n        err_infos.append(\"缺少关键词'团聚'\")\n    if \"亲情\" not in article_content:\n        err_infos.append(\"缺少关键词'亲情'\")\n    \n    # 检查第二个段落中的\"团聚\"\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1]\n        if second_para.count(\"团聚\") < 2:\n            err_infos.append(\"第二段落'团聚'次数不足\")\n    \n    # 检查全文中\"亲情\"次数\n    qing_count = article_content.count(\"亲情\")\n    if qing_count != 3:\n        err_infos.append(f\"'亲情'次数错误（实际：{qing_count}）\")\n    \n    # 检查文章长度\n    char_count = len(article_content)\n    if char_count < 1000 or char_count > 1200:\n        err_infos.append(f\"字数范围错误（实际：{char_count}字）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于城市公共交通系统的文章，其中必须包含“效率”和“环保”这两个词。文章的字数应至少为200个汉字且不超过500个汉字，并要求第五个句子以“在城市规划中”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查答案标记\n    if not re.search(r\"【答案开始】.*【答案结束】\", response, re.DOTALL):\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": \",\".join(err_infos)}\n    \n    # 提取答案内容\n    content = re.search(r\"【答案开始】(.*)【答案结束】\", response, re.DOTALL)\n    if not content:\n        err_infos.append(\"无法提取答案内容\")\n        return {\"check_code\": False, \"reason\": \",\".join(err_infos)}\n    \n    content = content.group(1).strip()\n    \n    # 关键词检查\n    if \"效率\" not in content:\n        err_infos.append(\"缺少关键词'效率'\")\n    if \"环保\" not in content:\n        err_infos.append(\"缺少关键词'环保'\")\n    \n    # 汉字字数统计\n    hanzi_chars = re.findall(r'[一-龥]', content)\n    hanzi_count = len(hanzi_chars)\n    if hanzi_count < 200:\n        err_infos.append(f\"字数不足200汉字（当前：{hanzi_count}）\")\n    elif hanzi_count > 500:\n        err_infos.append(f\"字数超过500汉字（当前：{hanzi_count}）\")\n    \n    # 句子结构检查\n    sentences = re.split(r'[。？！…]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    if len(sentences) < 5:\n        err_infos.append(\"句子数量不足5句\")\n    else:\n        if not sentences[4].startswith(\"在城市规划中\"):\n            err_infos.append(\"第五个句子不以'在城市规划中'开头\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \",\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "近年来，智能家居设备逐渐普及，改变了人们的生活方式。从智能音箱到智能灯泡，这些设备通过互联网连接，能够在一定程度上自动化和简化日常任务。智能家居不仅提高了便利性，还提升了安全性和能源效率。例如，智能恒温器可以根据用户的作息和天气变化自动调整室温，节省能源消耗。智能门锁可以通过手机应用程序远程控制，增加家庭安全。然而，智能家居设备的普及也带来了一些问题，如隐私安全隐患和设备兼容性问题。尽管如此，智能家居仍然是一个备受瞩目的领域，吸引了大量的投资和创新。\n\n请写一篇关于智能家居设备对日常生活影响的短文，具体分析其优缺点。要求文章以“未来，智能家居将进一步融入我们的生活，带来更多便利和挑战。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义验证结果结构\n    err_infos = []\n    \n    # 验证标记完整性\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker):\n        err_infos.append(\"开头缺少【答案开始】标记\")\n    if not response.endswith(end_marker):\n        err_infos.append(\"结尾缺少【答案结束】标记\")\n    \n    # 提取实际回答内容\n    content = \"\"\n    if response.startswith(start_marker) and response.endswith(end_marker):\n        content = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 验证结尾句\n    required_ending = \"未来，智能家居将进一步融入我们的生活，带来更多便利和挑战。\"\n    if not content.endswith(required_ending):\n        err_infos.append(f\"结尾句不符合要求，应以'{required_ending}'结束\")\n    \n    # 验证内容完整性\n    if not content:\n        err_infos.append(\"回答内容为空\")\n    \n    # 检查多余内容\n    if response.count(start_marker) > 1 or response.count(end_marker) > 1:\n        err_infos.append(\"存在多余的标记符\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "撰写一篇关于“城市园艺”的文章，文章应只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。在第三个段落中，必须刚好由6个句子（用中文句号或问号或感叹号分隔）组成。请确保文章的第2段的第7个汉字必须是“绿”字，并且该段至少包含80个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        err_infos.append(\"回答缺少必要的开始/结束标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    content = response.split(\"【答案开始】\")[1].split(\"【答案结束】\")[0].strip()\n    \n    # 检查段落分隔符\n    segments = content.split(\"～～\")\n    if len(segments) != 4:\n        err_infos.append(f\"段落数量错误，应为4段，实际为{len(segments)}段\")\n    \n    # 检查第二段要求\n    if len(segments) >= 2:\n        segment2 = segments[1].strip()\n        # 检查第7个汉字\n        chinese_chars = re.findall(r'[一-龥]', segment2)\n        if len(chinese_chars) < 7:\n            err_infos.append(\"第二段汉字数量不足7个\")\n        elif chinese_chars[6] != \"绿\":\n            err_infos.append(f\"第二段第7个汉字应为'绿'，实际为'{chinese_chars[6]}'\")\n        \n        # 检查汉字数量\n        if len(chinese_chars) < 80:\n            err_infos.append(f\"第二段汉字数量不足80个，实际为{len(chinese_chars)}个\")\n    \n    # 检查第三段句子数量\n    if len(segments) >= 3:\n        segment3 = segments[2].strip()\n        sentences = re.split(r'[。？！]', segment3)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            err_infos.append(f\"第三段句子数量应为6句，实际为{len(sentences)}句\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "近年来，气候变化已经成为全球关注的焦点，极端天气事件的频发让人们意识到环境保护的重要性。许多国家和地区正在采取措施来减缓气候变化的影响，例如大力发展可再生能源、提升能效、以及推行低碳经济等。尤其是在城市化进程加快的当下，城市的绿色发展已经成为一个重要的议题。绿色城市的概念不仅包括减少污染、节约资源，还涵盖了提升居民生活质量和促进社会和谐等方面。为了实现可持续发展，各地政府、企业和个人都在积极探索创新的解决方案。\n\n请撰写一篇关于“绿色城市发展”的文章，文章只能由7个段落组成，每个段落用两个换行符“\n\n”分隔开来。在第5个段落中，必须刚好由七个句子（用中文句号或问号或感叹号分隔）组成。文章内容至少有500字，并且不超过800字。请在文章中避免使用“污染”、“环保”这两个词，但必须包含“可持续”、“社区”这两个词。文章请以“随着全球变暖加剧”这八个字开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        err_infos.append(\"答案未包含指定标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    start_idx = response.index(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.index(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查开头\n    if not content.startswith(\"随着全球变暖加剧\"):\n        err_infos.append(\"文章未以指定句子开头\")\n    \n    # 检查段落结构\n    paragraphs = re.split(r'\\n{2,}', content)\n    if len(paragraphs) != 7:\n        err_infos.append(f\"段落数量错误(要求7段，实际{len(paragraphs)}段)\")\n    else:\n        # 检查第五段落句子数量\n        fifth_para = paragraphs[4]\n        sentences = re.split(r'[。？！]', fifth_para)\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 7:\n            err_infos.append(f\"第五段句子数量错误(要求7句，实际{len(sentences)}句)\")\n    \n    # 检查字数\n    char_count = len(re.sub(r'\\s', '', content))  # 去除空白字符\n    if char_count < 500:\n        err_infos.append(f\"字数不足500字(实际{char_count}字)\")\n    if char_count > 800:\n        err_infos.append(f\"字数超过800字(实际{char_count}字)\")\n    \n    # 检查关键词\n    if \"污染\" in content or \"环保\" in content:\n        err_infos.append(\"包含禁用词汇\")\n    if \"可持续\" not in content:\n        err_infos.append(\"缺少必要词汇'可持续'\")\n    if \"社区\" not in content:\n        err_infos.append(\"缺少必要词汇'社区'\")\n    \n    # 返回验证结果\n    if not err_infos:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}"}
{"prompt": "请描述一场家庭聚会中的趣事。文章只能出现4个段落（不需要标题），段落之间用“～～”符号分隔。在第二个段落中，“笑声”这个词务必至少出现2次，“回忆”这个词最多只能出现1次。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n\n    # 检查开头和结尾标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答开头缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答结尾缺少【答案结束】标记\")\n    \n    # 提取回答内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 检查段落分隔符\n    segments = re.split(r\"～～\", content)\n    if len(segments) != 4:\n        errors.append(f\"段落数量错误（应为4段，实际{len(segments)}段）\")\n    \n    # 检查第二段落关键词\n    if len(segments) >= 2:\n        paragraph2 = segments[1]\n        laugh_count = paragraph2.count(\"笑声\")\n        recall_count = paragraph2.count(\"回忆\")\n        \n        if laugh_count < 2:\n            errors.append(f\"第二段落'笑声'出现次数不足（至少2次，实际{laugh_count}次）\")\n        if recall_count > 1:\n            errors.append(f\"第二段落'回忆'出现次数超限（最多1次，实际{recall_count}次）\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请描述一种你认为最有效的家庭节能方法。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。要求文章以“节能的关键在于”开头。要求文章的每个句子（用中文句号或问号或感叹号分隔）至少12个汉字，至多22个汉字。要求模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义指令前缀\n    expected_prefix = \"请描述一种你认为最有效的家庭节能方法。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。要求文章以“节能的关键在于”开头。要求文章的每个句子（用中文句号或问号或感叹号分隔）至少12个汉字，至多22个汉字。要求模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\"\n    \n    # 错误信息收集\n    err_infos = []\n    \n    # 提取答案部分\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1:\n        err_infos.append(\"缺少【答案开始】标记\")\n    if end_idx == -1:\n        err_infos.append(\"缺少【答案结束】标记\")\n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n\n    response = response[7:-7].strip()\n    # 检查开头指令重复\n    if not response.startswith(expected_prefix):\n        err_infos.append(\"指令重复不完整或格式错误\")\n    \n    answer_block = response.replace(expected_prefix, \"\").strip()\n    \n    # 检查答案分隔符\n    if \"@@@@@@\" not in answer_block:\n        err_infos.append(\"缺少答案分隔符@@@@@@\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 分割两个答案\n    answers = answer_block.split(\"@@@@@@\")\n    if len(answers) != 2:\n        err_infos.append(f\"答案数量错误，应为2个，实际为{len(answers)}个\")\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 验证每个答案\n    for ans_idx, ans in enumerate(answers):\n        ans = ans.strip()\n        # 检查开头格式\n        if not ans.startswith(\"节能的关键在于\"):\n            err_infos.append(f\"答案{ans_idx+1}开头格式错误\")\n        \n        # 检查段落分隔符\n        paragraphs = ans.split(\"～～\")\n        if len(paragraphs) != 4:\n            err_infos.append(f\"答案{ans_idx+1}段落数量错误，应为4段，实际为{len(paragraphs)}段\")\n        \n        # 检查每个句子长度\n        for p_idx, para in enumerate(paragraphs):\n            # 分割句子\n            sentences = re.split(r'[。？！]', para)\n            sentences = [s.strip() for s in sentences if s.strip()]\n            \n            for s_idx, sent in enumerate(sentences):\n                # 统计汉字数量\n                hanzi_chars = re.findall(r'[一-龥]', sent)\n                hanzi_count = len(hanzi_chars)\n                \n                if hanzi_count < 12 or hanzi_count > 22:\n                    err_infos.append(\n                        f\"答案{ans_idx+1}第{p_idx+1}段第{s_idx+1}句汉字数不符\"\n                        f\"(需12-22字，实际{hanzi_count}字): '{sent}'\"\n                    )\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "在当今快速发展的科技时代，智能家居系统正逐渐成为家庭生活的重要组成部分。智能家居是指通过物联网技术，将家中的各种设备（如照明系统、安防系统、家电等）连接起来，实现自动化和远程控制。这不仅提升了生活的便利性，还提高了能源效率和安全性。然而，许多人对如何有效地整合和使用这些技术仍感到困惑。智能家居市场中存在各种各样的产品和平台，用户需要根据自己的需求和预算选择合适的方案。此外，智能家居系统的安全性和隐私问题也是用户需要关注的重要方面。\n\n请撰写一篇关于智能家居系统选择指南的文章，要求第三个句子（用中文句号或问号或感叹号分隔）以“这是一个关键因素”结尾。文章应包括以下内容：如何评估智能家居产品的兼容性，如何确保系统的安全性，以及选择适合自己需求的智能家居产品的技巧。请确保提供具体的例子和实际应用场景，以帮助读者更好地理解和应用这些建议。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查标记是否完整\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"未包含必要的开始/结束标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    start_idx = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.find(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查第三个句子结尾\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    if len(sentences) < 3:\n        err_infos.append(\"句子数量不足3句\")\n    elif not sentences[2].endswith(\"这是一个关键因素\"):\n        err_infos.append(f\"第三个句子不以'这是一个关键因素'结尾: '{sentences[2]}'\")\n    \n    # 检查内容完整性\n    required_topics = {\n        \"兼容性\": [\"兼容性\", \"协议\", \"平台\", \"连接性\"],\n        \"安全性\": [\"安全\", \"隐私\", \"加密\", \"防护\"],\n        \"技巧\": [\"需求\", \"预算\", \"技巧\", \"建议\"]\n    }\n    missing = []\n    for topic, keywords in required_topics.items():\n        if not any(kw in content for kw in keywords):\n            missing.append(topic)\n    if missing:\n        err_infos.append(f\"缺少核心内容: {','.join(missing)}\")\n    \n    # 检查具体示例\n    examples = re.findall(r'(例如|比如|如).*?[。，；]', content)\n    if len(examples) < 2:\n        err_infos.append(f\"具体示例不足({len(examples)}处)\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于“传统手工艺在现代生活中的应用”的文章，要求如下：  \n1. 请确保文章只出现4个段落（不要出现标题），每个段落之间用“～～”符号分隔。  \n2. 文章只能恰好由10个句子（用中文句号或问号或感叹号分隔）组成。每个句子不得少于15个汉字，但不得超过25个汉字。第五个句子必须以“近年来”这几个字开头。  \n3. 文章避免使用“科技”、“机器”和“自动化”这三个词。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 提取答案部分\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        return {\"check_code\": False, \"reason\": \"答案标记缺失或位置错误\"}\n    \n    content = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 验证段落结构\n    paragraphs = [k for k in content.split(\"～～\") if k.strip()]\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量错误，要求4段实际{len(paragraphs)}段\"}\n    \n    # 合并文本并分割句子\n    full_text = content.replace(\"～～\", \"\")\n    sentences = re.split(r'[。？！]', full_text)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    # 验证句子数量\n    if len(sentences) != 10:\n        return {\"check_code\": False, \"reason\": f\"句子数量错误，要求10句实际{len(sentences)}句\"}\n    \n    # 验证句子长度和禁用词\n    banned_words = [\"科技\", \"机器\", \"自动化\"]\n    error_log = []\n    ban_counter = Counter()\n    \n    for i, sent in enumerate(sentences, 1):\n        # 汉字计数\n        hanzi_count = len(re.findall(r'[一-龥]', sent))\n        \n        # 长度检查\n        if hanzi_count < 15 or hanzi_count > 25:\n            error_log.append(f\"第{i}句长度违规({hanzi_count}汉字)\")\n        \n        # 第五句特殊检查\n        if i == 5 and not sent.startswith(\"近年来\"):\n            error_log.append(\"第5句未以'近年来'开头\")\n        \n        # 禁用词检查\n        for word in banned_words:\n            if word in sent:\n                ban_counter[word] += 1\n    \n    # 汇总禁用词错误\n    for word, count in ban_counter.items():\n        error_log.append(f\"包含禁用词'{word}'({count}次)\")\n    \n    # 返回最终结果\n    if error_log:\n        return {\"check_code\": False, \"reason\": \" | \".join(error_log)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于森林保护的重要性以及具体措施的文章。内容需要详细阐述森林保护的三个主要原因，并使用“【原因1】”、“【原因2】”和“【原因3】”作为主要原因的占位符。文章中不能使用“开发”、“砍伐”和“污染”这三个词。并且在描述中，词语“生态”、“动物”和“空气”每个词语出现不多于三次。文章应包含四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。整篇文章的内容不能出现中文逗号。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n\n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少答案开始标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少答案结束标记\")\n    \n    # 提取答案内容\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    else:\n        content = \"\"\n    \n    # 检查段落结构\n    paragraphs = content.split('\\n\\n')\n    if len(paragraphs) != 4:\n        errors.append(f\"段落数量应为4，实际为{len(paragraphs)}\")\n    \n    # 检查占位符\n    for placeholder in [\"【原因1】\", \"【原因2】\", \"【原因3】\"]:\n        if placeholder not in content:\n            errors.append(f\"缺少占位符{placeholder}\")\n    \n    # 检查禁用词\n    forbidden_words = [\"开发\", \"砍伐\", \"污染\"]\n    for word in forbidden_words:\n        if word in content:\n            errors.append(f\"包含禁用词'{word}'\")\n    \n    # 检查关键词频率\n    keywords = [\"生态\", \"动物\", \"空气\"]\n    for word in keywords:\n        count = content.count(word)\n        if count > 3:\n            errors.append(f\"'{word}'出现次数{count}次，超过3次限制\")\n    \n    # 检查第三段落句子数量\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2]\n        # 使用中文标点分割句子\n        sentences = re.split(r'[。？！]', third_para)\n        # 移除空字符串\n        sentences = [s.strip() for s in sentences if s.strip()]\n        if len(sentences) != 6:\n            errors.append(f\"第三段应有6个句子，实际为{len(sentences)}个\")\n    else:\n        errors.append(\"缺少第三段落\")\n    \n    # 检查中文逗号\n    if '，' in content:\n        errors.append(\"内容包含中文逗号\")\n    \n    # 返回验证结果\n    if errors:\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请撰写一篇关于城市公共交通系统如何提升效率的文章。文章中不得出现“便利”、“创新”、“绿色”这三个词。文章必须包含“交通枢纽”这个词，并以“这将为市民带来更加便捷的出行体验。”结尾。文章应由四个段落组成，第二个段落必须刚好由六个句子组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    # 提取答案内容\n    start_index = response.find(start_marker)\n    end_index = response.find(end_marker)\n    \n    if start_index == -1 or end_index == -1 or start_index >= end_index:\n        return {\"check_code\": False, \"reason\": \"答案标记缺失或错误\"}\n    \n    content = response[start_index + len(start_marker):end_index].strip()\n    \n    # 检查禁止词\n    forbidden_words = [\"便利\", \"创新\", \"绿色\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        return {\"check_code\": False, \"reason\": f\"包含禁止词: {', '.join(found_words)}\"}\n    \n    # 检查必须词\n    if \"交通枢纽\" not in content:\n        return {\"check_code\": False, \"reason\": \"缺少'交通枢纽'关键词\"}\n    \n    # 检查段落数量\n    paragraphs = [p.strip() for p in re.split(r'\\n\\s*\\n', content) if p.strip()]\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量错误: {len(paragraphs)}段(应为4段)\"}\n    \n    # 检查第二段句子数量\n    second_para = paragraphs[1]\n    sentences = [s.strip() for s in re.split(r'[。？！]', second_para) if s.strip()]\n    if len(sentences) != 6:\n        return {\"check_code\": False, \"reason\": f\"第二段句子数量错误: {len(sentences)}句(应为6句)\"}\n    \n    # 检查结尾\n    if not content.endswith(\"这将为市民带来更加便捷的出行体验。\"):\n        return {\"check_code\": False, \"reason\": \"结尾不符合要求\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在智能手机普及的今天，手机应用程序的隐私和安全性变得尤为重要。许多应用程序会收集用户的数据，包括位置、联系人、甚至是使用习惯。这些信息可能被用于广告目的，也可能存在泄露的风险。用户在选择应用程序时，往往忽视了隐私条款，而开发者也可能在隐私保护上存在疏漏。因此，了解并选择安全的应用程序，对于保护个人隐私至关重要。近年来，政府和技术公司加大了对应用程序隐私保护的监管和技术投入，但用户自身的重视程度仍然是关键。\n\n请撰写一篇关于“如何选择安全的手机应用程序”的文章。文章应详细解释如何评估应用程序的安全性，并列出其中三种主要评估方法，使用“&方法1&”、“&方法2&”和“&方法3&”作为主要评估方法的占位符。请确保文章只出现4个段落（不要出现标题），每个段落之间用'～～'符号分隔。请在文章中，确保第五个句子以“在选择应用时”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n\n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少结束标记【答案结束】\")\n    \n    if errors:\n        return {\"check_code\": False, \"reason\": \";\".join(errors)}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查段落数量和分隔符\n    paragraphs = [p.strip() for p in content.split('～～')]\n    if len(paragraphs) != 4:\n        errors.append(f\"段落数量错误，应为4段，实际为{len(paragraphs)}段\")\n    if any(not p for p in paragraphs):\n        errors.append(\"存在空段落\")\n    \n    # 检查占位符\n    placeholders = set(re.findall(r'&方法\\d+&', content))\n    required_placeholders = {'&方法1&', '&方法2&', '&方法3&'}\n    missing = required_placeholders - placeholders\n    extra = placeholders - required_placeholders\n    \n    if missing:\n        errors.append(f\"缺少占位符: {', '.join(missing)}\")\n    if extra:\n        errors.append(f\"存在额外占位符: {', '.join(extra)}\")\n    \n    # 检查第五个句子\n    sentences = []\n    temp = \"\"\n    for char in content:\n        temp += char\n        if char in ('。', '？', '！', '……'):\n            sentences.append(temp.strip())\n            temp = \"\"\n    if temp:  # 添加最后未结束的句子\n        sentences.append(temp.strip())\n    \n    if len(sentences) < 5:\n        errors.append(f\"总句子数不足5句，实际只有{len(sentences)}句\")\n    else:\n        fifth_sentence = sentences[4]\n        if not fifth_sentence.startswith(\"在选择应用时\"):\n            errors.append(f\"第五个句子应以'在选择应用时'开头，实际为: '{fifth_sentence[:20]}...'\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \";\".join(errors) if errors else \"\"\n    }"}
{"prompt": "写一篇关于城市公共交通发展的文章，内容应包含四个段落（不要出现标题），段落之间用'～～'符号分隔。第三个段落必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。在文章中，请详细解释并列出城市交通改善的三种主要原因，使用“&原因1&”、“&原因2&”和“&原因3&”作为主要原因的占位符。请确保第四个句子以“这对未来发展至关重要”结尾。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 1. 检查响应格式标记\n    if not response.startswith(\"【答案开始】\"):\n        return {\"check_code\": False, \"reason\": \"回答未以【答案开始】标记开头\"}\n    if not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"回答未以【答案结束】标记结尾\"}\n    \n    # 提取内容部分\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 2. 检查指令重复部分（简化关键特征检查）\n    required_phrases = \"写一篇关于城市公共交通发展的文章，内容应包含四个段落（不要出现标题），段落之间用'～～'符号分隔。第三个段落必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。在文章中，请详细解释并列出城市交通改善的三种主要原因，使用“&原因1&”、“&原因2&”和“&原因3&”作为主要原因的占位符。请确保第四个句子以“这对未来发展至关重要”结尾。\"\n\n    if not content.startswith(required_phrases):\n        return {\"check_code\": False, \"reason\": \"未完整重复指令要求\"}\n    content = content.replace(required_phrases,\"\").strip()\n    \n    # 3. 分割段落\n    paragraphs = re.split(r'～～+', content)\n    if len(paragraphs) < 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量不足4个，实际检测到{len(paragraphs)}个\"}\n    \n    # 4. 检查第三段句子数量\n    third_para = paragraphs[2]\n    sentences = re.split(r'[。？！]', third_para)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 6:\n        return {\"check_code\": False, \"reason\": f\"第三段应为6个句子，实际检测到{len(sentences)}个\"}\n    \n    # 5. 检查第四句结尾\n    if not sentences[3].endswith(\"这对未来发展至关重要\"):\n        return {\"check_code\": False, \"reason\": f\"第三段第四句结尾错误，应为'这对未来发展至关重要'，实际结尾：'{sentences[3][-10:]}'\"}\n    \n    # 6. 检查原因占位符\n    reason_placeholders = [\"&原因1&\", \"&原因2&\", \"&原因3&\"]\n    missing = []\n    for placeholder in reason_placeholders:\n        if placeholder not in content:\n            missing.append(placeholder)\n    if missing:\n        return {\"check_code\": False, \"reason\": f\"缺失原因占位符：{', '.join(missing)}\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}\n"}
{"prompt": "在科技飞速发展的今天，智能家居的概念已经越来越被人们所接受和应用。智能家居系统通过互联网和物联网技术将家庭中的各种设备连接在一起，实现设备间的互联互通和智能控制。智能家居不仅提高了人们的生活质量，还大大提升了家居安全性和便利性。然而，对于许多人来说，智能家居还处于一个相对陌生的阶段，很多家庭并没有完全理解和应用这一技术。\n\n请写一篇关于智能家居系统的文章，详细描述智能家居系统的组成部分、工作原理以及它在日常生活中的具体应用。文章中至少要出现五次“智能家居”这个词，并且必须恰好出现三次“物联网”这个词语。请确保文章内容全面，并对智能家居系统的未来发展做出合理预测。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 检查响应格式\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少开头标记\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结尾标记\")\n    \n    # 提取正文内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 统计关键词出现次数\n    smart_home_count = len(re.findall(r\"智能家居\", content))\n    iot_count = len(re.findall(r\"物联网\", content))\n    \n    if smart_home_count < 5:\n        err_infos.append(f\"'智能家居'出现次数不足（实际：{smart_home_count}次）\")\n    if iot_count != 3:\n        err_infos.append(f\"'物联网'出现次数不符（实际：{iot_count}次）\")\n    \n    # 检查内容完整性\n    required_sections = {\n        \"组成部分\": [\"组成部分\", \"组成元素\", \"包括哪些\", \"构成部分\"],\n        \"工作原理\": [\"工作原理\", \"如何工作\", \"运作机制\", \"工作方式\"],\n        \"具体应用\": [\"具体应用\", \"实际应用\", \"应用场景\", \"使用案例\"],\n        \"未来发展\": [\"未来发展\", \"未来趋势\", \"发展前景\", \"未来预测\"]\n    }\n    \n    for section, keywords in required_sections.items():\n        if not any(kw in content for kw in keywords):\n            err_infos.append(f\"缺少{section}相关内容\")\n    \n    # 返回验证结果\n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“传统手工艺在现代社会的作用”的文章。不能出现“现代化”、“科技”和“创新”这几个词。请确保文章只出现2个段落（不要出现标题），每个段落之间用'～～'符号分隔。文章的每个句子（用中文句号或问号或感叹号分隔）的最后一个字使用“也”字作为结尾。请确保文章恰好由9个句子（用中文句号或问号或感叹号分隔）组成。其中第3个句子的第4个汉字必须是“匠”字，第5个句子多于20个汉字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n\n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1:\n        err_infos.append(\"未找到答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    content = response[start_idx+len(start_marker):end_idx].strip()\n    \n    # 检查禁用词\n    forbidden_words = [\"现代化\", \"科技\", \"创新\"]\n    for word in forbidden_words:\n        if word in content:\n            err_infos.append(f\"包含禁用词'{word}'\")\n    \n    # 检查段落分隔符\n    paragraphs = content.split(\"～～\")\n    if len(paragraphs) != 2:\n        err_infos.append(f\"段落数量错误（{len(paragraphs)}段）\")\n    \n    # 分句处理\n    sentences = []\n    for para in paragraphs:\n        # 使用中文标点分句（保留分隔符用于位置计算）\n        split_sents = re.findall(r'[^。？！]+[。？！]', para)\n        sentences.extend(split_sents)\n    \n    # 检查句子数量\n    if len(sentences) != 9:\n        err_infos.append(f\"句子数量错误（{len(sentences)}句）\")\n    \n    # 检查每个句子结尾\n    for i, sent in enumerate(sentences):\n        clean_sent = sent.strip()\n        if len(clean_sent) < 1:\n            continue\n        last_char = clean_sent[-1]\n        if last_char not in \"。？！\":\n            err_infos.append(f\"第{i+1}句缺少结尾标点\")\n        elif len(clean_sent) < 2:\n            err_infos.append(f\"第{i+1}句长度不足\")\n        else:\n            last_word = clean_sent[-2]  # 标点前的最后一个字\n            if last_word != \"也\":\n                err_infos.append(f\"第{i+1}句结尾字不是'也'（{last_word}）\")\n    \n    # 检查第3句第4字\n    if len(sentences) >= 3:\n        third_sent = sentences[2].strip()\n        if len(third_sent) < 4:\n            err_infos.append(\"第3句长度不足4字\")\n        else:\n            fourth_char = third_sent[3]\n            if fourth_char != \"匠\":\n                err_infos.append(f\"第3句第4字错误（{fourth_char}）\")\n    \n    # 检查第5句长度\n    if len(sentences) >= 5:\n        fifth_sent = sentences[4].strip()\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fa5]', fifth_sent)\n        if len(chinese_chars) <= 20:\n            err_infos.append(f\"第5句汉字不足（{len(chinese_chars)}字）\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"验证通过\"\n    }"}
{"prompt": "在现代社会中，家庭与工作之间的平衡成为了许多人关注的焦点。随着工作压力的增加，许多人发现很难在这两者之间找到理想的平衡点。家庭和工作之间的矛盾不仅影响到个人的心理健康，还可能导致工作效率的下降。因此，研究并掌握一些有效的策略来平衡家庭与工作显得尤为重要。背景研究表明，合理的时间管理、家庭成员之间的有效沟通以及适当的压力管理是实现平衡的关键要素。许多公司开始意识到员工家庭和工作平衡的重要性，并采取措施如弹性工作时间、远程办公等，以帮助员工更好地协调这两方面的需求。通过合理的安排和对个人需求的深刻理解，个人可以在工作和家庭之间找到一个适合自己的平衡点，从而提高生活的整体质量。\n\n请撰写一篇关于“家庭与工作平衡策略”的文章，文章需以“在当今社会”这五个字开头。文章必须分为三个段落，并用两个换行符“\n\n”分隔开来。请在文章中至少使用“时间管理”一词三次，并确保“压力管理”一词必须只出现两次。同时，文章中每个句子（用中文句号或问号或感叹号分隔）的字数最多不超过25个字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n\n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        errors.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(errors)}\n    \n    # 提取答案内容\n    start_idx = response.index(\"【答案开始】\") + 5\n    end_idx = response.index(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n    \n    # 检查开头\n    if not content.startswith(\"在当今社会\"):\n        errors.append(\"开头未使用'在当今社会'\")\n    \n    # 检查段落结构\n    paragraphs = [p.strip() for p in re.split(r'\\n\\n+', content) if p.strip()]\n    if len(paragraphs) != 3:\n        errors.append(f\"段落数量错误（要求3段，实际{len(paragraphs)}段）\")\n    \n    # 关键词检查\n    time_count = content.count(\"时间管理\")\n    stress_count = content.count(\"压力管理\")\n    if time_count < 3:\n        errors.append(f\"'时间管理'出现次数不足（要求≥3次，实际{time_count}次）\")\n    if stress_count != 2:\n        errors.append(f\"'压力管理'出现次数错误（要求2次，实际{stress_count}次）\")\n    \n    # 句子长度检查\n    sentences = re.findall(r'[^。？！]*[。？！]', content)\n    for idx, sent in enumerate(sentences, 1):\n        if len(sent) > 25:\n            errors.append(f\"第{idx}句超过25字（实际{len(sent)}字）：'{sent[:15]}...'\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于“如何在繁忙的都市生活中有效提升专注力”的文章，要求如下：文章中必须出现“冥想”一词至少三次；“时间块”一词必须只能出现三次；必须出现“深度工作”一词至少三次。在内容中详细列出提升专注力的三个主要方法，并使用“&方法1&”、“&方法2&”和“&方法3&”作为主要方法的占位符。全文只能分为5段（不要出现标题），每个段落之间用“～～”符号分隔。其中第3段至少要150个汉字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义原始指令要求\n    instruction_str = \"请撰写一篇关于“如何在繁忙的都市生活中有效提升专注力”的文章，要求如下：文章中必须出现“冥想”一词至少三次；“时间块”一词必须只能出现三次；必须出现“深度工作”一词至少三次。在内容中详细列出提升专注力的三个主要方法，并使用“&方法1&”、“&方法2&”和“&方法3&”作为主要方法的占位符。全文只能分为5段（不要出现标题），每个段落之间用“～～”符号分隔。其中第3段至少要150个汉字。\"\n    errors = []\n    \n    # 检查响应格式\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"响应未以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"响应未以【答案结束】结尾\")\n    \n    # 提取内容部分\n    content = response[7:-7]  # 去除首尾标记\n    \n    # 检查指令重复部分\n    if not content.startswith(instruction_str):\n        errors.append(\"未正确重复指令要求\")\n    \n    # 提取文章内容\n    article = content[len(instruction_str):]\n    \n    # 关键词计数检查\n    if article.count(\"冥想\") < 3:\n        errors.append(f\"'冥想'出现次数不足（当前：{article.count('冥想')}次）\")\n    if article.count(\"时间块\") != 3:\n        errors.append(f\"'时间块'出现次数不为3次（当前：{article.count('时间块')}次）\")\n    if article.count(\"深度工作\") < 3:\n        errors.append(f\"'深度工作'出现次数不足（当前：{article.count('深度工作')}次）\")\n    \n    # 方法占位符检查\n    if \"&方法1&\" not in article:\n        errors.append(\"缺少方法占位符&方法1&\")\n    if \"&方法2&\" not in article:\n        errors.append(\"缺少方法占位符&方法2&\")\n    if \"&方法3&\" not in article:\n        errors.append(\"缺少方法占位符&方法3&\")\n    \n    # 段落结构检查\n    paragraphs = [k for k in article.split(\"～～\") if k.strip()]\n    if len(paragraphs) != 5:\n        errors.append(f\"段落数量错误（当前：{len(paragraphs)}段）\")\n    else:\n        # 第三段长度检查\n        third_para = paragraphs[2]\n        hanzi_count = len(re.findall(r'[一-龥]', third_para))\n        if hanzi_count < 150:\n            errors.append(f\"第三段汉字数量不足（当前：{hanzi_count}字）\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请写一篇关于城市地下交通网络的文章，文章只能有10个句子（用中文句号或问号或感叹号分隔），其中第7个句子必须以“通过精密的地质勘测”开头。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查标记是否完整\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少【答案开始】标记\")\n    if \"【答案结束】\" not in response:\n        errors.append(\"缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    if not errors:\n        start_index = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n        end_index = response.find(\"【答案结束】\")\n        content = response[start_index:end_index].strip()\n        \n        # 分割句子\n        sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n        \n        # 检查句子数量\n        if len(sentences) != 10:\n            errors.append(f\"句子数量为{len(sentences)}而不是10\")\n        \n        # 检查第7个句子开头\n        if len(sentences) >= 7:\n            if not sentences[6].startswith(\"通过精密的地质勘测\"):\n                errors.append(\"第7句不以指定内容开头\")\n        elif len(sentences) < 7:\n            errors.append(\"句子数量不足7句\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请描述一个繁忙的早晨场景。要求文章中“咖啡杯”一词至少出现3次，“闹钟”一词只出现2次，“地铁”一词至多出现1次。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    \n    # 提取标记间的内容\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or end_idx <= start_idx:\n        return {\"check_code\": False, \"reason\": \"未找到答案标记\"}\n    \n    content = response[start_idx + len(start_marker):end_idx].strip()\n    \n    # 统计关键词出现次数\n    coffee_count = len(re.findall(r'咖啡杯', content))\n    alarm_count = len(re.findall(r'闹钟', content))\n    subway_count = len(re.findall(r'地铁', content))\n    \n    # 验证条件\n    errors = []\n    if coffee_count < 3:\n        errors.append(f\"咖啡杯出现{coffee_count}次(需≥3次)\")\n    if alarm_count != 2:\n        errors.append(f\"闹钟出现{alarm_count}次(需2次)\")\n    if subway_count > 1:\n        errors.append(f\"地铁出现{subway_count}次(需≤1次)\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "请撰写一篇关于“传统节日与现代生活”的文章。请确保文章由5个段落组成（不要出现标题），每个段落之间用'～～'符号分隔。其中第3段的第14个汉字必须是“节”字。文章还需要恰好由12个句子（用中文句号或问号或感叹号分隔）组成，其中第8个句子的第5个汉字必须是“中”字。此外，文章中第6个句子至少包含36个汉字。文章中应包含两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 1. 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"回答缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"回答缺少结束标记【答案结束】\")\n    \n    # 提取实际回答内容\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    else:\n        # 如果标记错误，直接返回\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    \n    # 2. 检查六个@分隔符\n    if \"@@@@@@\" not in content:\n        err_infos.append(\"缺少六个@分隔符\")\n    else:\n        parts = content.split(\"@@@@@@\")\n        if len(parts) != 2:\n            err_infos.append(\"六个@分隔符应该将内容分成两个部分\")\n    \n    # 3. 段落分隔符检查\n    paragraphs = content.split('～～')\n    if len(paragraphs) != 5:\n        err_infos.append(f\"段落数量应为5个，实际为{len(paragraphs)}个\")\n    \n    # 4. 第3段第14个汉字检查\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2]\n        if len(third_para) < 14:\n            err_infos.append(\"第3段长度不足14个汉字\")\n        else:\n            if third_para[13] != '节':\n                err_infos.append(f\"第3段第14个汉字应为'节'，实际为'{third_para[13]}'\")\n    else:\n        err_infos.append(\"段落数量不足，无法检查第3段\")\n    \n    # 5. 句子分割和数量检查\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 12:\n        err_infos.append(f\"句子数量应为12个，实际为{len(sentences)}个\")\n    \n    # 6. 第8句第5个汉字检查\n    if len(sentences) >= 8:\n        eighth_sent = sentences[7]\n        if len(eighth_sent) < 5:\n            err_infos.append(\"第8句长度不足5个汉字\")\n        else:\n            if eighth_sent[4] != '中':\n                err_infos.append(f\"第8句第5个汉字应为'中'，实际为'{eighth_sent[4]}'\")\n    else:\n        err_infos.append(\"句子数量不足，无法检查第8句\")\n    \n    # 7. 第6句长度检查\n    if len(sentences) >= 6:\n        sixth_sent = sentences[5]\n        hanzi_count = sum(1 for char in sixth_sent if '\\u4e00' <= char <= '\\u9fff')\n        if hanzi_count < 36:\n            err_infos.append(f\"第6句至少需要36个汉字，实际为{hanzi_count}个\")\n    else:\n        err_infos.append(\"句子数量不足，无法检查第6句\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "请写一段关于如何在家庭环境中设计一个适合冥想练习的小空间的文字描述。文章内容必须出现“静谧”、“光线”和“植物”这三个关键词。文章内容不得少于120个汉字，但不得超过300个汉字。文章必须恰好由7个句子组成，每个句子之间用“^”符号分隔。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取实际内容\n    content = response[5:-5].strip()  # 去除标记\n    \n    # 检查关键词\n    keywords = [\"静谧\", \"光线\", \"植物\"]\n    missing = [kw for kw in keywords if kw not in content]\n    if missing:\n        err_infos.append(f\"缺少关键词：{','.join(missing)}\")\n    \n    # 检查汉字数量\n    chinese_chars = re.findall(r'[一-龥]', content)\n    char_count = len(chinese_chars)\n    if char_count < 120:\n        err_infos.append(f\"字数不足（{char_count}/120）\")\n    elif char_count > 300:\n        err_infos.append(f\"字数超限（{char_count}/300）\")\n    \n    # 检查句子数量和分隔符\n    sentences = [k for k in content.split('^') if k.strip()]\n    if len(sentences) != 7:\n        err_infos.append(f\"句子数量错误（{len(sentences)}/7）\")\n    \n    # 检查空句子\n    if any(len(s.strip()) == 0 for s in sentences):\n        err_infos.append(\"存在空句子\")\n    \n    # 检查多余分隔符\n    if content.startswith('^') or content.endswith('^'):\n        err_infos.append(\"首尾多余分隔符\")\n    if '^^' in content:\n        err_infos.append(\"连续分隔符\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }\n"}
{"prompt": "在古代中国，饮茶是一种深受人们喜爱的生活方式，不仅仅是为了消除疲劳、提神醒脑，更是社交和文化的一部分。茶叶的种类繁多，包括绿茶、红茶、乌龙茶、白茶、黄茶和黑茶，每一种茶都有其独特的制作工艺和品饮方式。中国的茶文化源远流长，茶道讲究“和、静、怡、真”，即和谐、宁静、愉悦和真实。茶艺不仅仅是泡茶的技巧，更是一种修身养性的文化活动。今天，茶文化已经传播到世界各地，成为全球文化交流的桥梁。\n\n请结合上面的背景信息，写一篇只出现34个句子（用中文句号或问号或感叹号分隔）的文章，主题为“现代社会中的茶文化”，文章必须以“在当今社会”这五个字开头，并且必须包含“传承”这个词。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有正确标记开始或结束。\"\n        }\n    content = response[6:-6].strip()\n     # 正则表达式模式：匹配中文句号、问号、感叹号中的任意一个\n    pattern = r'[。？！]'\n\n    # 使用正则表达式分割文本\n    raw_sentences = re.split(pattern, content)\n\n    # 过滤分割结果中的空字符串（处理文本开头/结尾有标点或连续标点的情况）\n    sentences = [sentence.strip() for sentence in raw_sentences if sentence.strip()]\n    \n    if len(sentences) != 34:\n        return {\n            \"check_code\": False,\n            \"reason\": \"句子数量不正确。\"\n        }\n    if not content.startswith('在当今社会'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章没有以'在当今社会'开头。\"\n        }\n    if '传承' not in content:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章中没有包含'传承'这个词。\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "在全球化的背景下，语言能力成为一种重要的技能。学习多种语言不仅能够帮助个人拓宽职业选择，还能够增强跨文化交流能力。语言学习有许多方法，包括传统课堂教学、自学、语言交换和沉浸式学习等。近年来，语言学习应用和在线资源的兴起，为学习者提供了新的途径，能够更高效地掌握外语技能。然而，不同的方法适合不同的学习者，因此选择适合自己的方式是至关重要的。  \n\n描述一种非传统的语言学习方法，并分析其可能的优点和缺点。文章中避免使用“数字化”、“应用程序”和“在线”这三个词语。请提供一个具体的例子来说明这种方法如何在实践中帮助学习者提高语言能力，并阐述为什么这种方法可能比传统课堂教学更具吸引力。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"起始标记缺失\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"结束标记缺失\")\n    \n    # 提取答案内容\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[6:-6].strip()  # 去除标记获取纯内容\n    \n    # 检查禁止词汇\n    forbidden_words = [\"数字化\", \"应用程序\", \"在线\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        errors.append(f\"包含禁止词汇: {', '.join(found_words)}\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "写一篇关于海洋污染对海洋生物影响的文章，但不允许出现“塑料”、“化学品”、“污染”这几个词。请在文章中详细解释并列出其中三种主要影响，使用“【影响1】”、“【影响2】”和“【影响3】”作为主要影响的占位符。请确保第四个句子（用中文句号或问号或感叹号分隔）以‘这是一个全球性的问题’结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 1. 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少开头标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结尾标记【答案结束】\")\n    \n    # 提取实际内容（如果标记错误则跳过后续检查）\n    content = \"\"\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    else:\n        return {\n            \"check_code\": False,\n            \"reason\": \";\".join(err_infos)\n        }\n    \n    # 2. 检查禁止词\n    forbidden_words = [\"塑料\", \"化学品\", \"污染\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        err_infos.append(f\"包含禁止词：{','.join(found_words)}\")\n    \n    # 3. 检查影响标记\n    required_tags = [\"【影响1】\", \"【影响2】\", \"【影响3】\"]\n    missing_tags = [tag for tag in required_tags if tag not in content]\n    if missing_tags:\n        err_infos.append(f\"缺少影响标记：{','.join(missing_tags)}\")\n    \n    # 4. 检查第四个句子\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]  # 清理空句子\n    \n    if len(sentences) < 4:\n        err_infos.append(\"句子数量不足4句\")\n    else:\n        fourth_sentence = sentences[3]\n        if not fourth_sentence.endswith('这是一个全球性的问题'):\n            err_infos.append(f\"第四句结尾错误，实际为：'{fourth_sentence[-10:]}...'\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“城市公共交通系统发展现状”的文章。请确保文章恰好由15个句子（用中文句号或问号或感叹号分隔）组成，其中第7个句子必须多于8个汉字。文章需分为4个段落（不要出现标题），每个段落之间用'～～'符号分隔。其中第3段不能超过100个汉字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 检查整体格式\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案未正确使用开始/结束标记\"}\n    \n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查答案分隔符\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        return {\"check_code\": False, \"reason\": f\"答案数量错误，应为2个，实际{len(answers)}个\"}\n    \n    all_errors = []\n    \n    for idx, ans in enumerate(answers):\n        ans = ans.strip()\n        errors = []\n        \n        # 检查段落分隔符\n        paragraphs = re.split(r'～～+', ans)\n        if len(paragraphs) != 4:\n            errors.append(f\"段落数量错误，应为4段，实际{len(paragraphs)}段\")\n        \n        # 检查第3段长度\n        if len(paragraphs) >= 3:\n            hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', paragraphs[2]))\n            if hanzi_count > 100:\n                errors.append(f\"第3段汉字数超过100(实际{hanzi_count})\")\n        \n        # 检查句子总数\n        sentences = [s.strip() for s in re.split(r'[。？！]', ans) if s.strip()]\n        if len(sentences) != 15:\n            errors.append(f\"句子数量错误，应为15句，实际{len(sentences)}句\")\n        else:\n            # 检查第7句长度\n            if len(sentences) >= 7:\n                hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', sentences[6]))\n                if hanzi_count <= 8:\n                    errors.append(f\"第7句汉字数不足8字(实际{hanzi_count})\")\n        \n        if errors:\n            all_errors.append(f\"答案{idx+1}错误: {'; '.join(errors)}\")\n    \n    if all_errors:\n        return {\"check_code\": False, \"reason\": \" | \".join(all_errors)}\n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在现代城市生活中，交通拥堵是一个普遍存在的问题，影响着人们的日常生活和工作效率。随着城市化进程的加快，车辆数量不断增加，导致道路交通压力增大。为了缓解这一问题，各国和城市开始探索各种解决方案，包括智能交通系统、公共交通优化和非机动车道的建设等。智能交通系统（ITS）是一种通过先进的信息和通信技术来提升交通管理和运输效率的系统。它包括交通信号控制、实时交通信息发布、车辆导航和智能停车等功能。公共交通优化则是通过提高公交车的运行效率、增加班次、改善候车环境等措施，鼓励更多人使用公共交通工具。非机动车道的建设是为了鼓励人们选择骑行和步行，以减少对机动车的依赖。这些措施不仅有助于缓解交通拥堵，还可以降低城市的碳排放，改善空气质量。\n\n请写一篇关于城市交通解决方案的文章，要求文章至少包含“智能交通系统”和“公共交通优化”这两个词。文章长度应在500字至800字之间。请注意，文章的第三个句子（用中文句号或问号或感叹号分隔）必须以“这是当前的重要挑战”结尾。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 验证整体格式\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"响应开头缺少'【答案开始】'标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"响应结尾缺少'【答案结束】'标记\")\n    \n    # 提取答案内容\n    if errors:\n        return {\"check_code\": False, \"reason\": \"\\n\".join(errors)}\n    \n    try:\n        content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")]\n    except Exception:\n        errors.append(\"无法提取答案内容\")\n        return {\"check_code\": False, \"reason\": \"\\n\".join(errors)}\n    \n    # 分割两个答案\n    answers = [a.strip() for a in content.split(\"******\", 1) if a.strip()]\n    if len(answers) != 2:\n        errors.append(f\"需要两个答案，但找到{len(answers)}个（应用******分隔）\")\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers, 1):\n        # 关键词检查\n        if \"智能交通系统\" not in ans:\n            errors.append(f\"答案{idx}缺少'智能交通系统'关键词\")\n        if \"公共交通优化\" not in ans:\n            errors.append(f\"答案{idx}缺少'公共交通优化'关键词\")\n        \n        # 字数检查\n        word_count = len(ans)\n        if word_count < 500 or word_count > 800:\n            errors.append(f\"答案{idx}字数不符合要求（当前:{word_count}字，要求:500-800字）\")\n        \n        # 第三句检查\n        sentences = [s.strip() for s in re.split(r'[。？！]', ans) if s.strip()]\n        if len(sentences) < 3:\n            errors.append(f\"答案{idx}少于三句话\")\n        else:\n            if not sentences[2].endswith(\"这是当前的重要挑战\"):\n                errors.append(f\"答案{idx}第三句不以'这是当前的重要挑战'结尾（实际:'{sentences[2][-10:]}...'）\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"\" if len(errors)==0 else \"；\".join(errors)\n    }"}
{"prompt": "请详细分析一种常见的日常物品，比如厨房中的菜刀，从设计、材料、历史演变以及现代技术应用的角度进行全面探讨。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    requirement = \"请详细分析一种常见的日常物品，比如厨房中的菜刀，从设计、材料、历史演变以及现代技术应用的角度进行全面探讨。\"\n    err_infos = []\n    \n    # 检查响应是否为空\n    if not response:\n        return {\"check_code\": False, \"reason\": \"响应为空\"}\n    \n    # 检查开头标记\n    start_marker = \"【答案开始】\"\n    if not response.startswith(start_marker):\n        err_infos.append(\"缺少开头标记或位置错误\")\n    \n    # 检查结尾标记\n    end_marker = \"【答案结束】\"\n    if end_marker not in response:\n        err_infos.append(\"缺少结尾标记\")\n    else:\n        # 提取标记间内容\n        content = response[len(start_marker):-len(end_marker)].strip()\n        \n        # 检查开头是否重复要求\n        if not content.startswith(requirement):\n            err_infos.append(\"未正确重复指令要求\")\n        \n        # 检查重复前是否有额外内容\n        if len(content) > len(requirement) and not content[len(requirement):].strip():\n            err_infos.append(\"重复要求后存在多余空白内容\")\n    \n    # 检查是否有多余解析\n    if \"解析：\" in response or \"分析：\" in response:\n        err_infos.append(\"包含多余解析内容\")\n    \n    # 返回验证结果\n    if not err_infos:\n        return {\"check_code\": True, \"reason\": \"\"}\n    else:\n        return {\"check_code\": False, \"reason\": \"; \".join(err_infos)}"}
{"prompt": "请撰写一篇关于城市公园在现代生活中的重要性的文章。文章应只出现四个段落，每个段落用两个换行符“\n\n”分隔开来，文中应避免出现“科技”“工业”这两个词。在第二个段落中，“自然”这个词务必至少出现两次，在第三个段落中应只出现四个句子（用中文句号或问号或感叹号分隔）。在文章中，详细解释并列出其中三种城市公园对居民的好处，使用“【好处1】”、“【好处2】”和“【好处3】”作为主要好处的占位符。最后，文章需以“因此，城市公园的维护和发展至关重要。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from typing import List\n\n    err_infos = []\n    # 检查开始和结束标记\n    if not response.startswith(\"【答案开始】\") or \"【答案结束】\" not in response:\n        err_infos.append(\"Missing start/end markers\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取实际回答内容\n    content = response.split(\"【答案开始】\")[1].split(\"【答案结束】\")[0].strip()\n    \n    # 检查段落分隔\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"Expected 4 paragraphs, found {len(paragraphs)}\")\n    \n    # 检查禁止词汇\n    forbidden_words = [\"科技\", \"工业\"]\n    for idx, para in enumerate(paragraphs):\n        for word in forbidden_words:\n            if word in para:\n                err_infos.append(f\"Paragraph {idx+1} contains forbidden word '{word}'\")\n    \n    # 检查第二段中\"自然\"出现次数\n    if len(paragraphs) >= 2:\n        count_natural = paragraphs[1].count(\"自然\")\n        if count_natural < 2:\n            err_infos.append(f\"Paragraph 2 needs '自然' at least twice, found {count_natural}\")\n    \n    # 检查第三段句子数量\n    if len(paragraphs) >= 3:\n        sentences = [s.strip() for s in re.split(r'[。？！]', paragraphs[2]) if s.strip()]\n        if len(sentences) != 4:\n            err_infos.append(f\"Paragraph 3 needs exactly 4 sentences, found {len(sentences)}\")\n    \n    # 检查好处占位符\n    benefit_placeholders = [\"【好处1】\", \"【好处2】\", \"【好处3】\"]\n    for placeholder in benefit_placeholders:\n        if placeholder not in content:\n            err_infos.append(f\"Missing benefit placeholder: {placeholder}\")\n    \n    # 检查结尾语句\n    if not paragraphs[-1].endswith(\"因此，城市公园的维护和发展至关重要。\"):\n        err_infos.append(\"Missing required ending sentence in last paragraph\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请撰写一篇关于宠物对心理健康影响的文章，文章应只出现5个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由四个句子（用中文句号或问号或感叹号分隔）组成，并且文章中必须包含“情感支持”这个词。同时请在文章中详细解释并列出其中三种主要影响，使用“【影响1】”、“【影响2】”和“【影响3】”作为主要影响的占位符。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    errors = []\n    \n    # Check markers\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    if not response.startswith(start_marker):\n        errors.append(\"Missing start marker 【答案开始】\")\n    if not response.endswith(end_marker):\n        errors.append(\"Missing end marker 【答案结束】\")\n    \n    # Extract content\n    content = response[len(start_marker):-len(end_marker)].strip() if response.startswith(start_marker) and response.endswith(end_marker) else \"\"\n    if not content:\n        errors.append(\"No content between markers\")\n    \n    # Split paragraphs\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 5:\n        errors.append(f\"Expected 5 paragraphs, found {len(paragraphs)}\")\n    \n    # Check third paragraph sentence count\n    if len(paragraphs) >= 3:\n        third_para = paragraphs[2]\n        sentences = [s.strip() for s in re.split(r'[。？！]', third_para) if s.strip()]\n        if len(sentences) != 4:\n            errors.append(f\"Third paragraph should have 4 sentences, found {len(sentences)}\")\n    \n    # Check for required keyword\n    if \"情感支持\" not in content:\n        errors.append(\"Keyword '情感支持' not found\")\n    \n    # Check for impact placeholders\n    required_placeholders = [\"【影响1】\", \"【影响2】\", \"【影响3】\"]\n    for placeholder in required_placeholders:\n        if placeholder not in content:\n            errors.append(f\"Placeholder '{placeholder}' not found\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "在现代社会，城市化进程日益加快，城市绿化成为一个备受关注的话题。城市绿化不仅有助于改善环境质量，还有助于提升居民的生活质量和幸福感。绿化带来的生态效益，如降低噪音、减少空气污染、调节气温等，都对人类健康和城市可持续发展起到重要作用。此外，绿化也能够促进生物多样性，为城市居民提供更多与自然亲密接触的机会。近年来，许多城市开始重视屋顶花园、垂直绿化和城市公园的建设，以增加城市的绿化覆盖率。然而，城市绿化也面临着一些挑战，如资金不足、土地资源紧缺、维护管理困难等。\n\n请撰写一篇关于“城市绿化挑战与解决方案”的文章。文章只能由6个段落组成（不要出现标题），每个段落之间用'～～'符号分隔。请注意，第4段必须至少包含150个汉字，详细描述一个城市绿化的成功案例，阐明其具体实施措施和取得的效果。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n\n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"答案缺少开始/结束标记\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查段落分隔符\n    segments = content.split('～～')\n    if len(segments) != 6:\n        err_infos.append(f\"段落数量错误，应为6段，实际{len(segments)}段\")\n    \n    # 检查第四段长度\n    if len(segments) >= 4:\n        chinese_chars = re.findall(r'[一-龥]', segments[3])\n        if len(chinese_chars) < 150:\n            err_infos.append(f\"第4段汉字不足150字，实际{len(chinese_chars)}字\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos\n    }"}
{"prompt": "请描绘一个繁忙的城市街头场景，要求在描述中“车流”、“行人”和“广告牌”这三个词语至少出现两次，并且每个句子（用中文句号或问号或感叹号分隔）至少15个汉字。文章最后一句话必须以“这就是现代城市的缩影。”结束。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    error_list = []\n    \n    # 检查标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        error_list.append(\"答案缺少开始或结束标记\")\n        return {\"check_code\": False, \"reason\": \"; \".join(error_list)}\n    \n    # 提取内容\n    try:\n        content = response.split(\"【答案开始】\", 1)[1].split(\"【答案结束】\", 1)[0].strip()\n        if not content:\n            error_list.append(\"答案内容为空\")\n            return {\"check_code\": False, \"reason\": \"; \".join(error_list)}\n    except Exception:\n        error_list.append(\"答案标记提取失败\")\n        return {\"check_code\": False, \"reason\": \"; \".join(error_list)}\n    \n    # 检查结束句\n    if not content.rstrip().endswith('这就是现代城市的缩影。'):\n        error_list.append(\"最后一句话不是指定的结束句\")\n    \n    # 检查关键词出现次数\n    keywords = [\"车流\", \"行人\", \"广告牌\"]\n    for word in keywords:\n        if content.count(word) < 2:\n            error_list.append(f\"词语'{word}'出现次数不足2次\")\n    \n    # 分割句子并检查长度\n    sentences = [s.strip() for s in re.split(r'[。？！]', content) if s.strip()]\n    for i, sent in enumerate(sentences, 1):\n        hanzi_count = len(re.findall(r'[\\u4e00-\\u9fa5]', sent))\n        if hanzi_count < 15:\n            error_list.append(f\"第{i}个句子只有{hanzi_count}个汉字，不足15个\")\n    \n    return {\n        \"check_code\": len(error_list) == 0,\n        \"reason\": \"; \".join(error_list) if error_list else \"\"\n    }"}
{"prompt": "请设计一个创意广告文案，主题是宣传环保的生活方式。请确保文章恰好由12个句子（用中文句号或问号或感叹号分隔）组成。其中第7个句子至多8个汉字。要求文章必须出现“绿色未来”、“行动从今天开始”两个词语。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    reason_list = []\n\n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        reason_list.append(\"缺少答案标记\")\n    response = response[len(\"【答案开始】\"):-len(\"【答案开始】\")].strip()\n    \n    # 定义要求重复的字符串\n    requirement_str = \"请设计一个创意广告文案，主题是宣传环保的生活方式。请确保文章恰好由12个句子（用中文句号或问号或感叹号分隔）组成。其中第7个句子至多8个汉字。要求文章必须出现“绿色未来”、“行动从今天开始”两个词语。\"\n    \n    # 检查是否准确重复要求\n    if not response.startswith(requirement_str):\n        reason_list.append(\"回答未一字不差重复要求\")\n        \n    # 提取答案内容\n    answer_content = response\n    \n    # 检查句子数量\n    sentences = [s.strip() for s in re.split(r'[。？！]', answer_content) if s.strip()]\n    if len(sentences) != 12:\n        reason_list.append(f\"句子数量不符（实际：{len(sentences)}，要求：12）\")\n    \n    # 检查第7句长度\n    if len(sentences) >= 7:\n        sentence_7 = sentences[6]\n        hanzi_count = len(re.findall(r'[一-龥]', sentence_7))\n        if hanzi_count > 8:\n            reason_list.append(f\"第7句超过8个汉字（实际：{hanzi_count}）\")\n    \n    # 检查关键词\n    if \"绿色未来\" not in answer_content:\n        reason_list.append(\"缺少关键词：绿色未来\")\n    if \"行动从今天开始\" not in answer_content:\n        reason_list.append(\"缺少关键词：行动从今天开始\")\n    \n    # 返回验证结果\n    if reason_list:\n        return {\"check_code\": False, \"reason\": \"; \".join(reason_list)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在现代城市生活中，公共交通系统成为了许多人日常通勤的首选。地铁作为高效便捷的交通工具，深受人们的青睐。为了让地铁系统更加人性化和智能化，许多城市开始引入先进的技术，如智能导航、实时车次信息、无障碍设计等。然而，每个城市的地铁系统都有其独特的设计和特点，这不仅反映了当地的文化，也体现了技术的差异性。假如你是一个城市规划师，需要为一个新兴城市设计地铁系统，你会如何结合科技和人性化设计来满足居民的需求。\n\n请撰写一篇关于“如何设计一个智能化且人性化的地铁系统”的文章。请确保文章恰好由11个句子（用中文句号或问号或感叹号分隔）组成。其中第5个句子的第3个汉字必须是“地”字。要求文章“便捷”一词至少出现3次，“安全”一词只出现2次，“科技”一次至多出现5次。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n\n    # 检查标记完整性\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        err_infos.append(\"缺少答案标记\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    start_idx = response.find(\"【答案开始】\") + len(\"【答案开始】\")\n    end_idx = response.find(\"【答案结束】\")\n    content = response[start_idx:end_idx].strip()\n    \n    # 验证句子数量\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 11:\n        err_infos.append(f\"句子数量错误: {len(sentences)}句\")\n    \n    # 验证第5句第3字\n    if len(sentences) >= 5:\n        if len(sentences[4]) < 3:\n            err_infos.append(\"第5句长度不足3字\")\n        elif sentences[4][2] != \"地\":\n            err_infos.append(f\"第5句第3字错误: '{sentences[4][2]}'\")\n    \n    # 验证关键词频率\n    word_counts = {\n        \"便捷\": len(re.findall(r\"便捷\", content)),\n        \"安全\": len(re.findall(r\"安全\", content)),\n        \"科技\": len(re.findall(r\"科技\", content))\n    }\n    if word_counts[\"便捷\"] < 3:\n        err_infos.append(f\"便捷出现{word_counts['便捷']}次\")\n    if word_counts[\"安全\"] != 2:\n        err_infos.append(f\"安全出现{word_counts['安全']}次\")\n    if word_counts[\"科技\"] > 5:\n        err_infos.append(f\"科技出现{word_counts['科技']}次\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于在城市中体验新开的餐厅的文章。文章应包只出现6个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第二个段落中，“菜品”这个词必须出现至少4次。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    req = \"请写一篇关于在城市中体验新开的餐厅的文章。文章应包含6个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。在第二个段落中，“菜品”这个词必须出现至少4次。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\"\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有以'【答案开始】'开始或以'【答案结束】'结束。\"\n        }\n    content = response[6:-6].strip()\n    if not content.startswith(req):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有重复指令\"\n        }\n    content = content[len(req):]\n    parts = content.split('******')\n    parts = [k for k in parts if k]\n    if len(parts) != 2:\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有包含两个答案或没有用六个星号分隔。\"\n        }\n    for part in parts:\n        paragraphs = part.strip().split('\\n\\n')\n        paragraphs = [k for k in paragraphs if k]\n        if len(paragraphs) != 6:\n            return {\n                \"check_code\": False,\n                \"reason\": \"每个答案没有包含6个段落。\"\n            }\n        if paragraphs[1].count('菜品') < 4:\n            return {\n                \"check_code\": False,\n                \"reason\": \"第二段中'菜品'一词出现次数少于4次。\"\n            }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "请描述一个日常生活中的市场场景，要求在描述中避免使用“繁忙”、“吵闹”和“拥挤”这几个词语。要求在描述中至少出现三次“摊位”，必须出现两次“买家”，最多出现两次“小贩”。在回复中详细解释并列出其中三种主要特点，使用“【特点1】”、“【特点2】”和“【特点3】”作为主要特点的占位符。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。请确保每个句子至少12个字，最多18个字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    content = response[len(start_marker):-len(end_marker)].strip()\n    \n    # 检查答案分隔符\n    if \"******\" not in content:\n        err_infos.append(\"缺少答案分隔符******\")\n    else:\n        answers = content.split(\"******\")\n        if len(answers) != 2:\n            err_infos.append(\"答案数量不是两个\")\n        else:\n            for idx, ans in enumerate(answers, 1):\n                ans = ans.strip()\n                if not ans:\n                    err_infos.append(f\"答案{idx}为空\")\n                    continue\n                \n                # 检查禁用词\n                forbidden_words = [\"繁忙\", \"吵闹\", \"拥挤\"]\n                for word in forbidden_words:\n                    if word in ans:\n                        err_infos.append(f\"答案{idx}包含禁用词'{word}'\")\n                \n                # 检查关键词次数\n                tanwei_count = ans.count(\"摊位\")\n                if tanwei_count < 3:\n                    err_infos.append(f\"答案{idx}'摊位'出现{tanwei_count}次，不足3次\")\n                \n                maijia_count = ans.count(\"买家\")\n                if maijia_count != 2:\n                    err_infos.append(f\"答案{idx}'买家'出现{maijia_count}次，不是2次\")\n                \n                xiaofan_count = ans.count(\"小贩\")\n                if xiaofan_count > 2:\n                    err_infos.append(f\"答案{idx}'小贩'出现{xiaofan_count}次，超过2次\")\n                \n                # 检查特点标记\n                for marker in [\"【特点1】\", \"【特点2】\", \"【特点3】\"]:\n                    if marker not in ans:\n                        err_infos.append(f\"答案{idx}缺少标记{marker}\")\n                \n                # 检查句子长度\n                sentences = re.split(r'[。？！]', ans)\n                sentences = [s.strip() for s in sentences if s.strip()]\n                for i, s in enumerate(sentences):\n                    # 排除特点标记独立行的情况\n                    if s in [\"【特点1】\", \"【特点2】\", \"【特点3】\"]:\n                        continue\n                    length = len(s)\n                    if length < 12 or length > 18:\n                        err_infos.append(f\"答案{idx}第{i+1}句'{s}'长度{length}不符要求\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请描述一个没有使用“互联网”、“智能”、“自动化”这几个词的未来图书馆，同时确保你的描述由10个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    # 初始化错误信息列表\n    err_infos = []\n    \n    # 1. 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"开头缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"结尾缺少【答案结束】标记\")\n    \n    # 如果有标记错误直接返回\n    if err_infos:\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 2. 提取回答内容\n    content = response[5:-5]  # 移除【答案开始/结束】标记\n    content = content.strip()\n    \n    # 3. 检查禁止词\n    forbidden_words = [\"互联网\", \"智能\", \"自动化\"]\n    found_words = []\n    for word in forbidden_words:\n        if word in content:\n            found_words.append(word)\n    if found_words:\n        err_infos.append(f\"包含禁止词: {', '.join(found_words)}\")\n    \n    # 4. 检查句子数量\n    sentences = re.split(r'[。？！]', content)\n    # 过滤空字符串（最后一个标点后的空字符串）\n    sentences = [s.strip() for s in sentences if s.strip()]\n    if len(sentences) != 10:\n        err_infos.append(f\"句子数量为{len(sentences)}而非10个\")\n    \n    # 5. 检查标点完整性\n    last_char = content[-1] if content else ''\n    if last_char not in ['。', '？', '！']:\n        err_infos.append(\"最后一句未以句号/问号/感叹号结尾\")\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": err_infos}\n    return {\"check_code\": True, \"reason\": []}"}
{"prompt": "在过去几十年里，智能家居技术取得了显著的进步。智能家居设备包括从智能灯泡、智能恒温器到智能门锁和家用机器人等各种产品。这些设备通过互联网和无线网络相互连接，使家庭生活更加便利、安全和节能。虽然智能家居技术已经取得了长足的进步，但仍然面临一些挑战，例如隐私和安全问题、设备兼容性以及高成本等。\n\n智能家居技术的未来发展方向可能包括更先进的人工智能和机器学习算法，以实现更高的自动化和个性化服务。此外，随着物联网（IoT）技术的不断进步，更多的家用电器和设备将能够互联互通，进一步提升智能家居的整体体验。\n\n请写一篇包含10个句子（用中文句号或问号或感叹号分隔）的文章，主题为智能家居技术在未来五年内可能的发展趋势。文章应包括以下内容：1. 未来五年内智能家居技术的主要发展方向；2. 可能面临的挑战和解决方案；3. 新技术对日常生活的潜在影响。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    if not response.startswith('【答案开始】') or not response.endswith('【答案结束】'):\n        return {\n            \"check_code\": False,\n            \"reason\": \"回答没有正确的开始或结束标记。\"\n        }\n    content = response[6:-6].strip()\n\n    # 正则表达式模式：匹配中文句号、问号、感叹号中的任意一个\n    pattern = r'[。？！]'\n\n    # 使用正则表达式分割文本\n    raw_sentences = re.split(pattern, content)\n\n    # 过滤分割结果中的空字符串（处理文本开头/结尾有标点或连续标点的情况）\n    sentences = [sentence.strip() for sentence in raw_sentences if sentence.strip()]\n    \n    if len(sentences) != 10:\n        return {\n            \"check_code\": False,\n            \"reason\": \"文章不包含10个句子。\"\n        }\n    if not all(sentence.endswith(('。', '？', '！')) for sentence in sentences):\n        return {\n            \"check_code\": False,\n            \"reason\": \"句子没有正确的标点符号结束。\"\n        }\n    return {\n        \"check_code\": True,\n        \"reason\": \"\"\n    }"}
{"prompt": "古代的军事战术中，步兵和骑兵的协作是战争胜败的重要因素。在冷兵器时代，骑兵通常以速度和冲击力见长，而步兵则以阵型和耐久性著称。不同的国家和文化基于地形、资源和敌人策略，发展出了独特的步兵与骑兵联合战术。例如，中国古代的“车骑配合”战术强调战车、骑兵与步兵的联动，而欧洲中世纪则更注重骑士与长矛兵的配合。今天的军事研究者经常回顾这些古代战术，以汲取智慧并应用到现代军事模拟中。\n\n请撰写一篇关于古代步兵与骑兵联合战术的文章，文章只能有4个段落（不要出现标题），每个段落之间用“～～”符号分隔。在第2段中，“战术”这个词必须恰好出现2次，“地形”这个词必须至少出现1次。在整篇文章中，避免使用“王朝”和“帝国”这两个词语。此外，文章中的第3个句子（用中文句号或问号或感叹号分隔）必须以“这是至关重要的。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 初始化错误信息\n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少答案开始标记\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少答案结束标记\")\n    \n    # 提取答案内容\n    content = re.search(r\"【答案开始】(.*?)【答案结束】\", response, re.DOTALL)\n    if not content:\n        err_infos.append(\"无法提取答案内容\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    content = response[len(\"【答案开始】\"):-len(\"【答案开始】\")].strip()\n    \n    # 检查段落分隔符\n    paragraphs = [p.strip() for p in content.split(\"～～\")]\n    if len(paragraphs) != 4:\n        err_infos.append(f\"段落数量错误: {len(paragraphs)}段\")\n    \n    # 检查第二段关键词\n    if len(paragraphs) >= 2:\n        second_para = paragraphs[1]\n        tactic_count = second_para.count(\"战术\")\n        terrain_count = second_para.count(\"地形\")\n        \n        if tactic_count != 2:\n            err_infos.append(f\"第2段'战术'出现次数错误: {tactic_count}次\")\n        if terrain_count < 1:\n            err_infos.append(f\"第2段'地形'出现次数不足: {terrain_count}次\")\n    \n    # 检查禁用词\n    forbidden_words = [\"王朝\", \"帝国\"]\n    for word in forbidden_words:\n        if word in content:\n            err_infos.append(f\"包含禁用词: '{word}'\")\n    \n    # 检查第三句结尾\n    sentences = re.split(r'[。？！]', content)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    if len(sentences) >= 3:\n        if not sentences[2].endswith(\"这是至关重要的\"):\n            err_infos.append(\"第3句结尾错误\")\n    else:\n        err_infos.append(\"句子数量不足3句\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }\n"}
{"prompt": "在全球范围内，垃圾分类和处理已经成为一个紧迫的环境问题。随着城市化和消费水平的提高，垃圾的产生量逐年增加，给环境带来了巨大的压力。然而，不同地区的垃圾分类政策和方法存在很大差异，有些国家的垃圾处理体系相对完善，而另一些国家则仍在摸索阶段。例如，日本的垃圾分类制度非常严格，居民需要按规定将垃圾分为可燃垃圾、不可燃垃圾和可回收垃圾等多类，每类垃圾都有固定的回收时间和处理方式。而在一些发展中国家，垃圾分类的意识和设施还相对薄弱，导致垃圾处理不当，污染问题严重。\n\n请撰写一篇关于如何改进你所在城市垃圾分类和处理体系的文章，文章应详细讨论以下几个方面：\n\n1. 提出改进垃圾分类和处理体系的三大具体措施，并使用“【措施1】”、“【措施2】”和“【措施3】”作为主要措施的占位符。\n2. 在文章中必须至少出现4次“环保”，并且必须只出现7次“垃圾处理”，但“回收”最多出现3次。\n3. 文章包含20个句子（用中文句号或问号或感叹号分隔）,只包含四个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由六个句子（用中文句号或问号或感叹号分隔）组成。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 验证标记完整性\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        return {\"check_code\": False, \"reason\": \"答案缺少开始/结束标记\"}\n    \n    # 提取答案主体内容\n    answer_body = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 提取文章内容\n    article = answer_body.strip()\n    \n    # 验证措施标记\n    if \"【措施1】\" not in article or \"【措施2】\" not in article or \"【措施3】\" not in article:\n        return {\"check_code\": False, \"reason\": \"缺少措施标记\"}\n    \n    # 验证关键词出现次数\n    eco_count = article.count(\"环保\")\n    waste_handling_count = article.count(\"垃圾处理\")\n    recycle_count = article.count(\"回收\")\n    \n    if eco_count < 4:\n        return {\"check_code\": False, \"reason\": f\"'环保'出现次数应≥4，实际{eco_count}次\"}\n    if waste_handling_count != 7:\n        return {\"check_code\": False, \"reason\": f\"'垃圾处理'出现次数应=7，实际{waste_handling_count}次\"}\n    if recycle_count > 3:\n        return {\"check_code\": False, \"reason\": f\"'回收'出现次数应≤3，实际{recycle_count}次\"}\n    \n    # 验证段落数量\n    paragraphs = [p.strip() for p in article.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 4:\n        return {\"check_code\": False, \"reason\": f\"段落数量应为4，实际为{len(paragraphs)}\"}\n    \n    # 验证第三段句子数量\n    if len(paragraphs) < 3:\n        return {\"check_code\": False, \"reason\": \"缺少第三段落\"}\n    \n    sentences_para3 = [s.strip() for s in re.split(r'[。？！]', paragraphs[2]) if s.strip()]\n    if len(sentences_para3) != 6:\n        return {\"check_code\": False, \"reason\": f\"第三段应为6个句子，实际为{len(sentences_para3)}个\"}\n    \n    # 验证全文句子数量\n    all_sentences = [s.strip() for s in re.split(r'[。？！]', article) if s.strip()]\n    if len(all_sentences) != 20:\n        return {\"check_code\": False, \"reason\": f\"文章应包含20个句子，实际包含{len(all_sentences)}个句子\"}\n    \n    return {\"check_code\": True, \"reason\": \"所有验证通过\"}"}
{"prompt": "请撰写一篇关于古代航海技术发展的文章，内容需包含“星象”和“航海图”两个词。请在文章中详细解释并列出航海技术发展的三个主要里程碑，使用“&里程碑1&”、“&里程碑2&”和“&里程碑3&”作为里程碑的占位符。请确保文章标题用$()$标记，如$(xxx)$。内容不能出现中文逗号。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起止标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\")\n    answers = [a.strip() for a in content.split(\"@@@@@@\") if a.strip()]\n    \n    # 检查答案数量\n    if len(answers) != 2:\n        err_infos.append(f\"需要2个答案，实际{len(answers)}个\")\n    \n    # 验证每个答案\n    for i, ans in enumerate(answers):\n        # 检查标题格式\n        title_match = re.search(r'\\$\\(([^$]+)\\)\\$', ans)\n        if not title_match:\n            err_infos.append(f\"答案{i+1}缺少$()$标记的标题\")\n        elif not title_match.group(1).strip():\n            err_infos.append(f\"答案{i+1}标题内容为空\")\n        \n        # 检查关键词\n        if \"星象\" not in ans:\n            err_infos.append(f\"答案{i+1}缺少'星象'\")\n        if \"航海图\" not in ans:\n            err_infos.append(f\"答案{i+1}缺少'航海图'\")\n        \n        # 检查里程碑占位符\n        milestones = [\"&里程碑1&\", \"&里程碑2&\", \"&里程碑3&\"]\n        for m in milestones:\n            if m not in ans:\n                err_infos.append(f\"答案{i+1}缺少里程碑占位符{m}\")\n        \n        # 检查中文逗号\n        if \"，\" in ans:\n            err_infos.append(f\"答案{i+1}包含中文逗号\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": \"; \".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请撰写一篇关于“城市夜市文化”的文章，请确保文章只出现6个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。要求文章最后一句话以“因此，它们成为了城市生活中不可或缺的一部分。”结尾。请在文章中避免使用“商业”、“繁荣”、“发展”这几个词。文章的每个句子（用中文句号或问号或感叹号分隔）至少18个字，最多23个字。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    check_code = True\n    \n    # 定义错误信息集合\n    err_infos = []\n    \n    # 检查响应是否包含答案开始和结束标记\n    start_marker = \"【答案开始】\"\n    end_marker = \"【答案结束】\"\n    start_idx = response.find(start_marker)\n    end_idx = response.find(end_marker)\n    \n    if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n        check_code = False\n        err_infos.append(\"Missing or invalid answer markers\")\n        return {\"check_code\": False, \"reason\": \";\".join(err_infos)}\n    \n    # 提取答案内容\n    content = response[start_idx + len(start_marker):end_idx].strip()\n\n    begin = \"请撰写一篇关于“城市夜市文化”的文章，请确保文章只出现6个段落（不要出现标题），每个段落用两个换行符“\\n\\n”分隔开来。要求文章最后一句话以“因此，它们成为了城市生活中不可或缺的一部分。”结尾。请在文章中避免使用“商业”、“繁荣”、“发展”这几个词。文章的每个句子（用中文句号或问号或感叹号分隔）至少18个字，最多23个字。\"\n    if not content.startswith(begin):\n        check_code = False\n        err_infos.append(\"指令重复问题\")\n    answer_content = content.replace(begin, \"\").strip()\n    \n    # 验证段落数量\n    paragraphs = [p.strip() for p in answer_content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 6:\n        check_code = False\n        err_infos.append(f\"段落数量错误：应为6段，实际{len(paragraphs)}段\")\n    \n    # 验证结尾句子\n    if not answer_content.endswith(\"因此，它们成为了城市生活中不可或缺的一部分。\"):\n        check_code = False\n        err_infos.append(\"结尾句不符合要求\")\n    \n    # 验证禁用词\n    forbidden_words = [\"商业\", \"繁荣\", \"发展\"]\n    for word in forbidden_words:\n        if word in answer_content:\n            check_code = False\n            err_infos.append(f\"包含禁用词：'{word}'\")\n            break\n    \n    # 验证句子长度\n    sentences = re.split(r'[。？！]', answer_content)\n    sentences = [s.strip() for s in sentences if s.strip() and len(s) > 1]\n    \n    for i, sent in enumerate(sentences):\n        # 清理非中文字符（保留汉字和中文标点）\n        cleaned_sent = re.sub(r'[^一-龥，、；：“”‘’（）【】]', '', sent)\n        char_count = len(cleaned_sent)\n        \n        if char_count < 18 or char_count > 23:\n            check_code = False\n            err_infos.append(f\"第{i+1}句长度不符：{char_count}字（内容：{sent[:10]}...）\")\n    \n    return {\n        \"check_code\": check_code,\n        \"reason\": \";\".join(err_infos) if err_infos else \"\"\n    }"}
{"prompt": "请写一篇关于城市公共交通系统创新的文章，要求文章的每个句子（用中文句号或问号或感叹号分隔）至少25个字，并且第三个句子以“这对环境有利”结尾。请在回复中详细解释并列出其中三种主要创新，使用“【创新1】”、“【创新2】”和“【创新3】”作为主要创新的占位符。首先一字不差的重复上面的要求，然后直接给出答案。在重复要求之前，请不要提供额外信息。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义原始指令要求字符串\n    instruction_str = \"请写一篇关于城市公共交通系统创新的文章，要求文章的每个句子（用中文句号或问号或感叹号分隔）至少25个字，并且第三个句子以“这对环境有利”结尾。请在回复中详细解释并列出其中三种主要创新，使用“【创新1】”、“【创新2】”和“【创新3】”作为主要创新的占位符\"\n    \n    # 检查答案标记\n    if \"【答案开始】\" not in response or \"【答案结束】\" not in response:\n        return {\"check_code\": False, \"reason\": \"答案未用【答案开始】和【答案结束】标记\"}\n    \n    # 提取答案内容\n    start_idx = response.index(\"【答案开始】\") + 6\n    end_idx = response.index(\"【答案结束】\")\n    answer_content = response[start_idx:end_idx].strip()\n    \n    # 检查指令重复部分\n    if not answer_content.startswith(instruction_str):\n        return {\"check_code\": False, \"reason\": \"未一字不差重复指令要求\"}\n    \n    # 提取文章部分（指令重复后的内容）\n    article_start = len(instruction_str)\n    article_part = answer_content[article_start:].strip()\n    \n    # 分句处理\n    sentences = re.findall(r'.*?[。？！]', article_part)\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    # 检查句子数量\n    if len(sentences) < 3:\n        return {\"check_code\": False, \"reason\": \"文章句子数量不足\"}\n    \n    # 检查每个句子的字数\n    for i, s in enumerate(sentences):\n        clean_s = re.sub(r'\\s', '', s)  # 去除所有空白字符\n        if len(clean_s) < 25:\n            return {\"check_code\": False, \"reason\": f\"第{i+1}句字数不足25字\"}\n    \n    # 检查第三个句子结尾\n    third_sentence = re.sub(r'\\s', '', sentences[2])\n    if not third_sentence.endswith(\"这对环境有利\"):\n        return {\"check_code\": False, \"reason\": \"第三句未以'这对环境有利'结尾\"}\n    \n    # 检查创新占位符\n    if not (\"【创新1】\" in article_part and \"【创新2】\" in article_part and \"【创新3】\" in article_part):\n        return {\"check_code\": False, \"reason\": \"未包含全部创新占位符\"}\n    \n    return {\"check_code\": True, \"reason\": \"\"}"}
{"prompt": "在古代，织布是一项非常重要的手艺，直接影响了人们的衣物供应。织布机的发明和使用改变了人类生产效率，从手工纺织到机械化织布，织布技术历经了多个阶段的发展。现代织布技术结合了电子控制和自动化设备，极大地提升了生产速度和布料质量。然而，传统手工织布仍然在一些地区保留了重要的文化意义，展示了丰富的艺术性和独特的历史价值。随着科学技术的发展，智能织布机逐渐成为市场上的一种趋势，它不仅能够自动调整织布图案，还能根据布料材质优化织造过程。请基于此背景，结合现实生活中对布料的需求和技术创新的可能性，完成以下任务。\n\n请撰写一篇关于“智能织布机的创新与应用”的文章，请确保文章只出现4个段落（不要出现标题），每个段落之间用“～～”符号分隔。内容不能出现中文逗号。文章必须以“随着科技的发展”这几个字开头，并对智能织布机的优势、潜在问题和未来前景进行详细讨论。回答内容必须至少500个汉字，但不超过800个汉字。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查开始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"Missing start tag\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"Missing end tag\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    if \"@@@@@@\" not in content:\n        err_infos.append(\"Missing answer separator\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 分割两个答案\n    answers = content.split(\"@@@@@@\")\n    if len(answers) != 2:\n        err_infos.append(f\"Expected 2 answers, found {len(answers)}\")\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 验证每个答案\n    for idx, ans in enumerate(answers):\n        ans = ans.strip()\n        \n        # 检查开头\n        if not ans.startswith(\"随着科技的发展\"):\n            err_infos.append(f\"Answer {idx+1} missing required opening phrase\")\n        \n        # 检查段落分隔符\n        paragraphs = ans.split(\"～～\")\n        if len(paragraphs) != 4:\n            err_infos.append(f\"Answer {idx+1} has {len(paragraphs)} paragraphs (expected 4)\")\n        \n        # 检查中文逗号\n        if \"，\" in ans:\n            err_infos.append(f\"Answer {idx+1} contains Chinese commas\")\n        \n        # 检查字数\n        chinese_chars = re.findall(r'[\\u4e00-\\u9fff]', ans)\n        char_count = len(chinese_chars)\n        if char_count < 500 or char_count > 800:\n            err_infos.append(f\"Answer {idx+1} has {char_count} Chinese characters (500-800 required)\")\n    \n    return {\n        \"check_code\": len(err_infos) == 0,\n        \"reason\": err_infos if err_infos else \"All validations passed\"\n    }"}
{"prompt": "近年来，随着科技的快速发展，智能家居设备逐渐普及。智能家居设备通过网络连接和自动化技术，将普通家庭变成一个高效、便利的生活环境。这些设备包括智能灯泡、智能温控器、智能音箱等，它们能够通过语音指令或手机应用来进行控制。智能家居的优点在于可以节省能源、提高生活质量、增强安全性等。然而，智能家居设备的使用也带来了许多挑战和潜在问题，比如隐私泄露、技术维护问题以及设备兼容性等。\n\n请分析智能家居设备在现代生活中的优缺点。在你的分析中，使用以下占位符来标记三种主要优点和缺点：“&优点1&”、“&优点2&”、“&优点3&”以及“&缺点1&”、“&缺点2&”、“&缺点3&”。请确保内容由恰好11个句子（用中文句号或问号或感叹号分隔）组成。模型回复两个答案，并且答案之间用六个@符号（@@@@@@）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"缺少【答案开始】标记\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"缺少【答案结束】标记\")\n    \n    # 提取答案内容\n    content = response.replace(\"【答案开始】\", \"\").replace(\"【答案结束】\", \"\").strip()\n    \n    # 检查答案分隔符\n    parts = [p.strip() for p in content.split(\"@@@@@@\") if p.strip()]\n    if len(parts) != 2:\n        errors.append(f\"答案数量错误: 预期2个，实际{len(parts)}个\")\n    \n    # 验证每个答案\n    for i, part in enumerate(parts, 1):\n        # 检查句子数量\n        sentences = [s.strip() for s in re.split(r'[。？！]', part) if s.strip()]\n        if len(sentences) != 11:\n            errors.append(f\"答案{i}句子数量错误: 预期11句，实际{len(sentences)}句\")\n        \n        # 检查占位符\n        placeholders = [\"&优点1&\", \"&优点2&\", \"&优点3&\", \"&缺点1&\", \"&缺点2&\", \"&缺点3&\"]\n        for ph in placeholders:\n            if ph not in part:\n                errors.append(f\"答案{i}缺少占位符: {ph}\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \"; \".join(errors) if errors else \"\"\n    }"}
{"prompt": "在全球变暖和环境污染日益严重的今天，绿色建筑逐渐成为建筑行业的热门话题。绿色建筑不仅指在建筑过程中减少资源消耗和环境影响，还包括通过使用可再生材料、提高能源效率和优化室内空气质量来改善建筑物的整体可持续性。许多国家和地区已经开始制定绿色建筑标准，以鼓励建筑行业采用更加环保的设计和施工方法。绿色建筑的设计不仅限于外观，还涉及建筑物的整个生命周期，包括选址、设计、施工、运营和维护。通过整合智能技术，如智能传感器和自动化控制系统，绿色建筑能够实现更高效的能源利用，减少碳排放，并为居住者提供更健康的生活环境。\n请撰写一篇关于“绿色建筑在未来城市中的重要性”的文章，请确保文章只出现5个段落，每个段落用两个换行符“\n\n”分隔开来。文章的每个句子（用中文句号或问号或感叹号分隔）至少15个字。请确保第三个句子（用中文句号或问号或感叹号分隔）以“这具有重要意义”结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"Missing starting tag 【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"Missing ending tag 【答案结束】\")\n    \n    # 如果标记缺失则直接返回\n    if err_infos:\n        return {\"check_code\": False, \"reason\": err_infos}\n    \n    # 提取答案内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查段落数量\n    paragraphs = content.split('\\n\\n')\n    if len(paragraphs) != 5:\n        err_infos.append(f\"Require 5 paragraphs but found {len(paragraphs)}\")\n    \n    # 收集所有句子并验证长度\n    all_sentences = []\n    for p_idx, para in enumerate(paragraphs):\n        # 用中文标点分割句子\n        sentences = re.split(r'([。？！])', para)\n        # 重组句子（保留标点）\n        sentences = [''.join(sentences[i:i+2]).strip() for i in range(0, len(sentences)-1, 2)]\n        \n        for s_idx, sent in enumerate(sentences):\n            # 跳过空句子\n            if not sent:\n                continue\n            all_sentences.append(sent)\n            # 验证句子长度（至少15个字符）\n            if len(sent.replace(' ', '')) < 15:  # 去除空格后计算长度\n                err_infos.append(f\"Paragraph {p_idx+1}, sentence {s_idx+1} too short: '{sent}'\")\n    \n    # 检查第三个句子\n    if len(all_sentences) < 3:\n        err_infos.append(f\"Total sentences less than 3, found {len(all_sentences)}\")\n    else:\n        third_sent = all_sentences[2]\n        if not re.search(r'这具有重要意义[。？！]$', third_sent):\n            err_infos.append(f\"Third sentence must end with '这具有重要意义', got: '{third_sent}'\")\n    \n    return {\"check_code\": len(err_infos) == 0, \"reason\": err_infos}"}
{"prompt": "近年来，全球范围内对食品浪费问题的关注不断增加。据联合国粮农组织统计，每年约三分之一的食物被浪费或损失，这不仅对经济产生影响，还对环境造成了巨大压力。现代家庭在食品采购和储存方面存在许多问题，如过量购买、储存不当导致食物变质等。食品浪费不仅加剧了资源消耗，还增加了温室气体排放。解决食品浪费问题需要从个人生活习惯入手，包括制定合理的采购计划、学习储存技巧以及充分利用食物剩余部分。\n\n请撰写一篇关于“减少家庭食品浪费的实践方法”的文章，文章需提供具体建议和可操作的步骤。请确保文章只出现4个段落（不要出现标题），每个段落之间用“～～”符号分隔。在文章中避免出现“环保”、“资源”和“全球”这三个词，但必须出现“冰箱”、“菜谱”和“规划”这三个词，并且每个词必须至少使用3次。文章必须恰好由12个句子组成（用中文句号或问号或感叹号分隔），并且第8个句子的第5个汉字必须是“用”字。文章必须以“通过这些方法，我们可以更有效地减少家庭食品浪费。”这句话结尾。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    from collections import Counter\n    \n    # 初始化验证结果\n    check_code = True\n    err_infos = []\n    \n    # 检查答案标记\n    if not response.startswith(\"【答案开始】\") or not response.endswith(\"【答案结束】\"):\n        check_code = False\n        err_infos.append(\"回答未使用指定标记\")\n        return {\"check_code\": check_code, \"reason\": err_infos}\n    \n    # 提取实际内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 1. 段落结构验证\n    paragraphs = [k for k in content.split(\"～～\") if k.strip()]\n    if len(paragraphs) != 4:\n        check_code = False\n        err_infos.append(f\"段落数量错误：需要4段，实际{len(paragraphs)}段\")\n    \n    # 2. 禁止词检查\n    forbidden_words = [\"环保\", \"资源\", \"全球\"]\n    for word in forbidden_words:\n        if word in content:\n            check_code = False\n            err_infos.append(f\"包含禁止词：'{word}'\")\n    \n    # 3. 必须词检查\n    required_words = [\"冰箱\", \"菜谱\", \"规划\"]\n    word_counts = Counter(re.findall(r'冰箱|菜谱|规划', content))\n    for word in required_words:\n        count = word_counts.get(word, 0)\n        if count < 3:\n            check_code = False\n            err_infos.append(f\"必须词'{word}'次数不足：需要≥3次，实际{count}次\")\n    \n    # 4. 句子数量验证\n    sentences = re.findall(r'.*?[。？！]', content)\n    if len(sentences) != 12:\n        check_code = False\n        err_infos.append(f\"句子数量错误：需要12句，实际{len(sentences)}句\")\n    \n    # 5. 第8句第5字验证\n    if len(sentences) >= 8:\n        eighth_sentence = sentences[7].replace('\\n', '').replace(' ', '')\n        if len(eighth_sentence) < 5 or eighth_sentence[4] != \"用\":\n            check_code = False\n            err_infos.append(f\"第8句第5字错误：需要'用'字，实际'{eighth_sentence[4] if len(eighth_sentence) >=5 else '句子过短'}'\")\n    \n    # 6. 结尾句验证\n    if not sentences or sentences[-1] != \"通过这些方法，我们可以更有效地减少家庭食品浪费。\":\n        check_code = False\n        err_infos.append(\"结尾句不符合要求\")\n    \n    return {\"check_code\": check_code, \"reason\": \"; \".join(err_infos) if err_infos else \"\"}"}
{"prompt": "在现代社会中，饮食文化已经成为一个重要的研究领域。饮食不仅仅是满足基本生理需求的手段，更是文化交流、社会互动的重要载体。随着全球化的加速，世界各地的饮食文化正在相互融合并创造出新的饮食潮流。近年来，随着人们健康意识的提高，“健康饮食”已成为一个重要的趋势。健康饮食强调食材的新鲜、营养的均衡以及烹饪方式的健康。许多国家也在探索如何在保持传统饮食文化的同时，融入更多健康元素以满足现代人对健康的追求。此外，科技的发展也对饮食文化产生了影响，例如，通过互联网，人们可以更方便地获取世界各地的食谱和烹饪技巧，这也推动了饮食文化的多样化。\n\n请撰写一篇关于“饮食文化与健康饮食趋势”的文章。文章只出现7个段落，每个段落用两个换行符“\n\n”分隔开来。请注意，文章中不能出现“肥胖”、“卡路里”、“减肥”这几个词。此外，文章的每个句子（用中文句号或问号或感叹号分隔）至少15个字，最多20个字。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    errors = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        errors.append(\"回答没有以【答案开始】开头\")\n    if not response.endswith(\"【答案结束】\"):\n        errors.append(\"回答没有以【答案结束】结尾\")\n    \n    # 如果有标记错误，直接返回（无法进行后续检查）\n    if errors:\n        return {\"check_code\": False, \"reason\": \",\".join(errors)}\n    \n    # 提取实际内容\n    content = response[len(\"【答案开始】\"):-len(\"【答案结束】\")].strip()\n    \n    # 检查禁止词\n    forbidden_words = [\"肥胖\", \"卡路里\", \"减肥\"]\n    found_words = [word for word in forbidden_words if word in content]\n    if found_words:\n        errors.append(f\"包含禁止词：{','.join(found_words)}\")\n    \n    # 检查段落数和分隔符\n    paragraphs = [p.strip() for p in content.split(\"\\n\\n\") if p.strip()]\n    if len(paragraphs) != 7:\n        errors.append(f\"段落数为{len(paragraphs)}而不是7\")\n    \n    # 检查每个句子的长度\n    for p_idx, para in enumerate(paragraphs, 1):\n        # 使用正则分句（保留结尾标点）\n        sentences = re.findall(r'[^。？！]+[。？！]', para)\n        \n        # 检查是否有未结束的句子\n        remaining = re.sub(r'[^。？！]+[。？！]', '', para).strip()\n        if remaining:\n            errors.append(f\"第{p_idx}段存在未以标点结尾的句子\")\n            sentences.append(remaining)  # 将剩余文本作为句子检查长度\n        \n        for s_idx, sent in enumerate(sentences, 1):\n            length = len(sent)\n            if length < 15 or length > 20:\n                errors.append(f\"第{p_idx}段第{s_idx}句长度{length}（应在15-20之间）\")\n    \n    return {\n        \"check_code\": len(errors) == 0,\n        \"reason\": \",\".join(errors) if errors else \"\"\n    }"}
{"prompt": "请描述一次在野生动物保护区的探险经历，但不允许出现“动物”、“植物”、“森林”这几个词。文章应只出现8个段落（不要出现标题），每个段落用两个换行符“\n\n”分隔开来。在第三个段落中，必须刚好由四个句子（用中文句号或问号或感叹号分隔）组成。要求文章以“这次探险将永远留在我的记忆中。”这句话结尾。模型回复两个答案，并且答案之间用六个星号符号（******）将它们分开。\n\n不允许生成多余的内容和解析。上面的是指令，在回答的开头用\"【答案开始】\"标记你的回答的开始，标记之后再按照上面的指令提供你的实际回答，如果要求中需要你提供多个回答，也都放在此处，然后用\"【答案结束】\"标记你的回答的结束。", "valid_code": "def check_response(response):\n    import re\n    \n    # 定义错误信息列表\n    err_infos = []\n    \n    # 检查起始和结束标记\n    if not response.startswith(\"【答案开始】\"):\n        err_infos.append(\"缺少起始标记【答案开始】\")\n    if not response.endswith(\"【答案结束】\"):\n        err_infos.append(\"缺少结束标记【答案结束】\")\n    \n    # 提取答案内容\n    if response.startswith(\"【答案开始】\") and response.endswith(\"【答案结束】\"):\n        content = response[6:-6].strip()  # 去除标记\n        \n        # 检查答案分隔符\n        answers = content.split('******')\n        if len(answers) != 2:\n            err_infos.append(f\"答案分隔符错误：需要2个答案，实际{len(answers)}个\")\n        else:\n            for i, ans in enumerate(answers):\n                # 检查段落结构\n                paragraphs = ans.strip().split('\\n\\n')\n                if len(paragraphs) != 8:\n                    err_infos.append(f\"答案{i+1}段落数错误：需要8段，实际{len(paragraphs)}段\")\n                \n                # 检查第三段句子数\n                if len(paragraphs) >= 3:\n                    third_para = paragraphs[2]\n                    sentences = re.split(r'[。？！]', third_para)\n                    sentences = [s.strip() for s in sentences if s.strip()]\n                    if len(sentences) != 4:\n                        err_infos.append(f\"答案{i+1}第三段句子数错误：需要4句，实际{len(sentences)}句\")\n                \n                # 检查结尾句子\n                if paragraphs:\n                    last_para = paragraphs[-1].strip()\n                    if not last_para.endswith('这次探险将永远留在我的记忆中。'):\n                        err_infos.append(f\"答案{i+1}结尾句错误：缺少指定结束语\")\n                \n                # 检查禁止词\n                forbidden_words = [\"动物\", \"植物\", \"森林\"]\n                for word in forbidden_words:\n                    if word in ans:\n                        err_infos.append(f\"答案{i+1}包含禁止词：'{word}'\")\n                        break\n    \n    # 返回验证结果\n    if err_infos:\n        return {\"check_code\": False, \"reason\": \" | \".join(err_infos)}\n    else:\n        return {\"check_code\": True, \"reason\": \"\"}"}
